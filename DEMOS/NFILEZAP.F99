      program filezap
      implicit integer(a-z)
c
c  filezap : an MDOS utility to inspect and alter disk files
c
c  usage:           FILEZAP <file to inspect/alter>
c
c  Copyright 1988/1989 by LGMA Products
c
c  Notice to Users:
c
c  This program style (not the source code) is based on a utility developed
c  (and copyrighted) by John Hodgson (1986).  It is distributed as an
c  example of 9640 FORTRAN, for strictly non-commercial distribution only.
c
c  Update History:
c
c   14-Oct-89    version 1.6    Added search feature.
c
      include 'FILECOM'

      logical *2 alldisk, first, refresh
      integer *2 xcoords(16)

c  equivalences for speedup of display

      integer *4 ddispz(4)
      real    *8 ddispa(2)
      equivalence (ddispz(1),idispz(1)), (ddispa(1),idispa(1))

c  x coordinates for search

      data xcoords / 5, 5, 14, 14, 14, 14, 23, 23, 23, 23,
     +                 32, 32, 32, 32, 41, 41 /

c  Make sure it is 80 column mode that we are in

      maxsect = 80                    ! # of sectors buffered
      alldisk = .false.               ! editing whole disk (true) or not
      call set80                      ! put in 80 column mode
      call printc ( .false. )         ! disable control/s processing
      write ( 6, 9125 )               ! write header to crt

c  get user command (from MDOS command line string)

      command(1) = 80                 ! set maximum length of command
      call cmdstr ( command, error )  ! get command string

c  if command line retrieve error or user specified a question mark,
c  then display a help prompt.

      if ( error .ne. 0 .or. command(2) .eq. '?' ) then
        write ( 6, 9100 )
        stop

c  if user didn't specify a file or disk name on command line, ask
c  him for one.

      else if ( command(1) .eq. z'00' ) then
        write ( 6, 9120 )
        read  ( 6, 9121, err=9999, end=9999, status=error ) file
        write ( 6, 9125 )
      else

c   Extract file name from command

        do 1000 i=1,80                ! blank resulting file name
1000    file(i) = ' '

        iend    = command(1)
        do 1010 i=1,iend              ! get for each character in string
1010    file(i) = command(i+1)
      endif

c  Zap the sector number array, so that the sectors will be flushed

      do 1020 i=1,maxsect
1020  sectnum(i) = -1

c  Check to see if the user is trying to inspect the entire disk.
c  I will know this if the file name specified ends with a period (.)
c  or a colon (:).

      do 1030 i=1,80
        endpos = 81-i
        if ( file(endpos) .ne. ' ' ) goto 1040
1030  continue

1040  continue

c  It is a disk sector update.  I know this cause the file name
c  ends with a colon (:) or a period (.).

      if ( file(endpos) .eq. ':' .or. file(endpos) .eq. '.' ) then

c  Get 1st sector of disk device.  This will contain the "lastsect"
c  value and other displayable information.

        call bread ( file, 0, 1, volname, error )
        if ( error .ne. 0 ) then
          write ( 6, 9110 ) error, file
          write ( 6, 9100 )
          stop
        endif
        lastsect = volmax

c  Write out some skeleton information about the disk volume, from the
c  volume header read.

        write ( 6, 9170 ) lastsect, (file(i),i=1,8), volname
        write ( 6, 9180 ) volspt, voltrk, volside, voldens
        write ( 6, 9131 )
        write ( 6, 9132 )
      else

c  It's a file, not a disk volume.
c  Get the file header via the binary read routine

        call bread ( file, 0, 0, extlength, error )
        if ( error .ne. 0 ) then
          write ( 6, 9110 ) error, file
          write ( 6, 9100 )
          stop
        endif

c  Write out some skeleton information about the file, including the
c  file name, the number of sectors in the file, and the number of
c  bytes in the last sector.
c
c  Note the conversion of numbyte, a byte variable, to nb, an integer *2
c  variable.  The "iand" is to strip off the high end negative bits, since
c  numbyte is an unsigned byte quantity.

        nb = numbyte
        nb = iand ( nb, z'00ff' )
        write ( 6, 9130 ) lastsect, (file(i),i=1,23), nb
        write ( 6, 9131 )
        write ( 6, 9132 )

c  Look at the file type, and display the type of file and record
c  length (if appropriate).

        iflags = flags
        ifixed = iand ( iflags, z'0080' )
        idispf = iand ( iflags, z'0002' )
        iprogf = iand ( iflags, z'0001' )

c  Extract the extended record length, if any

        if ( extlength .eq. 0 ) then
          extlength = reclength
          extlength = iand ( extlength, z'00ff' )
        endif

        if ( iprogf .ne. 0 ) then
          write ( 6, 9133 )                  ! program file
        else if ( idispf .eq. 0 ) then
          if ( ifixed .eq. 0 ) then
            write ( 6, 9134 ) extlength      ! display/fixed file
          else
            write ( 6, 9135 ) extlength      ! display/var file
          endif
        else
          if ( ifixed .eq. 0 ) then
            write ( 6, 9136 ) extlength      ! internal/fixed file
          else
            write ( 6, 9137 ) extlength      ! internal/var file
          endif
        endif
      endif

c  Fill up the sector buffer with the first n sectors.  N is either maxsect,
c  or is set to the number of sectors in the file, whichever is smaller.

      nsector = maxsect
      if ( nsector .gt. lastsect ) nsector = lastsect
      call bread ( file, 0, nsector, sectors, error )
      if ( error .ne. 0 ) then
        write ( 6, 9110 ) error, file
        goto 9999
      endif
c
      do 1050 i=1,nsector
1050  sectnum(i) = i-1                ! save sector numbers

c  Now enter the sector inspection loop.  Start at sector 1, and continue
c  until end of file, or until some command is given.

      lsector = 0                     ! last sector loaded
      isector = 1                     ! current sector loaded
      refresh = .true.                ! force refresh flag
      psector = -1                    ! current sector flag
      boffset = -1                    ! offset into sector flag
      first   = .true.                ! first search or not
      do while ( .true. )
        if ( lsector .ne. isector ) then
          refresh = .true.            ! force refresh
          call gread ( isector-1, error )
          if ( error .ne. 0 ) then
            write ( 6, 9160 )
            write ( 6, 9110 ) error, file
            write ( 6, 9100 )
            stop
          endif
          lsector = isector
        endif

c  Display the single sector of information in format of 16 lines of
c  16 bytes.   Display is in hexadecimal bytes, as well as translated
c  ASCII.

        if ( refresh ) then
          start = 0
          seccnt = 0
          do 2000 yrow=1,16
            do 2010 j=1,16
              seccnt = seccnt + 1
              idispz(j) = sector(seccnt)
              idispa(j) = sector(seccnt)
              if ( idispa(j) .lt. ' ' .or. idispa(j) .gt. 'z')then
                idispa(j) = '.'
              endif
2010        continue
            write ( 6, 9150 ) isector
            write ( 6, 9140 ) yrow, start, ddispz, ddispa
            start = start + 16
2000      continue
          refresh = .false.

c  if search offset is >0, then position an asterick on the screen
c  in a worthwhile location so the user can spot the new search
c  location

          if ( psector .eq. isector .and. boffset .ge. 0 ) then
            ycoord = boffset / 16  + 1
            xcoord = mod ( boffset, 16 )
            xcoord = xcoords(xcoord+1)
            write ( 6, 9190 ) ycoord, xcoord
          endif
        endif

c  Set up for possible mouse action.

        call setmse ( 1, 1, 3 )       ! x-y and speed

c   unlatch any pushbuttons from previous mouse press

        do while ( left .or. middle .or. right )
          call getmsr ( dxpos, dypos, left, middle, right )
        enddo

c  now I am sure that pushbuttons are unlatched, and no keypress.
c  wait for keypress on keyboard or mouse.

        status = 0
        do while ( (status .eq. 0) .and. (.not.left) .and.
     +               (.not.right) .and. (.not. middle) )
          call key ( 0, k, status )
          if ( status .eq. 0 ) then
            call getmsr ( dxpos, dypos, left, middle, right )
          endif
        enddo

c  Convert the keypress from integer *2 to integer *1 (just so that
c  the following if statements can be coded easier), and then do
c  the function requested by the user.
c
c  If left, middle, or right mouse button pressed, then map the
c  three buttons to:
c
c               left   = page backward
c               right  = page forward
c               middle = enter modify mode

        if      ( left ) then
          k1 = 'B'                    ! page backward
        else if ( right ) then
          k1 = 'F'                    ! page forward
        else if ( middle ) then
          k1 = ' '                    ! enter hex modify
        else
          k1 = k                      ! actual keypress
        endif

c  Now, do case of keypress k1
c                                       on cntrl/c, exit
        if      ( k1 .eq. z'3' ) then
          write ( 6, 9160 )
          stop
c                                       if numeric, goto record n
        else if ( k1 .ge. '0' .and. k1 .le. '9' ) then
          nsector = k1 - '0'
2100      continue
          status = 0
          do while ( status .eq. 0 )
            call key ( 0, k, status )
          enddo
          k1 = k
          if ( k1 .eq. z'0D' ) then
            if ( nsector .lt. 1 .or. nsector .gt. lastsect ) then
              call sound ( 300, 110, 0 )
            else
              isector = nsector
            endif
c
          else if ( k1 .ge. '0' .and. k1 .le. '9' ) then
            k = k1 - '0'
            nsector = (nsector * 10 ) + k
            goto 2100
          endif
c                                       on S, go to beginning
        else if ( k1 .eq. 'S' .or. k1 .eq. 's' ) then
          isector = 1
c                                       on E, go to end
        else if ( k1 .eq. 'E' .or. k1 .eq. 'e' ) then
          isector = lastsect
c                                       on F, forward record
        else if ( k1 .eq. 'F' .or. k1 .eq. 'f' ) then
          isector = isector + 1
          if ( isector .gt. lastsect ) then
            call sound ( 300, 110, 0 )
            isector = lastsect
          endif
c                                       on U, update record
        else if ( k1 .eq. 'U' .or. k1 .eq. 'u' ) then
          refresh = .true.            ! force refresh
          call flush  ( isector-1 )
          call bwrite ( file, isector-1, 1, sector, error )
          if ( error .ne. 0 ) then
            write ( 6, 9160 )
            write ( 6, 9110 ) error, file
            write ( 6, 9100 )
            stop
          endif
          call sound ( 300, 500, 5 )
c                                       on B, backward record
        else if ( k1 .eq. 'B' .or. k1 .eq. 'b' ) then
          isector = isector - 1
          if ( isector .lt. 1 ) then
	    call sound ( 300, 110, 0 )
            isector = 1
          endif
c                                       on R, recover record
        else if ( k1 .eq. 'R' .or. k1 .eq. 'r' ) then
          lsector = -1                ! force new sector load
          refresh = .true.
c                                       on space, hex modify mode
        else if ( k1 .eq. ' ' ) then
          call modhex
          refresh = .true.
c                                       on *, ascii modify mode
        else if ( k1 .eq. '*' ) then
          call modasc
          refresh = .true.
c
        else if ( k1 .eq. '/' ) then
          first = .true.
          call search ( first )
          if ( psector .ne. isector .or. boffset .ne. soffset ) then
            refresh = .true.
          endif
c
        else if ( (k1 .eq. 'n' .or. k1 .eq. 'N') .and.
     +              ( .not. first ) ) then
          soffset = boffset
          call search ( first )
          if ( psector .ne. isector .or. boffset .ne. soffset ) then
            refresh = .true.
          endif
        endif
      enddo
9999  write ( 6, 9160 )
      stop

9100  format ( ' Usage:   FILEZAP <file name>    or'/
     +           '          FILEZAP <disk name>')
9110  format ( ///' **Error ',i3, ' accessing file ',80a1/)
9120  format ( ///' Enter file name or disk name to edit:')
9121  format ( 80a1 )
9125  format ('1        FileZap 1.6',
     +              m1.63,'LGMA Products')
9130  format ('+',m3.63,'End rec :',i5, m5.63,'File : ',8a1,
     +      m6.63,15a1, m7.63,'EOF : ',i3)
9131  format ('+',m18.5,'Commands: S) Starting record',
     +    m18.38,'E) Ending record', m19.15,'F) Forward record',
     +    m19.38,'B) Backward record', m20.15,'U) Update record',
     +    m20.38,'R) Recover record', m21.15,'/) Search',
     +    m21.38,'N) Search Next')
9132  format ('+',m22.9,'<SPACE> : enter HEX modify',
     +    m22.37,'* : enter ASCII modify', m23.13,'<n>CR : goto record n',
     +    m23.38,'^C : exit program', m18.65,'Mouse Usage:',
     +    m20.64,'Right  = Forward',  m21.64,'Left   = Backward',
     +    m22.64,'Center = Modify')
9133  format ('+',m8.63, 'Program File')
9134  format ('+',m8.63, 'Disp/Fixed ',i3)
9135  format ('+',m8.63, 'Disp/Var ',i3)
9136  format ('+',m8.63, 'Int/Fixed ',i3)
9137  format ('+',m8.63, 'Int/Var ',i3)
9140  format ( '+', mn.1, z2, ' : ', 4(z8,1x), ' : ',2a8, m1.1 )
9150  format ( '+', m2.63, 'Cur rec :',i5)
9160  format ( '+', m24.79, // )
9170  format ('+',m3.63,'End rec :',i5, m5.63,'Disk: ',8a1, m6.63,10a1)
9180  format ( '+', m7.63, 'Sect/Track : ',i4, m8.63, 'Track/Side : ',i4,
     +    m9.63, '# Sides :    ',i4, m10.63, 'Density :    ',i4)
9190  format ( '+', mn.n, '*' )
      end
      subroutine search ( first )
      implicit integer(a-z)

c  search  :  search for a given hexadecimal value; starting at
c             the current sector isector; and proceeding to the
c             end of the file specified by lastsect

      include 'FILECOM/NOLIST'

      logical *2 first
      integer *2 vsector(128)
      equivalence (vsector, sector)

      write ( 6, 9140 )
c                                 if first time; then
      if ( first ) then
        len = 0
        do while ( len .eq. 0 )
          write ( 6, 9100 )
          read  ( 6, 9110, end=9999, err=9999 ) len, svalue
          psector = isector
          offset = 0
        enddo
      else
        offset = offset + 1
      endif

c  start the search at current sector, offset=0

      if ( offset .gt. 127 ) then
        offset = 0
        psector = psector + 1
        if ( psector .ge. lastsect ) return
      endif

c  do for each sector until value found, search aborted, or end of file

      write ( 6, 9105 )
      boffset = offset * 2
      do while ( psector .le. lastsect )

c  see if user requesting abort; if so; then display message and exit

        call key ( 0, k, status )
        if ( status .ne. 0 ) then
          write ( 6, 9135 )
          first  =  .true.
          psector = -1
          boffset = -1
          return
        endif

c  the user is not requesting an abort.   Display the current sector
c  and offset being processed.

        write ( 6, 9120 ) psector, boffset, svalue
        call gread ( psector-1, error )
        if ( error .ne. 0 ) return

c  search this sector

        do while ( offset .lt. 128 )
          write ( 6, 9125 ) boffset
          if ( vsector(offset+1) .eq. svalue ) then
            isector = psector
            first   = .false.
            return
          endif
          offset = offset + 1
          boffset = boffset + 2
        enddo

c  value not found on this sector.  Try the next sector

        offset  = 0
        boffset = 0
        psector = psector + 1
      enddo

c  on end of file, don't allow any furthur "next".  display message
c  not found and return

      first   = .true.          ! disallow any furthur "search next"
      psector = -1
      boffset = -1
      write ( 6, 9130 )
9999  return

9100  format ( '+', m11.63, 'Search For:', m12.65 )
9105  format ( '+', m11.63, 14x, m12.63, 14x, m11.63 )
9110  format ( q, z4 )
9120  format ( '+', m13.63, 'Sector ',i5,
     +              m14.63, 'Offset    ',z2,
     +              m15.63, 'Value   ',z4 )
9125  format ( '+', m14.73, z2 )
9130  format ( '+', m16.63, 'Value Not Found')
9135  format ( '+', m16.63, 'Search Aborted')
9140  format ( '+', m10.63, 15x, m12.63, 15x, m13.63, 15x,
     +              m14.63, 15x, m15.63, 15x, m16.63, 15x,
     +              m16.63, 15x, m17.63, 15x, m10.63 )
      end
      subroutine modhex
      implicit integer(a-z)

c  modhex - modify hexadecimal values

c  This subroutine allows the user to modify the sector in hexadecimal
c  format (z2).

      include 'FILECOM/NOLIST'

      integer *1 achar
      logical *2 first, second

c  write header:

      write ( 6, 9100 )

c  basic sector modification loop.  Position cursor to hexadecimal value,
c  blank the two character position which had the value, and enter cursor
c  polling loop.

      bsector = 1                 ! current byte being modified
      ichar   = 0                 ! last character read

      do while ( ichar .ne. z'001b' )
        location = bsector - 1
        xpos = ( location ) / 16
        ypos = ( location ) - ( xpos * 16 )
        apos = 45 + ypos          ! ascii character position
        xpos = xpos + 1           ! actual screen position
        ipos = ypos / 4           ! position in group of four bytes
        ypos = ( ypos * 2 ) + 6 + ipos

c  blank the current two characters at the cursor position.  Also, display
c  the current location being modified on the right hand side of screen.

        write ( 6, 9110 ) xpos, ypos, xpos, apos, location

c  make sure the mouse buttons are unlatched from previous mouse
c  press

        do while ( left .or. middle .or. right )
          call getmsr ( dxpos, dypos, left, middle, right )
        enddo

c  do until a keypress, mouse button press, or mouse movement

        status = 0
        ichar  = 0
        dxpos  = 0
        dypos  = 0
        do while ( (status .eq. 0) .and. (.not. middle) .and.
     +               (dxpos .eq. 0) .and. (dypos .eq. 0 ) )
          call key ( 0, ichar, status )
          if ( status .eq. 0 ) then
            call getmsr ( dxpos, dypos, left, middle, right )
          else
            dxpos = 0
            dypos = 0
          endif
        enddo

        if ( middle ) ichar = z'001b'
        if ( ichar .eq. 3 ) stop

c  test special characters, up, down, left, right, escape, and
c  number keys

        first = .false.           ! first hex character seen

c                                   cursor down
        if ( ichar .eq. z'008a' .or. dypos .gt. 0 ) then
          achar = sector(bsector)
          if ( achar .lt. ' ' .or. achar .gt. 'z' ) achar ='.'
          write ( 6, 9140 ) xpos, ypos, sector(bsector),
     +                        xpos, apos, achar, xpos, apos
          if ( dypos .le. 0 ) dypos = 1
          bsector = bsector + ( 16 * dypos )
          do while ( bsector .gt. 256 )
            bsector = bsector - 16
          enddo

c                                   cursor right
        else if ( ichar .eq. z'0089' .or. dxpos .gt. 0 ) then
          achar = sector(bsector)
          if ( achar .lt. ' ' .or. achar .gt. 'z' ) achar = '.'
          write ( 6, 9140 ) xpos, ypos, sector(bsector),
     +                      xpos, apos, achar, xpos, apos
          if ( dxpos .le. 0 ) dxpos = 1
          bsector = bsector + dxpos
          if ( bsector .gt. 256 ) bsector = 256

c                                   cursor up
        else if ( ichar .eq. z'008b' .or. dypos .lt. 0 ) then
          achar = sector(bsector)
          if ( achar .lt. ' ' .or. achar .gt. 'z' ) achar = '.'
          write ( 6, 9140 ) xpos, ypos, sector(bsector),
     +                      xpos, apos, achar, xpos, apos
          if ( dypos .ge. 0 ) dypos = -1
          bsector = bsector + ( 16 * dypos )
          do while ( bsector .lt. 1 )
            bsector = bsector + 16
          enddo

c                                   cursor left
        else if ( ichar .eq. z'0088' .or. dxpos .lt. 0 ) then
          achar = sector(bsector)
          if ( achar .lt. ' ' .or. achar .gt. 'z' ) achar = '.'
          write ( 6, 9140 ) xpos, ypos, sector(bsector),
     +                      xpos, apos, achar, xpos, apos
          if ( dxpos .ge. 0 ) dxpos = -1
          bsector = bsector + dxpos
          if ( bsector .lt. 1 ) bsector = 1

c                                   hexadecimal character
        else if ( ichar .ge. z'0030' .and. ichar .le. z'0039') then
          hexval1 = ichar - z'0030'
          write ( 6, 9130 ) xpos, ypos, hexval1
          first = .true.

c                                   hexadecimal character
        else if ( ichar .ge. z'0041' .and. ichar .le. z'0046') then
          hexval1 = (ichar - z'0041') + z'000a'
          write ( 6, 9130 ) xpos, ypos, hexval1
          first = .true.
        endif

c  if first hexadecimal character read, then try for second

        if ( first ) then
          second = .false.

          do while ( .not. second .and. ichar .ne. z'001b')

c  make sure mouse is unlatched

            do while ( left .or. middle .or. right )
              call getmsr ( dxpos, dypos, left, middle, right )
            enddo

            status = 0
            dxpos  = 0
            dypos  = 0
            do while ( status .eq. 0 .and. (.not. middle) )
              call key ( 0, ichar, status )
              if ( status .eq. 0 ) then
                call getmsr ( dxpos, dypos, left, middle, right )
              endif
            enddo
c                                       if middle mouse, then esc
            if ( middle ) ichar = z'001b'
c                                       backdoor exit, cntrl/c
            if ( ichar .eq. 3 ) stop

            if ( ichar .ge. z'0030' .and. ichar .le. z'0039' ) then
              hexval1 = (hexval1 * 16 ) + (ichar - z'0030')
              second  = .true.
            else if ( ichar .ge. z'0041' .and. ichar .le. z'0046' )
     +                                      then
              hexval1 = (hexval1 * 16 ) + ((ichar - z'0041') +
     +                  z'000a')
              second  = .true.
            else if ( ichar .eq. z'0089' ) then
              second  = .true.
            else if ( ichar .eq. z'000d' ) then
              second  = .true.
            endif
          enddo

c  If second character or second character terminator seen, update sector

          if ( second ) then
            sector(bsector) = hexval1
            achar = sector(bsector)
            if ( achar .lt. ' ' .or. achar .gt. 'z' ) achar = '.'
            write ( 6, 9140 ) xpos, ypos, sector(bsector),
     +                        xpos, apos, achar,
     +                        xpos, ypos
            bsector = bsector + 1
            if ( bsector .gt. 256 ) bsector = bsector - 1
          endif
        endif
      enddo
      write ( 6, 9150 )

9100  format ( '+', m13.63, 'Modify : HEX', m14.63, '<ESC> to exit',
     +  m15.63, '  or Middle', m16.63, ' Mouse Button', m11.63, 'Loc : ')
9110  format ( '+', mn.n, '_ ', mn.n, '*', m11.68, z2)
9130  format ( '+', mn.n, z1, '_' )
9140  format ( '+', mn.n, z2, mn.n, a1, mn.n )
9150  format ( '+', m13.63, 13x, m14.63, 13x, m11.63, 13x,
     +                m15.63, 13x, m16.63, 13x, m1.1)
        end
        subroutine modasc
        implicit integer(a-z)

c  modasc - modify ascii values

c  This subroutine allows the user to modify the sector in ascii
c  format (a1), which means just typing on the keyboard.

        include 'FILECOM/NOLIST'

c  write header:

      integer *1 achar

      write ( 6, 9100 )

c  basic sector modification loop.  Position cursor to hexadecimal value,
c  blank the two character position which had the value, and enter cursor
c  polling loop.

      bsector = 1                 ! current byte being modified
      ichar   = 0                 ! last character read

      do while ( ichar .ne. z'001b' )
        location = bsector - 1
        xpos = ( location ) / 16
        ypos = ( location ) - ( xpos * 16 )
        apos = 45 + ypos          ! ascii character position
        xpos = xpos + 1           ! actual screen position
        ipos = ypos / 4           ! position in group of four bytes
        ypos = ( ypos * 2 ) + 6 + ipos

c  blank the two characters at the current cursor position.  Also, display
c  the location being modified on the right hand side of screen.

        write ( 6, 9110 ) xpos, ypos, xpos, apos, location

c  make sure that any mouse buttons have been released

        do while ( left .or. middle .or. right )
          call getmsr ( dxpos, dypos, left, middle, right )
        enddo

c  wait for keypress, or middle mouse button press, or mouse movement

        status = 0
        dxpos  = 0
        dypos  = 0
        ichar  = 0
        do while ( (status .eq. 0) .and. (dxpos .eq. 0)
     +       .and. (dypos .eq. 0)  .and. (.not. middle ) )
          call key ( 0, ichar, status )
          if ( status .eq. 0 ) then
            call getmsr ( dxpos, dypos, left, middle, right )
          endif
        enddo

        if ( middle ) ichar = z'001b'         ! middle is escape
        if ( ichar .eq. 3 ) stop              ! always abort on cntrl/c

c  test special characters, up, down, left, right, escape, and
c  number keys

c                                   cursor down
        if ( ichar .eq. z'008a' .or. dypos .gt. 0 ) then
          achar = sector(bsector)
          if ( achar .lt. ' ' .or. achar .gt. 'z' ) achar ='.'
          write ( 6, 9140 ) xpos, ypos, sector(bsector),
     +                      xpos, apos, achar, xpos, apos
          if ( dxpos .le. 0 ) dxpos = 1
          bsector = bsector + ( 16 * dxpos )
          do while ( bsector .gt. 256 )
            bsector = bsector - 16
          enddo
c                                   cursor right
        else if ( ichar .eq. z'0089' .or. dxpos .gt. 0 ) then
          achar = sector(bsector)
          if ( achar .lt. ' ' .or. achar .gt. 'z' ) achar = '.'
          write ( 6, 9140 ) xpos, ypos, sector(bsector),
     +                      xpos, apos, achar, xpos, apos
          if ( dxpos .le. 0 ) dxpos = 1
          bsector = bsector + dxpos
          if ( bsector .gt. 256 ) bsector = 256
c                                   cursor up
        else if ( ichar .eq. z'008b' .or. dypos .lt. 0 ) then
          achar = sector(bsector)
          if ( achar .lt. ' ' .or. achar .gt. 'z' ) achar = '.'
          write ( 6, 9140 ) xpos, ypos, sector(bsector),
     +                      xpos, apos, achar, xpos, apos
          if ( dypos .ge. 0 ) dypos = -1
          bsector = bsector + ( 16 * dypos )
          do while ( bsector .lt. 1 )
            bsector = bsector + 16
          enddo
c                                   cursor left
        else if ( ichar .eq. z'0088' .or. dxpos .lt. 0 ) then
          achar = sector(bsector)
          if ( achar .lt. ' ' .or. achar .gt. 'z' ) achar = '.'
          write ( 6, 9140 ) xpos, ypos, sector(bsector),
     +                        xpos, apos, achar, xpos, apos
          if ( dxpos .ge. 0 ) dxpos = -1
          bsector = bsector + dxpos
          if ( bsector .lt. 1 ) bsector = 1
c                                   hexadecimal character
        else if ( ichar .ge. z'0020' .and. ichar .le. z'007f') then

c  if first hexadecimal character read, then try for second

          sector(bsector) = ichar
          achar = ichar
          if ( achar .lt. ' ' .or. achar .gt. 'z' ) achar = '.'
          write ( 6, 9140 ) xpos, ypos, sector(bsector),
     +                      xpos, apos, achar,
     +                      xpos, ypos
          bsector = bsector + 1
          if ( bsector .gt. 256 ) bsector = bsector - 1
        endif
      enddo
      write ( 6, 9150 )

9100  format ( '+', m13.63, 'Modify : ASCII', m14.63, '<ESC> to exit',
     +                m11.63, 'Loc : ', m15.63, '  or Middle',
     +                m16.63, ' Mouse Button')
9110  format ( '+', mn.n, '_ ', mn.n, '*', m11.68, z2)
9140  format ( '+', mn.n, z2, mn.n, a1, mn.n )
9150  format ( '+', m13.63, 14x, m14.63, 13x, m11.63, 13x,
     +                m15.63, 13x, m16.63, 13x, m1.1)
      end
      subroutine gread ( nsector, error )
      implicit integer(a-z)

c  gread : reads the sector requested into the "sector" array.  It
c          first searches my sector buffers to see if the sector
c          is in the cache, in this way helping to eliminate multiple
c          reads.

      include 'FILECOM/NOLIST'

c  see if sector in sector buffers

      do 1000 i=1,maxsect
      if ( sectnum(i) .eq. nsector ) then
        do 1010 j=1,256
1010    sector(j) = sectors(j,i)
        return
      endif
1000  continue

c  drop through do loop means that sector is not in sector cache.
c  See if any empty cache spaces in sector cache, if so then read
c  the sector into there.

      do 1020 i=1,maxsect
      if ( sectnum(i) .eq. -1 ) then
        nextsect = i
        goto 1030
      endif
1020  continue

c  No empty sectors in cache.  Must deallocate one.  Do this via
c  random pointer

      nextsect = irand ( maxsect ) + 1

c  An empty sector was found in the cache, make it the next sector
c  to process.

1030  continue
      call bread ( file, nsector, 1, sectors(1,nextsect), error )
      if ( error .ne. 0 ) return

c  Good read on the new sector.  Set the sector number so I will remember
c  where the sector is in sector cache, and move the sector data to
c  the user sector array.

      sectnum(nextsect) = nsector
      do 1040 i=1,256
1040  sector(i) = sectors(i,nextsect)
      end
      subroutine flush ( nsector )
      implicit integer(a-z)

c  flush  :  flush is called when a sector is written back to disk.
c            It removes the record of the sector from the sector
c            cache, which will force the next read to come from the
c            disk.

      include 'FILECOM/NOLIST'
c
      do 1000 i=1,maxsect
        if ( sectnum(i) .eq. nsector ) then
          sectnum(i) = -1
        endif
1000  continue
      end
