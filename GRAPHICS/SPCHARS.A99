	 TITL 'SPCHAR - DEFINE SPRITE CHARACTER'
	 IDT  'SPCHAR'
*
*  THIS SUBROUTINE DEFINES A CHARACTER BASED UPON THE 8 BYTE STRING PASSED.
*
*  THE CHARACTER DEFINITION IS STORED IN THE SPRITE CHARACTER ARRAY.
*
*  CALLING SEQUENCE:
*
*	CALL SPCHAR ( ASCII CODE, PATTERN ARRAY )
*
*  WHERE:
*
*  ASCII   -  	IS A ONE WORD INTEGER DESCRIBING THE ASCII CODE TO BE
*  CODE	 	DEFINED, FROM >80 TO >FF
*
*  PATTERN -	IS AN 8 BYTE ARRAY OR DOUBLE PRECISION VALUE DESCRIBING
*  ARRAY	THE CHARACTER TO DISPLAY
*
*  Copyright 1988 by LGMA Products
*
*  Update History:
*
*    ????			Original Release
*    20-Nov-1988  Version 4	MDOS Compatible Version
*    08-AUG-1989  VERSION 4.4   GPL COMPATIBLE VERSION
*    04-JAN-1990  VERSION 4.41  REMOVE RESTRICTION OF 128-255 FOR CHAR
*
*  DEFINITIONS:
*
	DEF  SPCHAR		SPRITE CHARACTER ENTRY	
*
*  EQUATES:
*
	COPY "FORTPAR:"		GENEVE OR MDOS
	UNL
	COPY "EQUATES:FORTEX.EQ9"
	COPY "EQUATES:VID.EQ9"
	LIST
*
*  NOTE:  SPRITE PATTERN LIST MUST BE BUILT IN I/O BUFFER FOR
*	  MDOS, SINCE IT MUST RESIDE ABOVE >E000 IN USER MEMORY
*
	UNL
	IF   GENEVE
	LIST
SPRPTR	EQU  IOBBUF		2 BYTES + 16 BYTES = 18 BYTES USED
	ENDIF
	LIST
*
*  MAIN ENTRY:
*
SPCHAR	EQU  $
	DATA -2			2 ARGUMENTS
	DATA TEMPS		TEMP SAVE AREA
	UNL
	IF   GENEVE
	LIST
	LI   R0,GETVID		GET VIDEO MODE
	XOP  @DVIDXP,0		DO IT
	CI   R0,TEXT1		TEXT 1 MODE?
	JEQ  SET40E		BRIF YES, NO SPRITES ALLOWED
	CI   R0,TEXT2		TEXT 2 MODE?
	JEQ  SET40E		BRIF YES, NO SPRITES ALLOWED
	MOV  @ACODE,R5		GET SPRITE CODE NUMBER
	JEQ  BADCHA
	MOV  *R5,R5
	JLT  BADCHA
	CI   R5,255
	JGT  BADCHA
	MOV  R5,R3		STARTING PATTERN #
	MOV  @APATTE,R5		GET PATTERN
	JEQ  BADPAT
	LI   R6,SPRPTR		SPRITE POINTER
	MOV  *R5+,*R6+		STUFF PATTERN
	MOV  *R5+,*R6+
	MOV  *R5+,*R6+
	MOV  *R5,*R6
	LI   R0,SPRPAD		SpritePatDefGet
	LI   R1,SPRPTR		POINTER TO SPRITE PATTERN DATA
	LI   R2,1		# PATTERNS TO DEFINE OR GET
	CLR  R4			DEFINE (0), GET (FFFF)
	XOP  @DVIDXP,0		DO IT
	ELSE
	LIST
	MOV  @SET40F,R5		40 COLUMN MODE?
	CI   R5,TEXT1
	JEQ  SET40E		BRIF YES, ERROR
	CI   R5,TEXT2
	JEQ  SET40E		BRIF 80 COLUMN MODE, ERROR
	MOV  @ACODE,R5		COMPUTE POINTER
	MOV  *R5,R5
	CI   R5,>0080		>= 80 (OR 128)
	JLT  BADCHA
	CI   R5,>00FF		<  FF (OR 255)
	JGT  BADCHA
	AI   R5,->80		ZERO OFFSET
	SLA  R5,3		* 8 FOR 8 BYTE ARRAY
	AI   R5,SPATPT		+ TABLE START
	MOV  R5,R0
	MOV  @APATTE,R1		CPU RAM START
	LI   R2,8		8 BYTES TO MOVE
	BLWP @CVMBW$		WRITE IT
	ENDIF
	JMP  CHARET		RETURN
*
*  40 COLUMN MODE ERROR
*
SET40E	EQU  $
	BLWP *R10
	DATA ERROR
	TEXT 'S4'		40 COLUMN MODE ERROR
	JMP  CHARET
*
*  BAD CHARACTER NUMBER ERROR
*
BADCHA	EQU  $
	BLWP *R10
	DATA ERROR
	TEXT 'IV'		BAD CHARACTER #
	JMP  CHARET
*
*  BAD CHARACTER PATTERN ERROR
*
BADPAT	EQU  $
	BLWP *R10
	DATA ERROR
	TEXT 'PN'		PATTERN NUMBER
	JMP  CHARET
*
CHARET	EQU  $
	MOV  @TEMPS,R3		RESTORE R3
	B    *R11		RETURN
*
*  DATA AREA:
*
TEMPS	BSS  4
ACODE	BSS  2			ASCII CHARACTER CODE
APATTE	BSS  2			PATTERN ARRAY
*
	UNL
	IF   GENEVE
	LIST
DVIDXP	DATA VIDXOP		VIDEO XOP NUMBER
	ENDIF
	LIST
	END
