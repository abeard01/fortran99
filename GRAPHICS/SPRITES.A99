	TITL 'SPRITE - DEFINE SPRITE CHARACTER'
	IDT  'SPRITE'
*
*
*  THIS SUBROUTINE ALLOWS CREATION OF SPRITES
*
*  CALLING SEQUENCE:
*
*  CALL SPRITE ( SPRITE NUMBER, CHARACTER VALUE, SPRITE COLOR, DOT-ROW,
*		  DOT COLUMN, ROW VELOCITY, COLUMN VELOCITY )
*
*  WHERE:
*
*  	SPRITE    -  IS THE NUMBER OF THE SPRITE.  IT RANGES FROM
*  	NUMBER		1 TO 32.
*
*  	CHARACTER -  IS THE CHARACTER NUMBER FROM >80 TO >FF
*  	VALUE
*
*  	SPRITE    -  IS THE COLOR OF THE SPRITE FROM 1 TO 16, OR 16 WORD
*  	COLOR        ARRAY IN SPRITE MODE 2.
*
*  	DOT	 -   IS THE ROW # FROM 1 TO 192 (1 TO 208, 1 TO 216)
*  	ROW
*
*  	DOT	 -   IS THE COLUMN # FROM 1 TO 255
*  	COLUMN
*
*  	ROW	-    IS THE SPEED OF THE Y DIRECTION, FROM 0 TO FF
*  	VELOCITY		( OPTIONAL )
*
*  	COLUMN    -  IS THE SPEED OF THE X DIRECTION, FROM 0 TO FF
*  	VELOCITY		( OPTIONAL )
*
*  Copyright 1988 by LGMA Products
*
*  Change History:
*
*  v3.0   20-June-1987:  Changed INTFLG address.  Delete WAIT equate,
*			   not needed.
*
*  v4.0   01-Oct-1988:   MDOS Compatable Version
*
*  v4.2   22-feb-1989:   Fix for sprites >80 to >ff
*
*  V4.3   04-Jan-90      Fix sprite mode 2.  Allow sprites 0-255, not 128-255.
*
*  DEFINITIONS:
*
	DEF  SPRITE
*
	COPY "FORTPAR:"
	UNL
	COPY "EQUATES:FORTEX.EQ9"
	COPY "EQUATES:VID.EQ9"
	LIST
*
*  OTHER EQUATES, NOTE THAT SPRITE LIST FOR MDOS MUST BE BUILT IN
*  I/O BUFFER, SINCE IT MUST RESIDE IN RAM ABOVE >E000.
*
	UNL
	IF   GENEVE
	LIST
SPRNUM	EQU  IOBBUF		SPRITE NUMBER
	ENDIF
	LIST
*
*  MAIN ENTRY:
*
SPRITE	EQU  $
	DATA -7			7 ARGUMENTS
	DATA TEMPS		TEMP DATA AREA
	UNL
	IFEQ GENEVE
	LIST
	MOV  @SET40F,R5		40 CHAR MODE?
	CI   R5,TEXT1
	JEQ  BADS40
	CI   R5,TEXT2
	JEQ  BADS40		BRIF 80 COLUMN MODE, ERROR
	LIMI 0			DISABLE INTERRUPTS IN TI-99 MODE
	LI   R1,ATRLIS		CLEAR ATTRIBUTE LISTS
	MOV  R1,R2
	CLR  *R1+
	CLR  *R1+
	CLR  *R1+		AND MOTION LISTS
	CLR  *R1+
*
*  BUILD SPRITE ATTIBUTE LIST
*
	MOV  @ADOTR,R5		GET DOT-ROW DEFINITION
	MOV  *R5,R5
	JLT  BADDOR
	JEQ  BADDOR		BAD DOT-ROW
	CI   R5,192
	JGT  BADDOR
	SWPB R5
	MOVB R5,*R2+		SAVE IN ATTRIBUTE LIST
	MOV  @ADOTC,R5		GET DOT-COLUMN DEFINITION
	MOV  *R5,R5
	JLT  BADDOC
	JEQ  BADDOC
	CI   R5,255
	JGT  BADDOC
	SWPB R5
	MOVB R5,*R2+		SAVE IN ATTRIBUTE LIST
	MOV  @ACHAR,R5		GET CHARACTER #
	MOV  *R5,R5
	CI   R5,128
	JLT  BADCHA
	CI   R5,255
	JGT  BADCHA
	SWPB R5
	MOVB R5,*R2+		SAVE IN ATTRIBUTE LIST
	MOV  @ACOLOR,R5		GET COLOR
	MOV  *R5,R5
	JLT  BADCOL
	CI   R5,16
	JGT  BADCOL
	DEC  R5			1-16 TO 0-15
	SWPB R5
	MOVB R5,*R2+		SAVE IN ATTRIBUTE LIST
*
*  BUILD SPRITE MOTION TABLE
*
	MOV  @AROWV,R5		GET ROW VELOCITY
	JEQ  NOMOTI		BRIF NOT SPECIFIED
	MOV  *R5,R5
	CI   R5,-128		ROW VELOCITY -128 TO 127
	JLT  BADROV
	CI   R5,127
	JGT  BADROV
	SWPB R5
	MOVB R5,*R2+		SAVE IN MOTION TABLE
	MOV  @ACOLV,R5		GET COLUMN VELOCITY
	MOV  *R5,R5
	CI   R5,-128		COLUMN VELOCITY -128 TO 127
	JLT  BADCOV
	CI   R5,127
	JGT  BADCOV
	SWPB R5
	MOVB R5,*R2+
	MOV  @ANUMB,R5		SPRITE #
	MOV  *R5,R5
	JLT  BADSPR		BAD SPRITE #
	CI   R5,32
	JGT  BADSPR
	SWPB R5
	AI   R5,>0100
	CB   R5,@NUMSPR		NUMBER OF SPRITES IN MOTION
	JLT  NOMOTI
	MOVB R5,@NUMSPR		SET # OF SPRITES
*
NOMOTI	EQU  $
	MOV  @ANUMB,R4		SPRITE NUMBER
	MOV  *R4,R4
	DEC  R4			1-32 TO 0-31
	SLA  R4,2		*4 BYTES/PACKET
	LI   R0,SPRVDP
	A    R4,R0		SPRITE ATTRIBUTE PACKET
	LI   R1,ATRLIS
	LI   R2,4
	BLWP @CVMBW$		WRITE IT
	LI   R0,SPMOTI
	A    R4,R0		SPRITE MOTION TABLE
	LI   R1,MOTLIS
	LI   R2,4
	BLWP @CVMBW$		WRITE IT
	LIMI 2
	JMP  SPRRET		RETURN
*
*  GENEVE SPECIFIC CODE
*
	ELSE
	LIST
	LI   R0,GETVID		GET VIDEO MODE
	XOP  @DVIDXP,0		DO IT
	MOV  R0,R7		SAVE VIDEO MODE
	CI   R0,TEXT1		TEXT 1 MODE (40 COLUMN)?
	JEQ  BADS40		BRIF YES, NO SPRITES
	CI   R0,TEXT2		TEXT 2 MODE (80 COLUMN)?
	JEQ  BADS40
	LI   R0,TEMPS+4		MOVE ARGUMENTS TO XOP LIST
	LI   R1,SPRNUM		MOVE TO ADDRESS
	MOV  *R0+,R5		GET SPRITE NUMBER
	JEQ  BADSPR
	MOV  *R5,R5
	JLT  BADSPR
	JEQ  BADSPR
	CI   R5,32		SPRITE IS 1 TO 32
	JGT  BADSPR
	MOV  R5,*R1+		STUFF IN LIST
	MOV  *R0+,R5		GET CHARACTER NUMBER
	JEQ  BADCHA
	MOV  *R5,R5
	JLT  BADCHA
	CI   R5,255		GOOD SPRITE NUMBER?
	JGT  BADCHA
	MOV  R5,*R1+		STUFF IN LIST
	INCT R0			SKIP SPRITE COLOR FOR NOW
	MOV  *R0+,R5		GET DOT ROW
	JEQ  BADDOR
	MOV  *R5+,R5
	JLT  BADDOR
	JEQ  BADDOR		DOT ROW IS 1 TO 216 (SPRITE 2), AND 1 TO 208
	CI   R7,4		 FOR SPRITE 1
	JGT  DORW56		
	CI   R5,208		SPRITE MODE 1
	JGT  BADDOR
	JMP  DORDON
DORW56	EQU  $
	CI   R5,216		SPRITE MODE 2
	JGT  BADDOR
DORDON	EQU  $
	MOV  R5,*R1+		STUFF IT
	MOV  *R0+,R5		GET DOT COLUMN
	JEQ  BADCOL
	MOV  *R5,R5
	JLT  BADCOL
	JEQ  BADCOL
	CI   R5,255
	JGT  BADCOL
	DEC  R5
	MOV  R5,*R1+		STUFF IT
	MOV  *R0+,R5		GET ROW VELOCITY
	JEQ  NOROWV		BRIF NO ROW VELOCITY
	MOV  *R5,R5		ELSE, GET IT
	CI   R5,-128		COMPARE LIMITS
	JLT  BADROV
	CI   R5,127
	JGT  BADROV
NOROWV	EQU  $
	MOV  R5,*R1+
	MOV  *R0,R5		GET COLUMN VELOCITY
	JEQ  NOCOLV		BRIF NO COLUMN VELOCITY
	MOV  *R5,R5
	CI   R5,-128
	JLT  BADCOV
	CI   R5,128
	JGT  BADCOV
NOCOLV	EQU  $
	MOV  R5,*R1+
*
*  SPRITE LIST IS BUILT IN I/O BUFFER.  NOW DO VIDEO XOP'S TO 
*  DEFINE SPRITE COLOR AND SPRITE DEFINITIONS.
*
SPRDON	EQU  $
	MOV  @ACOLOR,R5		GET SPRITE COLOR ADDRESS
	JEQ  BADCOL
	CI   R7,4		G2, G3, OR MULTI-COLOR?
	JGT  DOGR56		BRIF NO, NO SPRITE MODE 2
	MOV  *R5,R5		ELSE, GET COLOR NIBBLE
	JLT  BADCOL
	JEQ  BADCOL
	CI   R5,16		COLOR IS 1 TO 16
	JGT  BADCOL
	DEC  R5
	MOV  R5,*R1+		STUFF COLOR FROM 0 TO 15
	JMP  COLDON		DONE
DOGR56	EQU  $
	MOV  R5,R5		CHECK ADDRESS OF SPRITE COLOR ARRAY
	JLT  DOGR5C		BRIF OK
	CI   R5,>0400		MUST BE VALID MDOS ADDRESS RANGE
	JLT  BADCOL
*
*  MOVE IN COLOR ARRAY, MAXIMUM OF 16 WORDS.  FIRST 8 WORDS MUST BE
*  VALID COLOR
*
DOGR5C	EQU  $
	LI   R8,8		MOVE 16 WORDS
DOGRLO	EQU  $
	MOV  *R5+,R6		GET NEXT COLOR
	JEQ  BADCOL
	JLT  BADCOL
	CI   R6,16		MUST BE 1-16
	JGT  BADCOL
	DEC  R6
	MOV  R6,*R1+		SAVE IN SPRITE ARRAY
	DEC  R8
	JNE  DOGRLO
*
*  NEXT EIGHT COLORS ARE OPTIONAL, SO DON'T DO ANY ERROR CHECKING
*
	LI   R8,8
DOGRL1	EQU  $
	MOV  *R5+,R6		GET NEXT COLOR
	DEC  R6
	MOV  R6,*R1+
	DEC  R8
	JNE  DOGRL1
*
*  MDOS COMMAND LIST BUILT.  CALL SPRITE DEFINITION
*
COLDON	EQU  $
	LI   R0,SPRDEF		DEFINE SPRITE
	LI   R1,SPRNUM		DEFINE STARTING AT SPRITE #
	LI   R2,1		ONLY ONE SPRITE TO DEFINE
	XOP  @DVIDXP,0
	JMP  SPRRET		RETURN
	ENDIF
	LIST
*
BADS40	EQU  $
	BLWP *R10
	DATA ERROR
	TEXT 'S4'		40 COLUMN MODE ERROR
	JMP  SPRRET
*
BADSPR	EQU  $
	BLWP *R10
	DATA ERROR
	TEXT 'SR'		BAD SPRITE #
	JMP  SPRRET
*
BADCHA	EQU  $
	BLWP *R10
	DATA ERROR
	TEXT 'IV'		BAD CHARACTER
	JMP  SPRRET
*
BADCOL	EQU  $
	BLWP *R10
	DATA ERROR
	TEXT 'CL'		BAD COLOR
	JMP  SPRRET
*
BADDOR	EQU  $
	BLWP *R10
	DATA ERROR
	TEXT 'DR'		BAD DOT ROW
	JMP  SPRRET
*
BADDOC	EQU  $
	BLWP *R10
	DATA ERROR
	TEXT 'DC'		BAD DOT COLUMN
	JMP  SPRRET
*
BADROV	EQU  $
	BLWP *R10
	DATA ERROR
	TEXT 'RV'		BAD ROW VELOCITY (0-255)
	JMP  SPRRET
*
BADCOV	EQU  $
	BLWP *R10
	DATA ERROR
	TEXT 'CV'		BAD COLUMN VELOCITY (0-255)
*
SPRRET	EQU  $
	MOV  @TEMPS,R3
	B    *R11
*
*  DATA AREA
*
TEMPS	BSS  4
ANUMB	BSS  2			SPRITE NUMBER ( 1 TO 32 )
ACHAR	BSS  2			CHARACTER # ( >80 TO >FF )
ACOLOR	BSS  2			SPRITE COLOR
ADOTR	BSS  2			DOT-ROW POSITION
ADOTC	BSS  2			DOT-COLUMN POSITION
AROWV	BSS  2			ROW VELOCITY
ACOLV	BSS  2			COLUMN VELOCITY
*
	IF   GENEVE
DVIDXP	DATA VIDXOP		VIDEO XOP NUMBER
	ELSE
ATRLIS	BSS  1			Y - COORDINATE (0-255)
	BSS  1			X - COORDINATE (0-255)
	BSS  1			PATTERN NUMBER (0-255)
	BSS  1			EARLY CLOCK & COLOR CODE
MOTLIS	BSS  4			MOTION LIST (PRIVATE TO INTERRUPT ROUTINE)
	ENDIF
	END
