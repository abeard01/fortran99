	TITL 'SET/GET PIXEL COLOR'
	IDT  'SETPIX'
*
*  SETPIX : SET PIXEL COLOR (MDOS ONLY)
*  GETPIX : GET PIXEL COLOR (MDOS ONLY)
*
*  THIS ROUTINE IS CALLED AS FOLLOWS:
*
*	CALL SETPIX ( IXCORD, IYCORD, IFORE [,IBACK] )
*	CALL GETPIX ( IXCORD, IYCORD, IFORE [,IBACK] )
*
*  WHERE:
*
*	IXCORD  :  IS THE X COORDINATE
*	IYCORD  :  IS THE Y COORDINATE
*	IFORE   :  IS THE FOREGROUND COLOR
*
*  COPYRIGHT 1988 BY LGMA PRODUCTS
*
*  UPDATE HISTORY:
*
*    VERSION 4.1   02-OCT-88    MDOS VERSION
*                  15 NOV 88    MDOS 1.14 BYPASS MDOS CALL SINCE
*                               MDOS IS BUSTED
*
	DEF  GETPIX
	DEF  SETPIX
*
	COPY "FORTPAR:"
	UNL
	COPY "EQUATES:VID.EQ9"
	COPY "EQUATES:FORTEX.EQ9"
	LIST
*
SETPIX	EQU  $
	DATA -3			3 ARGUMENTS
	DATA TEMPS
	MOV  @AXCORD,R1		GET X COORDINATE
	JEQ  BADXCO
	MOV  *R1,R1
	JLT  BADXCO
	CI   R1,511		MUST BE 0 TO 511
	JGT  BADXCO
	MOV  @AYCORD,R2		GET Y COORDINATE
	JEQ  BADYCO
	MOV  *R2,R2
	JLT  BADYCO
	CI   R2,1023		MUST BE 0 TO 1023
	JGT  BADYCO
*
	MOV  @AFORE,R5		GET FOREGROUND COLOR
	JEQ  BADCOL
	MOV  *R5,R5
	JLT  BADCOL
	CI   R5,255		MUST BE 0 TO 255
	JGT  BADCOL
*
	LI   R4,VDPOR1		FOR STORES THAT FOLLOW, VDP PORT 1
	LIMI 0			LOCK INTERRUPTS IN EXECUTION
*
	LI   R3,>80+36*256	36 - INITIAL REGISTER NUMBER
	SWPB R1			SET X COORDINATE
	MOVB R1,*R4		  DATA
	SWPB R1
	MOVB R3,*R4		  + REGISTER
	AI   R3,>0100		NEXT REGISTER
*
	MOVB R1,*R4		RG #37
	SWPB R2
	MOVB R3,*R4
	AI   R3,>0100		NEXT REGISTER
*
	MOVB R2,*R4		RG #38 STUFF Y COORDINATE
	SWPB R2
	MOVB R3,*R4
	AI   R3,>0100		NEXT REGISTER
*
	MOVB R2,*R4		RG #39
	SWPB R2			(JUST TO WASTE TIME)
	MOVB R3,*R4
*
	SWPB R5
	LI   R3,>80+44*256	START WITH REGISTER 44
	MOVB R5,*R4
	SWPB R5			WASTE TIME
	MOVB R3,*R4
	AI   R3,>0100		NEXT REGISTER
*
	CLR  R0			SET MEMORY SELECT (VDP, NOT EXPANSION)
	MOVB R0,*R4		 IN REGISTER 45
	SWPB R0			TO WASTE TIME
	MOVB R3,*R4
	AI   R3,>0100		NEXT REGISTER
*
	LI   R0,>5000		COMMAND - SET POINT IN REGISTER 46
	MOVB R0,*R4
	SWPB R0			WASTE TIME
	MOVB R3,*R4		DO IT	
*
*  NOW, CHECK THE STATUS REGISTER TO MAKE SURE THE COMMAND HAS FINISHED
*  EXECUTION BEFORE STARTING ANOTHER.
*
	JMP  GETRET
*
GETPIX	EQU  $
	DATA -4			4 ARGUMENTS
	DATA TEMPS
	MOV  @AXCORD,R1		GET X COORDINATE
	JEQ  BADXCO
	MOV  *R1,R1
	JLT  BADXCO
	CI   R1,511
	JGT  BADXCO
	MOV  @AYCORD,R2		GET Y COORDINATE
	JEQ  BADYCO
	MOV  *R2,R2
	JLT  BADYCO
	CI   R2,1023
	JGT  BADYCO
	LI   R0,GETPIC		GET PIXEL COLOR
	XOP  @DVIDXP,0		DO IT
	MOV  R0,R1		GET FOREGROUND COLOR
	SRA  R1,8
	ANDI R1,>FF
	MOV  @AFORE,R5
	MOV  R1,*R5
	ANDI R0,>FF
	MOV  @ABACK,R5		GET BACKGROUND COLOR
	JEQ  GETRET
	MOV  R0,*R5
	JMP  GETRET
*
BADXCO	EQU  $
	MOV  R1,R5		FOR DISPLAY
	BLWP *R10
	DATA ERROR
	DATA 'XC'		0 TO 511
	JMP  GETRET
*
BADYCO	EQU  $
	MOV  R2,R5		FOR DISPLAY
	BLWP *R10
	DATA ERROR
	DATA 'YC'		0 TO 1023
	JMP  GETRET
*
BADCOL	EQU  $			BAD COLOR
	BLWP *R10
	DATA ERROR
	DATA 'Cl'
*
GETRET	EQU  $
	LIMI 2			MAKE SURE INTERRUPTS ENABLED
	MOV  @TEMPS,R3		RESTORE BASE
	B    *R11		AND RETURN
*
DVIDXP	DATA VIDXOP		VIDEO XOP NUMBER
*
TEMPS	BSS  4
AXCORD	BSS  2			X COORDINATE
AYCORD	BSS  2			Y COORDINATE
AFORE	BSS  2			FOREGROUND COLOR
ABACK	BSS  2			BACKGROUND COLOR
	END
