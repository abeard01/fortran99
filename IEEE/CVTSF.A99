	TITL  'ASCII STRING TO IEEE FLOATING POINT CONVERSION'
	IDT   'CVTS'
*
*   CVTSF :  CONVERT STRING TO FLOATING POINT NUMBER
*
*   CALLING SEQUENCE:
*
*	CALL CVTS ( STRING, VALUE )
*
*   ON RETURN:
*
*       R0 AND R1 CONTAIN THE 32-BIT IEEE FLOATING POINT NUMBER
*
	DEF  CVTS
*
CVTS	EQU  $			CONVERT STRING TO BINARY
	DATA -1			1 ARGUMENT
	DATA TEMPS
	MOV  @AARG1,R6		GET ARGUMENT
	BLWP @CVTSW
	MOV  @AARG2,R6
	MOV  R0,*R6+
	MOV  R1,*R6+
	MOV  @TEMPS,R3
	B    *R11
*
TEMPS	BSS  4
AARG1	BSS  2
AARG2	BSS  2
*
CVTSW	EQU  $
	DATA WORKSP
	DATA CVTSE
*
CVTSE	EQU  $
	MOV  @12(R13),R6	GET USER R6
	CLR  @SIGNFL		CLEAR SIGN FLAG
	CLR  R0			CLEAR INTEGER PART
	CLR  R1
	CLR  R4			CLEAR FRACTIONAL PART
	CLR  R5
	CLR  R8			CHARACTER HOLDER
	MOVB *R6+,R8		GET 1ST CHARACTER
	BL   @SIGNTS		TEST FOR SIGN
*
	BL   @GETDEC		GET DECIMAL PART
	JNE  BERR		BRIF ERROR PARSING
	MOV  R0,R0		SEE IF INTEGER VALUE NEGATIVE
	JLT  BERR		BRIF YES, ERROR
	CI   R7,7		ERROR IF INTEGER TOO LARGE
	JGT  BERR
	MOVB *R6+,R8		GET NEXT CHARACTER
	CB   R8,@DECPT		IS IT A DECIMAL POINT?
	JEQ  GTFRAC		BRIF YES, DO FRACTIONAL
*
	DEC  R6			NO, STEP BACK PARSED ADDRESS
	JMP  NORM		GO NORMALIZE
BERR	B    @ERR
*
*  PROCESS THE FRACTIONAL PART OF THE STRING
*
GTFRAC	EQU  $
	MOV  R0,@SAVEI1		SAVE INTEGER PORTION
	MOV  R1,@SAVEI2
	BL   @GETDEC		GET FRACTIONAL PORTION
	JNE  BERR		BRIF ERROR
	MOV  R0,R4		SET UP FRACTION PART
	MOV  R1,R5
	MOV  @SAVEI1,R0		RESTORE INTEGER PART
	MOV  @SAVEI2,R1
	MOV  R5,R5
	JNE  TSTFRA		FRACTION PART = 0?
	MOV  R4,R4
	JEQ  NORM		BRIF YES, GO NORMALIZE
TSTFRA	EQU  $
	CI   R7,7		FRACTION PART TOO LARGE?
	JGT  BERR
*
*  NOW CONVERT FRACTION PART FROM "INTEGER" TO TRUE BINARY
*
	SLA  R7,1		DIGIT COUNT
	MOV  @PRESHI(R7),R8	GET SHIFT AMOUNT
SHIFTA	EQU  $
	SLA  R4,1		DOUBLE SHIFT R4,R5 LEFT ONE
	SLA  R5,1
	JNC  SHIFT2
	INC  R4
SHIFT2	EQU  $
	DEC  R8
	JNE  SHIFTA
*
*  MULTIPLY THE NORMALIZED FRACTION "INTEGER" BY 0.1**N, WHERE N IS
*  THE NUMBER OF DIGITS IN FRACTION.  SAME AS DIVIDING 10**N, (E.G. 25/100
*  GIVES FRACTION 0.25)
*
*		MULTIPLIER   IN R0,R1
*		MULIIPLICAND IN R4,R5
*		RESULT       IN R4,R5,R6,R7 (64-BIT RESULT)
*               TEMP1        IN R2,R3
*               TEMP2        IN R10,R11
*
	SLA  R7,1
	AI   R7,TENTHS
	MOV  *R7+,R0		GET TENTHS MULTIPLIER
	MOV  *R7,R1
*
	CLR  R6			CLEAR MOST SIGNIFICANT OF RESULT
	CLR  R7
	MOV  R5,R8		DO MULTIPLY
	MPY  R1,R8		3RD, 4TH = LS1 * LS2
*
	MOV  R5,R10		2ND, 3RD = MS1 * LS2
	MPY  R0,R10
*
	MOV  R9,R3		SHIFT 64 BIT RESULT RIGHT 16
	MOV  R8,R9		 (SAVE SHIFTED OUT AMOUNT IN R3)
	MOV  R7,R8
	MOV  R6,R7
	CLR  R6			ZERO TOP END
*
	A    R11,R9		ADD TO RESULT
	JNC  MULT01
	INC  R8
	JNC  MULT01
	INC  R7
	JNC  MULT01
	INC  R6
MULT01	EQU  $
	A    R10,R8
	JNC  MULT02
	INC  R7
	JNC  MULT02
	INC  R6
MULT02	EQU  $
	MOV  R1,R10		2ND, 3RD = LS1 * MS2
	MPY  R5,R10
*				ADD TO RESULT
	A    R11,R9
	JNC  MULT03
	INC  R8
	JNC  MULT03
	INC  R7
	JNC  MULT03
	INC  R6
MULT03	EQU  $
	A    R10,R8
	JNC  MULT04
	INC  R7
	JNC  MULT04
	INC  R6
MULT04	EQU  $
	MOV  R7,R6		SHIFT 64 BIT RESULT 16 BITS LEFT
	MOV  R8,R7
	MOV  R9,R8
	MOV  R3,R9
*
	MPY  R0,R4		1ST, 2ND = MS1 * MS2
	A    R5,R7		ADD TO RESULT
	JNC  MULT05
	INC  R6
MULT05	EQU  $
	A    R4,R6
*
*  NOW NEED ONE SHIFT LEFT TO GET FINAL TRUE BINARY FRACTION
*
	SLA  R6,1		SHIFT LEFT ONCE
	SLA  R7,1
	JNC  MULT06
	INC  R6
MULT06	EQU  $
	SLA  R8,1
	JNC  MULT07
	INC  R7
MULT07	EQU  $
	SLA  R9,1
	JNC  MULT08
	INC  R8
MULT08	EQU  $
	MOV  R6,R4
	MOV  R7,R5		MOVE TRUE BINARY FRACTION TO R4,R5
*
*  NOW NORMALIZE R4/R5 (FRACTION) AND R0/R1 (INTEGER) IN IEEE FORMAT
*
NORM	EQU  $
	MOV  @SAVEI2,R1		RESTORE INTEGER
	MOV  @SAVEI1,R0
	JNE  NOTZER
	MOV  R1,R1
	JNE  NOTZER
	MOV  R4,R4
	JNE  NOTZER
	MOV  R5,R5
	JEQ  ZERO
NOTZER	EQU  $
	CLR  R2			SETUP RESULT
	LI   R3,127+23		INITIAL EXPONENT
	MOV  R0,R8		SEE IF SHIFT REQUIRED
	ANDI R8,>FF00
	JEQ  LEFTSH		YES, BRANCH
*
RGHTSH	EQU  $			SHIFT RIGHT
	SRA  R1,1		RIGHT ONCE
	SRA  R0,1
	JNC  RIGHS1
	ORI  R1,>8000		ADD MISSING BIT
RIGHS1	EQU  $
	INC  R3			TALLY EXPONENT
	MOV  R0,R8		NORMALIZED YET?  (NOTE:
	ANDI R8,>FF00		THAT IS WHEN BIT $17 = 1)
	JEQ  DONESH		YES, GO TO SHIFTING DONE
	JMP  RGHTSH		NO, SHIFT LEFT
*
LEFTSH	EQU  $			NORMALIZED YET?
	MOV  R0,R8		(WHEN $17 = 1)
	ANDI R8,>0002
	JNE  DONESH		BRIF YES!
*
	SLA  R0,1		SHIFT R0,R1,R4,R5 LEFT 1
	SLA  R1,1
	JNC  LEFTS1
	INC  R0
LEFTS1	EQU  $
	SLA  R4,1
	JNC  LEFTS2
	INC  R1
LEFTS2	EQU  $
	SLA  R5,1
	JNC  LEFTS3
	INC  R4
LEFTS3	EQU  $
*
	DEC  R3			DECR EXPONENT COUNT
	JMP  LEFTSH
*
DONESH	EQU  $
	SLA  R4,1		ROUND OFF
	JNC  DONES1
	INC  R1
	JNC  DONES1
	INC  R0
DONES1	EQU  $
	SLA  R5,1
	JNC  DONES2
	INC  R4
DONES2	EQU  $
	MOV  R0,R8		TEST BIT $18
	ANDI R8,>0004		STILL NORMALIZED?
	JEQ  ROUNDO		BRIF YES, OK
	MOV  R0,R8
	ANDI R8,1
	SRC  R8,1		DOUBLE SHIFT R0,R1 RIGHT ONE
	SRL  R0,1
	SRL  R1,1
	SOC  R8,R1
	INC  R3			TALLY EXPONENT
*
ROUNDO	EQU  $
	MOV  @SIGNFL,R8		NEGATIVE NUMBER?
	JEQ  CLREXP		NO, CLEAR EXPONENT
	ORI  R0,>8000		ELSE, MAKE SURE ITS SET
*
*  NOW INSERT EXPONENT
*
CLREXP	EQU  $
	ANDI R0,>807F
	SLA  R3,7		EXPONENT 127 MEANS 1.F
	SOC  R3,R0		IS VALUE WITH NO SHIFT
*
ZERO	EQU  $
	CLR  R6
	JMP  RTS
*
ERR	EQU  $
	LI   R6,1
*
RTS	EQU  $
	MOV  R0,*R13		SET USER REGISTERS R0, R1
	MOV  R1,@2(R13)
	MOV  R6,R6
	STST R15
	RTWP
*
*  SIGNTS:  TEST FOR SIGN CHARACTER
*
*  ON ENTRY:
*
*	R6  -  TEXT STRING ADDRESS
*	R0  -  FIRST CHARACTER (IN HIGH BYTE)
*	
*  ON EXIT:
*
*	SIGNFL  -  SIGN FLAG UPDATED
*
SIGNTS	EQU  $
	LI   R7,SIGNCH		CHECK FOR SIGN CHARACTER
	CB   R8,*R7+		IS CHARACTER A MINUS?
	JEQ  NEG		BRIF YES
	CB   R8,*R7+		IS CHARACTER A PLUS?
	JEQ  POS
	CB   R8,*R7+		IS CHARACTER A SPACE?
	JEQ  IGNORE		BRIF YES
	DEC  R6			STEP BACK TO PREVIOUS CHAR, UNRECOGNIZED
	B    *R11		RETURN
NEG	EQU  $
	SETO @SIGNFL		SET FLAG SAYING NEGATIVE
POS	EQU  $
	B    *R11
IGNORE	EQU  $
	MOVB *R6+,R8		GET NEXT CHARACTER
	JMP  SIGNTS
*
*  GETDEC :  CONVERT ASCII DECIMAL STRING INTO A LONG WORD BINARY NUMBER
*
*  ON ENTRY:
*
*	R6  :  POINTS TO ASCII STRING BEING PARSED
*	R8  :  IS A TEMP CELL USED TO HOLD AN ASCII CHARACTER
*
*  ON EXIT:
*
*	R4,R5  : CONTAIN THE RESULT
*	R7     : CONTAINS THE DIGIT COUNT
*
GETDEC	EQU  $
	MOV  R11,R12		SAVE RETURN
	CLR  R0			CLEAR RESULT
	CLR  R1
	CLR  R7			CLEAR DIGIT COUNT
REPT	EQU  $
	CLR  R8			MAKE SURE LOW NIBBLE CLEAR
	MOVB *R6+,R8		GET NEXT DIGIT
	SB   @KZERO,R8		SUBTRACT OUT AN ASCII ZERO
	JLT  NOTDEC		BRIF NOT A NUMBER
	CI   R8,>0A00		IS NUMBER LESS THAN 9?
	JLT  DECDI		BRIF YES, ITS A DECIMAL DIGIT
NOTDEC	EQU  $
	DEC  R6			STEP BACK TEST STRING ADDRESS
	CLR  R8			SET GOOD STATUS
	MOV  R8,R8
	B    *R12		RETURN
*
DECDI	EQU  $			IT'S A DECIMAL DIGIT
	MOV  R0,R2		SAVE ORIGINAL
	MOV  R1,R3
	BL   @SHIFTT		SHIFT LEFT ONCE  (*2)
	BL   @SHIFTT		SHIFT LEFT TWICE (*4)
	A    R3,R1		DOUBLE ADD ORIGINAL (*5)
	JNC  DECDI1
	A    R2,R0
DECDI1	EQU  $
	BL   @SHIFTT		ONE LAST SHIFT (*10)
	SWPB R8			ADD IN REMAINING DIGIT
	A    R8,R1		INTO LOW 32-BIT NUMBER
	JNC  DECDI2
	INC  R0
DECDI2	EQU  $
	INC  R7			COUNT THE DIGIT
	JMP  REPT
*
BAD	EQU  $
	MOV  R3,R1		RESTORE ORIGINAL
	MOV  R2,R0
	LI   R8,1		SET BAD STATUS
	B    *R12
*
*  SHIFTT - SHIFT THE DOUBLE WORD IN R0, R1 LEFT BY ONE
*
SHIFTT	EQU  $
	SLA  R0,1
	SLA  R1,1
	JNC  SHIFTR
	INC  R0
SHIFTR	EQU  $
	B    *R11
*
*  CHARACTER COMPARISONS USED FOR CONVERSION
*
SIGNCH	EQU  $
	TEXT '-+ '
DECPT	EQU  $
	TEXT '.'
KZERO	EQU  $
	TEXT '0'
	EVEN
K10	DATA 10
*
PRESHI	EQU  $
	DATA 0			UNUSED
	DATA 28			1 DIGIT
	DATA 25			2 DIGITS
	DATA 22			3 DIGITS
	DATA 18			4 DIGITS
	DATA 15			5 DIGITS
	DATA 12			6 DIGITS
	DATA 8			7 DIGITS
*
TENTHS	EQU  $
	DATA 0,0
	DATA >CCCC,>CC00
	DATA >A3D7,>0A00
	DATA >8312,>6E00
	DATA >D1B7,>1700
	DATA >A7C5,>AC00
	DATA >8637,>BC00
	DATA >D6BF,>9400
*
SIGNFL	BSS  2			SIGN FLAG (-1 FOR NEGATIVE)
SAVEI1	BSS  2			INTEGER PORTION SAVE 1
SAVEI2	BSS  2			INTEGER PORTION SAVE 2
WORKSP	BSS  32
*
ENTRYE	EQU  $
	END
