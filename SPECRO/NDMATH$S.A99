	TITL	'DOUBLE PRECISION MATH'
	IDT     'DMATH$'
*
*  FLOATING POINT ADDITION, SUBTRACTION, MULTIPLICATION, DIVISION,
*  FOR SINGLE AND DOUBLE PRECISION.
*
*  ON ENTRY, THE FLOATING POINT ACCUMULATOR IN R5,R6,R7 AND R8
*  CONTAIN ONE ARGUMENT.   R2 POINTS TO A SECOND ARGUMENT.  THE
*  RESULT IS LEFT IN R5,R6,R7 AND R8.
*
*  HISTORY:
*
*    4.0        29-AUG-88     Initial Writing
*    4.1        09-SEP-88     Revised Compare
*    4.2        24-SEP-88     Flipped subtract, to work right
*    4.4        22-MAY-89     Fixed d.p. compare
*    4.41       19-Jul-89     Changed FORTPAR Reference.
*    4.42       28-AUG-89     ADDED TI-99 VERSIONS
*    4.43       29-OCT-89     Fixed sense of subtract/divide in GPL mode
*    4.44       29-OCT-89     Rewritten so both GPL & MDOS use common routines
*
*  COPYRIGHT 1989 BY LGMA PRODUCTS
*
	DEF  DADD$		DOUBLE PRECISION ADD
	DEF  DSUB$		DOUBLE PRECISION SUBTRACT
	DEF  DMUL$		DOUBLE PRECISION MULTIPLY
	DEF  DDIV$		DOUBLE PRECISION DIVIDE
	DEF  DCMP$		DOUBLE PRECISION COMPARE
*
	COPY "FORTPAR:"
*
	UNL
	IF   GENEVE
	COPY "EQUATES:MATH.EQ9"
	ENDIF
	COPY "EQUATES:FORTEX.EQ9"
	LIST
*
*  DOUBLE PRECISION COMPARE
*
DCMP$	EQU  $
	C    R5,*R2+		; CHECK FIRST VALUE
	JNE  DCMPR
	MOV  R5,R5		; CHECK FIRST WORD OF COMPARE
	JEQ  DCMP2		; ZERO, DONE
	JGT  DCMP1
	C    *R2+,R6		; ELSE, MUST REVERSE COMPARE
	JNE  DCMPR		; SINCE FIRST WORD NEGATIVE
	C    *R2+,R7
	JNE  DCMPR
	C    *R2,R8
	JMP  DCMPR
DCMP1	EQU  $			; FIRST WORD EQUAL, CONTINUE COMPARE
	C    R6,*R2+
	JNE  DCMPR
	C    R7,*R2+
	JNE  DCMPR
	C    R8,*R2
	B    *R11
DCMP2	EQU  $			; RESET EQUAL STATUS ON FIRST COMPARE
	DECT R2			; SINCE BOTH VALUES ARE ZERO
	C    R5,*R2
DCMPR	EQU  $
	B    *R11
*
DSUB$	EQU  $
	NEG  R5			; NEGATE FAC
*
DADD$	EQU  $
	MOV  R3,@SAVER3		; SAVE CURRENT R3 BASE
	MOV  *R4+,R0		; GET ARGUMENT
	MOV  *R4+,R1
	MOV  *R4+,R2
	MOV  *R4+,R3
	MOV  R0,@SIGNFL		; IF ARGUMENT IS ZERO,
	JEQ  MATDON		;  THEN DONE
	MOV  R5,R5		; IF FAC IS ZERO,
	JNE  DADD$1 
	MOV  *R2+,R5		; MOVE ARG TO FAC
	MOV  *R2+,R6
	MOV  *R2+,R7
	MOV  *R2,R8
	JMP  MATDON		; DONE
*
DADD$1	EQU  $
	XOR  R5,@SIGNFL		; SET SIGN FLAG
	ABS  R5			; MAKE FAC POSITIVE
	ABS  R0			; MAKE ARG POSITIVE
	C    R5,R0		; COMPARE FAC & ARG
	JGT  DADD$3		; OK
	JLT  DADD$2		; LESS, EXCHANGE
	C    R6,R1
	JGT  DADD$3
	JLT  DADD$2
	C    R7,R2
	JGT  DADD$3
	JLT  DADD$2
	C    R8,R3
	JEQ  DADD$3
	JGT  DADD$3
*
*  EXCHANGE FAC & ARG
*
DADD$2	EQU  $
	MOV  R0,R9
	MOV  R5,R0
	MOV  R9,R5
*
	MOV  R1,R9
	MOV  R6,R1
	MOV  R9,R6
*
	MOV  R2,R9
	MOV  R7,R2
	MOV  R9,R7
*
	MOV  R3,R9
	MOV  R8,R3
	MOV  R9,R8
*
DADD$3	EQU  $
	CLR  R4			; CLEAR THE END WORDS
	CLR  R9
	CLR  R10
	CLR  R11
	MOV  R5,R11		; GET EXPONENT
	ANDI R11,>FF00
	SWPB R11
	MOV  R11,@EXPONA	; SAVE IT
	SWPB R11
*
	ANDI R5,>00FF		; MASK OFF EXPONENT
	SB   R0,R11
	SWPB R11
	CI   R11,7		; DIGIT NUMBER
	JGT			; BIGGER, THEN END
*
	MOV  R11,R12

SIGNFL	DATA 0			; SIGN FLAG
SAVER3	DATA 0			; SAVE OF BASE REGISTER
EXPONA	DATA 0			; EXPONENT SAVE

	XOR  R4,R9		; SAVE SAME SIGN FLAG
	ABS  R0

	LI   R1,>FFF8
	MOV
DADD$	EQU  $
	LI   R0,FADD
	JMP  DOUCOM
*
DSUB$	EQU  $
	LI   R0,FSUB
	JMP  DOUCOM
*
DMUL$	EQU  $
	LI   R0,FMULT
	JMP  DOUCOM
*
DDIV$	EQU  $
	LI   R0,FDIV
*
*  DOUBLE PRECISION COMMON LOAD FAC & ARG
*
DOUCOM	EQU  $
	LI   R1,ARG
	MOV  R5,*R1+		; SET ARG
	MOV  R6,*R1+
	MOV  R7,*R1+
	MOV  R8,*R1+
	LI   R1,FAC
	MOV  *R2+,*R1+		; SET FAC
	MOV  *R2+,*R1+
	MOV  *R2+,*R1+
	MOV  *R2+,*R1+
*
*  SINGLE/DOUBLE PRECISION COMMON MATH
*
	IF   GENEVE
	MOV  R3,R12		; SAVE MY BASE
	LI   R1,RESULT
	LI   R2,ARG
	LI   R3,FAC
	XOP  @DMATXP,0		; DO IT
	MOV  R12,R3		; RESTORE BASE
	LI   R2,RESULT		; SET RESULT
	MOV  *R2+,R5
	MOV  *R2+,R6
	MOV  *R2+,R7
	MOV  *R2,R8
	MOV  R5,R5		; SET STATUS
	B    *R11		; RETURN
	ELSE
*
*  TI-99 VERSION OF RADIX 100, CALL THE CONSOLE F.P. ROUTINES
*
MATCO1	EQU  $
	MOV  R0,@XMLFUN		; SET CONSOLE LINKAGE FUNCTION CODE
	BLWP @CXMLLN
XMLFUN	DATA 0			; FUNCTION CODE (DYNAMIC)
	LI   R2,FAC
	MOV  *R2+,R5
	MOV  *R2+,R6
	MOV  *R2+,R7
	MOV  *R2,R8
	MOV  R5,R5		; SET STATUS FOR FAC
	B    *R11
	ENDIF
*
	IF   GENEVE
DMATXP	DATA MATXOP		; MATH XOP LIBRARY NUMBER
FAC	DATA 0,0,0,0		; MY FAC
ARG	DATA 0,0,0,0		; MY ARG
RESULT	DATA 0,0,0,0		; MY RESULT
	ENDIF
	END
