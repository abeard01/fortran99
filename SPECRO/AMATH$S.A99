	TITL	'SINGLE PRECISION MATH'
	IDT     'AMATH$'
*
*  FLOATING POINT ADDITION, SUBTRACTION, MULTIPLICATION, DIVISION,
*  FOR SINGLE AND DOUBLE PRECISION.
*
*  ON ENTRY, THE FLOATING POINT ACCUMULATOR IN R5,R6,R7 AND R8
*  CONTAIN ONE ARGUMENT.   R2 POINTS TO A SECOND ARGUMENT.  THE
*  RESULT IS LEFT IN R5,R6,R7 AND R8.
*
*  HISTORY:
*
*    4.0        29-AUG-88     Initial Writing
*    4.1        09-SEP-88     Revised Compare
*    4.2        24-SEP-88     Flipped subtract, to work right
*    4.4        22-MAY-89     Fixed d.p. compare
*    4.41       19-Jul-89     Changed FORTPAR Reference.
*    4.42       28-AUG-89     ADDED TI-99 VERSIONS
*    4.43       29-OCT-89     CHANGED ORDER OF ARGUMENTS FOR GPL VERSION
*    4.44       12-NOV-89     FIX MDOS VERSION SUBTRACT/DIVIDE, BROKEN BY 4.43
*
*  COPYRIGHT 1989 BY LGMA PRODUCTS
*
	DEF  AADD$
	DEF  ASUB$
	DEF  AMUL$
	DEF  ADIV$
	DEF  ACMP$
*
	COPY "FORTPAR:"
*
	UNL
	IF   GENEVE
	COPY "EQUATES:MATH.EQ9"
	ENDIF
	COPY "EQUATES:FORTEX.EQ9"
	LIST
*
*  SINGLE PRECISION COMPARE
*
ACMP$	EQU  $
	C    R5,*R2+		; CHECK FIRST VALUE
	JNE  ACMPR
	MOV  R5,R5		; CHECK FIRST WORD OF COMPARE
	JEQ  ACMP2
	JGT  ACMP1		; IF >0, THEN DO NORMAL COMPARE
	C    *R2,R6		; ELSE, MUST REVERSE COMPARE
	B    *R11
ACMP1	EQU  $
	C    R6,*R2		; CHECK SECOND VALUE
	B    *R11
ACMP2	EQU  $
	DECT R2
	C    R5,*R2		; RESET EQUAL STATUS
ACMPR	EQU  $
	B    *R11
*
AADD$	EQU  $
	LI   R0,FADD		; SET ADD
	JMP  SINCOM
*
ASUB$	EQU  $
	LI   R0,FSUB
	JMP  SINCOM
*
AMUL$	EQU  $
	LI   R0,FMULT
	JMP  SINCOM
*
ADIV$	EQU  $
	LI   R0,FDIV
*
*  SINGLE PRECISION COMMON LOAD.  SET FAC & ARG
*
SINCOM	EQU  $
	LI   R1,ARG
	MOV  R5,*R1+		; SET ARG
	MOV  R6,*R1+
	CLR  *R1+
	CLR  *R1+
	LI   R1,FAC
	MOV  *R2+,*R1+		; SET FAC
	MOV  *R2+,*R1+
	CLR  *R1+
	CLR  *R1+
*
*  SINGLE/DOUBLE PRECISION COMMON MATH
*
	IF   GENEVE
	MOV  R3,R12		; SAVE MY BASE
	LI   R1,RESULT
	LI   R2,FAC
	LI   R3,ARG
	XOP  @DMATXP,0		; DO IT
	MOV  R12,R3		; RESTORE BASE
	LI   R2,RESULT		; SET RESULT
	MOV  *R2+,R5
	MOV  *R2+,R6
	MOV  *R2+,R7
	MOV  *R2,R8
	MOV  R5,R5		; SET STATUS
	B    *R11		; RETURN
	ELSE
*
*  TI-99 VERSION OF RADIX 100, CALL THE CONSOLE F.P. ROUTINES
*
	MOV  R0,@XMLFUN		; SET CONSOLE LINKAGE FUNCTION CODE
	BLWP @CXMLLN
XMLFUN	DATA 0			; FUNCTION CODE (DYNAMIC)
	LI   R2,FAC
	MOV  *R2+,R5
	MOV  *R2+,R6
	MOV  *R2+,R7
	MOV  *R2,R8
	MOV  R5,R5		; SET STATUS FOR FAC
	B    *R11
	ENDIF
*
	IF   GENEVE
DMATXP	DATA MATXOP		; MATH XOP LIBRARY NUMBER
FAC	BSS  8
ARG	BSS  8
RESULT	BSS  8
	ENDIF
	END
