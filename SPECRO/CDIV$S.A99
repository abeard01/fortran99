	TITL	'COMPLEX *8 PRECISION MATH DIVIDE'
	IDT     'CDIV$'
*
*  COMPLEX *8 DIVISION
*
*  ON ENTRY, THE FLOATING POINT ACCUMULATOR IN R5,R6,R7 AND R8
*  CONTAIN ONE ARGUMENT.   R2 POINTS TO A SECOND ARGUMENT.  THE
*  RESULT IS LEFT IN R5,R6,R7 AND R8.
*
*  DIVISION IS PERFORMED ACCORDING TO THE RULE:
*
*     (c + id) / (a + ib) = ( (ac + bd) / (c**2 + d**2) ) +
*			   i( (bc - ad) / (c**2 + d**2) )
*  UPDATE HISTORY:
*
*    4.4        28-AUG-89     INITIAL VERSION
*    4.41       16-SEP-89     CORRECTIONS
*    4.42       15-NOV-89     MORE CORRECTIONS FROM ELMER C.
*
*  COPYRIGHT 1989 BY LGMA PRODUCTS
*
	DEF  CDIV$
*
	COPY "FORTPAR:"
*
	UNL
	IF   GENEVE
	COPY "EQUATES:MATH.EQ9"
	ENDIF
	COPY "EQUATES:FORTEX.EQ9"
	LIST

*
CDIV$	EQU  $
	LI   R0,A		; LOAD CONSTANTS
	MOV  R5,*R0+		; SAVE A
	MOV  R6,*R0+
	MOV  R7,*R0+		; SAVE B
	MOV  R8,*R0+
	MOV  *R2+,*R0+		; SAVE C
	MOV  *R2+,*R0+
	MOV  *R2+,*R0+		; SAVE D
	MOV  *R2,*R0
	MOV  R11,R12		; SAVE RETURN VECTOR
*
	BL   @MULIT		; COMPUTE PRODUCT AC
	DATA A
	DATA C
	DATA AC
*
	BL   @MULIT		; COMPUTE PRODUCT BD
	DATA B
	DATA D
	DATA BD
*
	BL   @MULIT		; COMPUTE PRODUCT BC
	DATA B
	DATA C
	DATA BC
*
	BL   @MULIT		; COMPUTE PRODUCT AC
	DATA A
	DATA D
	DATA AD
*
	BL   @MULIT		; DETERMINE C**2
	DATA C
	DATA C
	DATA C2
*
	BL   @MULIT		; DETERMINE D**2
	DATA D
	DATA D
	DATA D2
*
	BL   @ADDIT		; NOW ADD C**2 + D**2
	DATA C2
	DATA D2
	DATA C2D2
*
	BL   @ADDIT		; NOW ADD AC + BD
	DATA AC
	DATA BD
	DATA TEMP1
*
	BL   @DIVIT		; DIVIDE:  ( AC + BD ) / (C**2 + D**2)
	DATA TEMP1
	DATA C2D2
	DATA TEMP2
*
	LI   R0,TEMP2		; STORE REAL PORTION
	MOV  *R0+,R5
	MOV  *R0+,R6
*
	BL   @SUBIT		; COMPUTE ( BC - AD )
	DATA BC
	DATA AD
	DATA TEMP1
*
	BL   @DIVIT		; COMPUTE ( BC - AD ) / (C**2 + D**2)
	DATA TEMP1
	DATA C2D2
	DATA TEMP2
*
	LI   R0,TEMP2		; SAVE IMAGINARY PORTION
	MOV  *R0+,R7
	MOV  *R0+,R8
*
	MOV  R5,R5		; SET STATUS FOR RETURN
	JNE  SETST1
	MOV  R7,R7
SETST1	EQU  $
	B    *R12		; RETURN
*
*  ADDIT  : PERFORM A FP ADDITION
*  SUBIT  : PERFORM A FP SUBTRACTION
*  MULIT  : PERFORM A FP MULTIPLY
*  DIVIT  : PERFORM A FP DIVISION
*
DIVIT	EQU  $
	LI   R0,FDIV		; PERFORM DIVISION
	JMP  MULCOM
*
SUBIT	EQU  $
	LI   R0,FSUB		; PERFORM SUBTRACTION
	JMP  MULCOM
*
ADDIT	EQU  $
	LI   R0,FADD		; PERFORM ADDITION
	JMP  MULCOM
*
MULIT	EQU  $
	LI   R0,FMULT		; PERFORM MULTIPLICATION
MULCOM	EQU  $
	MOV  *R11+,R4		; FIRST ARGUMENT
	LI   R1,ARG
	MOV  *R4+,*R1+
	MOV  *R4+,*R1+
	CLR  *R1+
	CLR  *R1+
*
	MOV  *R11+,R4		; SECOND ARGUMENT
	LI   R1,FAC
	MOV  *R4+,*R1+
	MOV  *R4+,*R1+
	CLR  *R1+
	CLR  *R1+
*
	IF   GENEVE
	MOV  R3,R9
	LI   R1,RESULT
	LI   R2,FAC
	LI   R3,ARG
	XOP  @DMATXP,0		; DO MATH XOP
	MOV  R9,R3
	LI   R0,RESULT
	ELSE
	MOV  R0,@XMLFUN
	BLWP @CXMLLN		; CALL CONSOLE ROUTINE
XMLFUN	DATA 0
	LI   R0,FAC
	ENDIF
	MOV  *R11+,R1		; GET ADDRESS TO STORE
	MOV  *R0+,*R1+
	MOV  *R0+,*R1+
	MOV  *R0+,*R1+
	MOV  *R0,*R1
	B    *R11
*
	IF   GENEVE
FAC	BSS  8
ARG	BSS  8
RESULT	BSS  8
DMATXP	DATA MATXOP
	ENDIF
*
*  CALLED ARGUMENTS (IMAGINARY NUMBERS):
*
A	BSS  4
B	BSS  4
C	BSS  4
D	BSS  4
*
*  PARTIAL SOLUTION PRODUCTS:
*
AC	BSS  8
BD	BSS  8
BC	BSS  8
AD	BSS  8
TEMP1	BSS  8
TEMP2	BSS  8
C2	BSS  8
D2	BSS  8
C2D2	BSS  8
*
	END
