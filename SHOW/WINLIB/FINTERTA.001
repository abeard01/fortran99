        TITL   'FORTRAN INTERTASK COMMUNICATION SUPPORT ROUTINES'
        IDT    'INTER'
**
** INTERTASK : Supports the following intertask functions:
**
**
** function loadtask ( filename, length_command, command_line )
**   returns the page zero of the task loaded, or zero if the task
**   could not be loaded.   The task is put to sleep by this routine.
**
** call  awaken   ( pagezero )
**   wakes the child task
**
** call  sleep    ( pagezero )
**   puts the child task to sleep
**
** call forbid   ()
**   forbid multi-tasking
**
** call allow    ()
**   allow  multi-tasking
**
** integer function sendme ( pagezero, length, message )
**   send a message in "string" to child task
**     returns "0" if message sent
**     returns "1" if message too large to send (<=0, >240 bytes)
**     returns "2" if no room in user free node list
**     returns "3" if message already queued in child task
**     returns "4" if task does not exist
**
** integer function getmes  ( message )
**   Get a message in "string" from parent task.
**   The task is put to sleep until a message is rec'd.
**   Returns length of message rec'd
**
** integer function identt ( dummy )
**   Returns the page number of the parent task (from >e8 in page0)
**
** call declar ( *name )
**   Declare an up to 6 character name for this task
**
** integer function findta ( *name )
**   Find the task 0 page number for the given task name
**
** A message is formatted in normal MDOS fashion, a length byte followed
** by a string of bytes.   The message resides in the user space until
** the child task recieves it, so the tasks are synchronous, not async.
**
** Change History:
**
** (c) Copyright 1993 by LGMA Products
**
	DEF  LOADTA		; LOAD A TASK
	DEF  AWAKEN		; AWAKEN A TASK
	DEF  SLEEP		; MAKE TASK GO TO SLEEP
*	DEF  FORBID		; FORBID TASK FROM RUNNING
*	DEF  ALLOW		; ALLOW TASK TO RUN
	DEF  SENDME		; SEND MESSAGE TO TASK
	DEF  GETMES		; GET A MESSAGE FROM CALLING TASK
*	DEF  IDENTT		; IDENTIFY THE PARENT TASK
	DEF  DECLAR	 	; DECLARE AN UP TO 6 CHAR NAME FOR THIS TASK
	DEF  FINDTA		; FIND TASK BASED ON 6 CHAR NAME
*	DEF  IDENTP	        ; IDENTIFY MY PAGE ZERO TASK
**
	UNL
	COPY ":TIC/INCLUDES/UTILITY_I"
	LIST
*
*  PAGE ZERO TASK EQUATES AND OTHERS
*
MOSTAT	EQU  >0062		; MOUSE STATE
COTASK	EQU  >00E8		; PARENT TASK PAGE NUMBER
STATE	EQU  >0102		; COMMAND PROCESS STATE
SLICE	EQU  >0103		; SET SLICE OF LIFE
PNAME	EQU  >0104		; NAME OF THIS TASK
PLENGTH EQU  8			; # CHARS IN TASK NAME
MSGPTR  EQU  >00D6		; MESSAGE POINTER (NEW PAGE 0 POINTER)
CMDSTR	EQU  >0128		; COMMAND STRING
FREPTR	EQU  >0122		; FREE NODE POINTER
MMRREG	EQU  >F110		; MEMORY MAP REGISTERS
FIRSTI  EQU  >F080		; FIRST INSTRUCTION IN PAGE 0 OF TASK
INTINT  EQU  >000C		; FORCED INTERRUPT LOCATION
*
*  EQUATES IN OS TASK PAGE 0
*
HEAD#T  EQU  >0028		; Start of task header
TAIL#T	EQU  >002A		; End of task header
*
** PROCESS STATES
*
ACTIVE	EQU  >0000		; ACTIVE TASK PROCESS STATE
SLEEPY	EQU  >FD00		; TASK IS ASLEEP
LOCKMU	EQU  >FE00		; LOCKED MULTITASKING
**
START   EQU  $
**
** IDENTIFYPAGE - IDENTIFY MY PAGE ZERO NUMBER
**
IDENTP
	DATA 0
	DATA BASEAD		; TEMPS AREA
	CLR  R8
	MOVB @MMRREG,R8		; GET MY PAGE ZERO NUMBER
	SWPB R8
	MOV  @BASEAD,R3
	MOV  @RETUAD,R11
	MOV  R8,R5
	B    *R11
*
**
** DECLARETASK - DECLARE A TASK NAME FOR MY TASK (STUFF MY PAGE 0)
**
DECLAR
	DATA -1
	DATA BASEAD
	MOV  @ARG1,R1		; GET POINTER TO TASK NAME
	LI   R2,PNAME		; TASK NAME POINTER
	LI   R3,PLENGTH		; EIGHT BYTES TO MOVE
*
MOVBYT	EQU  $
	MOVB *R1+,R4		; GET A BYTE
	JEQ  DONBYT		; BRIF DONE
	MOVB R4,*R2+		; ELSE, SAVE IN TASK NAME
	DEC  R3
	JNE  MOVBYT		; TRY AGAIN
	JMP  RETDET
DONBYT	EQU  $
	MOVB @KBLANK,*R2+	; FILL WITH BLANKS
	DEC  R3
	JNE  DONBYT
RETDET	EQU  $
	MOV  @BASEAD,R3
	MOV  @RETUAD,R11
	B    *R11
**
** FINDTASK - Find a task name that matches my passed task name
**
FINDTA
	DATA -1
	DATA BASEAD
	MOV  @ARG1,R1		; GET THE TASK NAME STRING
	LI   R2,TEMPBU
	LI   R3,PLENGTH
*
FINDBYT	EQU  $
	MOVB *R1+,R4		; GET A BYTE
	JEQ  DONEFIN		; BRIF ZERO TERM
	MOVB R4,*R2+		; ELSE, SAVE ON STACK
	DEC  R3
	JNE  FINDBYT		; GO DO ANOTHER
	JMP  FINDEXI		; ELSE, EXHAUSTED COUNT, EXIT
*
DONEFIN	EQU  $
	MOVB @KBLANK,*R2+	; MOVE IN A BLANK
	DEC  R3
	JNE  DONEFIN
*
FINDEXI	EQU  $
	CLR  R3
	MOVB R3,*R2+		; NULL TERMINATE (JUST IN CASE)
	INCT R2
	ANDI R2,>FFFE
	MOV  R2,@TASKPT		; SAVE MAP OF TASK POINTERS
	CLR  *R2		; IN CASE NOTHING FOUND (IMPOSSIBLE)
*
	MOVB R3,@PAGZER		; MAP IN OS TASK 0 PAGE
	BL   @DETERM		; DETERINE WHERE I CAN MAP IT
*
	MOV  @HEAD#T(R9),R1	; GET TASK HEADER
	MOV  @HEAD#T(R9),R2	; GET TASK TAIL
	MOV  @TASKPT,R3		; MY LIST OF TASK POINTERS
*
FINDNEX	EQU  $
	MOV  R9,R4		; COMPUTE OFFSET TO TASK POINTER
	A    R1,R4
	MOV  *R4+,R1		; SET POINTER TO NEXT
	MOV  *R4,R5		; GET NEXT TASK POINTER
	ANDI R5,>00FF		; MASK OFF TASK ZERO POINTER
	SWPB R5
	MOVB R5,*R3+		; SAVE IT ON STACK
	C    R1,R2		; AM I AT TASK TAIL?
	JNE  FINDNEX		; BRIF YES, EXIT
	CLR  R5
	MOVB R5,*R3+		; ZAP LAST ENTRY TO TERMINATE LIST
*
*  THE STACK NOW CONTAINS A LIST OF TASK 0 ENTRIES (AT TASKPT)
*
LOOPTAS	EQU  $
	BL   @RESTOR		; RESTORE MY NORMAL MAP
	MOV  @TASKPT,R3		; GET POINTER TO NEXT ENTRY
	INC  @TASKPT
	MOVB *R3,@PAGZER	; FOR DETERMINATION LOOP
	JEQ  NOTFNT		; NOT FOUND, END OF PAGES
	BL   @DETERM		; FIND A PLACE TO MAP IT
*
CHKNAM	EQU  $
	LI   R1,TEMPBU		; TASK IN POINTER
	MOV  R9,R2		; TASK OUT POINTER
	AI   R2,PNAME		; + START OF TASK NAME
	LI   R3,PLENGTH		; # OF CHARS TO EXAMINE
*
CHKNBY	EQU  $
	C    *R1+,*R2+		; IS IT THE SAME?
	JNE  LOOPTAS
	DECT R3
	JNE  CHKNBY		; YES, CHECK NEXT
*
*  THE TASK HAS BEEN FOUND, SAVE THE TASK 0 PAGE NUMBER
*
	MOVB @PAGZER,@TASKPT	; SAVE IT
	JMP  CLEANUP
*
*  THE TASK HAS NOT BEEN FOUND, RETURN >00 FOR THE TASK PAGE #
*
NOTFNT	EQU  $
	CLR  R8
	JMP  CLNDONE
*
CLEANUP	EQU  $			; DESIRED TASK FOUND, RETURN PAGE ZERO #
	BL   @RESTOR		; OF TARGET TASK
	CLR  R8
	MOVB @TASKPT,R8
	SWPB R8
*
CLNDONE EQU  $
	MOV  @BASEAD,R3		; RESTORE R3
	MOV  @RETUAD,R11	; RESTORE R11
	MOV  R8,R5
	B    *R11
**
** IDENTIFYPARENT - IDENTIFY THE PARENT TASK PAGE 0 ADDRESS
**
IDENTT
	DATA -1			; ONE DUMMY ARGUMENT
	DATA BASEAD
	MOV  @BASEAD,R3
	MOV  @RETUAD,R11
	MOV  @COTASK,R5		; GET COTASK ID
	B    *R11
**
** FORBID - FORBID MULTI-TASKING
**
FORBID
	DATA 0
	DATA BASEAD
	LI   R0,LOCKMU		; LOCK MULTI-TASKING
	MOVB R0,@STATE
	MOV  @BASEAD,R3
	MOV  @RETUAD,R11
	B    *R11
**
** ALLOW  - ALLOW MULTI-TASKING
**
ALLOW
	DATA 0
	DATA BASEAD
	LI   R0,ACTIVE
	MOVB R0,@STATE		; ALLOW MULTI-TASKING
	MOV  @BASEAD,R3
	MOV  @RETUAD,R11
	B    *R11
**
** LOADTASK - LOAD A GIVEN TASK, PUT TASK TO SLEEP & PASS COMMAND
**            LINE.
**
LOADTA
	DATA -3			; INCLUDES FILE NAME & COMMAND LINE
	DATA BASEAD
*
	LI   R0,LOCKMU		; LOCK MULTI-TASKING
	MOVB R0,@STATE
*
	LI   R0,PARFIL		; PARSE FILE NAME
	MOV  @ARG1,R1		; MOVE FROM ADDRESS
	LI   R2,TEMPBU		; MOVE TO ADDRESS
	LI   R3,>5000		; 80 BYTE STRING
	MOVB R3,*R2
	CLR  R3	
	XOP  @DUTLXP,0		; CONVERT THE FILE NAME
*
	LI   R0,LOAPRO		; LOAD IN THE PROGRAM
	LI   R1,TEMPBU
	XOP  @DUTLXP,0		; DO IT
*
	MOV  R0,R0		; ANY ERROR ON RETURN?
	JEQ  LODCNT		; BRIF NO
*
	LI   R0,ACTIVE		; SET MULTITASKING ENVIRONMENT
	MOV  R0,@STATE
	CLR  R8			; CLEAR PAGE 0 RETURNED
	MOV  @BASEAD,R3
	MOV  @RETUAD,R11
	MOV  R8,R5
	B    *R11
*
LODCNT	EQU  $
	MOVB  R1,@PAGZER	; SAVE USER TASK PAGE 0 ADDRESS
*
*  CREATE AN MDOS STYLE STRING (LENGTH + STRING) OUT OF USER COMMAND
*  LINE TO PASS
*
	MOV  @ARG2,R0		; GET LENGTH OF COMMAND
	MOV  *R0,R0		; (# OF BYTES TO MOVE)
	MOV  R0,R3		; SAVE LENGTH BYTE
	MOV  @ARG3,R1		; GET USER STRING START
	LI   R2,TEMPBU		; MOVE TO ADDRESS (STACK)
	INC  R2			; SKIP LENGTH BYTE
	MOV  R3,R3
	JEQ  MOVDON
*
MOVLOP	EQU  $
	MOVB *R1+,*R2+		; GET A BYTE
	DEC  R0
	JNE  MOVLOP
*
MOVDON	EQU  $
	CLR  R5
	MOVB R5,*R2		; ZERO TERMINATE STRING
	SWPB R3			; LENGTH IN HIGH BYTE
	MOVB R3,@TEMPBU		; SAVE R3 IN FILE BYTE
**
** MOVE ARGUMENT STRING INTO USER TASK SPACE
**
	BL   @DETERM		; DETERMINE WHAT PAGE I CAN SWAP
*
*  MOVE THE COMMAND STRING (IF ANY) TO THE PAGE ZERO FREE NODE LIST
*
	BL   @MOVESTRING
*
	JNE  NOCOMMX		; BRIF ERROR MOVING STRING
*
*  STRING MOVED, UPDATE THE POINTERS TO CMDSTR & FREPTR
*
	MOV  @FREPTR(R9),@CMDSTR(R9)
	MOV  R3,R4
	A    R9,R4
	MOV  *R4,@FREPTR(R9)	; SET FREE POINTER TO NEXT NODE
	CLR  *R4		; ZAP POINTER ON LAST NODE
*
*  DONE WITH COMMAND STRING.  RESTORE MY PAGE & RETURN
*
NOCOMMX	EQU  $
	CLR  R8				; NOOP HIS INHERITANCE OF MOUSE
	MOVB R8,@MOSTAT(R9)		; SET HIS MOUSE DRIVER DISABLED
*
	LI   R0,SLEEPY			; PUT HIM TO SLEEP
	MOVB R0,@STATE(R9)
*
*  LOAD IN EXIT CODE, SO THAT THE CHILD TASK WILL AWAKEN ME WHEN HE EXITS
*
	LI   R0,SPECCO		; SPECIAL CODE
        MOV  R9,R1              ; AT >B2, IN EXIT CODE
        AI   R1,>B2
	MOV  *R0+,*R1+		; MOV @COTASK+1,@MAPPER+2
	MOV  *R0+,*R1+
	MOV  *R0+,*R1+
	MOV  *R0+,*R1+		; MOV R11,@>4102
	MOV  *R0+,*R1+
	MOV  *R0+,*R1+		; JMP INTCAL
*
	BL   @RESTOR
*
	LI   R0,ACTIVE
	MOVB R0,@STATE		; ALLOW MULTI-TASKING
*
	CLR  R8
	MOVB @PAGZER,R8		; RETURN PAGE ZERO
	SWPB R8
        LIMI 2                  ; RESTORE INTERRUPTS
	MOV  @BASEAD,R3
	MOV  @RETUAD,R11
	MOV  R8,R5		; IN PROPER REGISTER FOR FORTRAN
	B    *R11
**
** AWAKEN - AWAKEN THE CHILD TASK - LET HIM RUN
**
AWAKEN	EQU  $
	DATA -1
	DATA BASEAD
	MOV  @ARG1,R8
	MOV  *R8,R8		; GET ACTUAL VALUE
	SWPB R8
	MOVB R8,@PAGZER
	BL   @DETERM		; DETERMINE WHERE I CAN RUN
	LI   R0,ACTIVE		; ZAP HIS PROCESS STATE
	MOVB R0,@STATE(R9)
	LI   R0,>0600		; SET SLICE TO 1 SO HE'LL RUN SOON
	MOVB R0,@SLICE(R9)	; SET SLICE OF LIFE
	BL   @RESTOR
        LIMI 2                  ; RESTORE INTERRUPTS
	MOV  @BASEAD,R3
	MOV  @RETUAD,R11
	B    *R11
**
** SLEEP - PUT THE CHILD TASK TO SLEEP
**
SLEEP	EQU  $
	DATA -1
	DATA BASEAD
	MOV  @ARG1,R8
	MOV  *R8,R8
	SWPB R8
	MOVB R8,@PAGZER
	BL   @DETERM		; DETERMINE WHERE I CAN RUN
	LI   R0,SLEEPY		; ZAP HIS PROCESS STATE
	MOVB R0,@STATE(R9)
	BL   @RESTOR
        LIMI 2                  ; RESTORE INTERRUPTS
	MOV  @BASEAD,R3
	MOV  @RETUAD,R11
	B    *R11
**
** SENDMESSAGE - SENDS A MESSAGE TO THE CHILD TASK.  THIS IS DONE BY
**          CONVERTING THE MESSAGE TO AN MDOS STRING, ACCESSING THE
**          CHILD TASK PAGE ZERO, AND MOVING THE MESSAGE INTO THE NODE
**          LIST FOR THE CHILD TASK, AND UPDATING THE "MESSAGE" POINTER.
**          STACKING OF MESSAGES IS ALLOWED.
**
**          THE CHILD TASK USES THE "GETMESSAGE" FUNCTION TO RETRIEVE
**          THE MESSAGE.
**
**  ERRORS:
**
**		1 - MESSAGE IS TOO SHORT OR TOO LONG
**		2 - NO ROOM FOR MESSAGE
**		4 - CHILD TASK DOES NOT EXIST
SENDME
*
*  MOVE THE MESSAGE TO MY STACK SO THAT IT WON'T GET MAPPED OUT
*
	DATA -3			; 3 ARGUMENTS
	DATA BASEAD
*
	MOV  @ARG2,R2		; GET LENGTH OF MESSAGE
	MOV  *R2,R2
	JEQ  NOMSG		; BRIF ZERO LENGTH MESSAGE
	JLT  NOMSG		; BRIF LESS THAN ZERO
	CI   R2,240		; GREATER THAN MAX MESSAGE?
	JLT  PROMSG		; NO, PROCESS MESSAGE
*
NOMSG	EQU  $
	MOV  @BASEAD,R3
	MOV  @RETUAD,R11
	LI   R5,1		; RETURN ERROR
	B    *R11
*
*  MESSAGE IS OK, MOVE THE MESSAGE TO MY STACK
*
PROMSG	EQU  $
	MOV  @ARG3,R3		; GET MESSAGE START
	LI   R4,TEMPBU		; "MOVE TO" ADDRESS
	INC  R4			; SKIP LENGTH BYTE
MOVMSG	EQU  $
	MOVB *R3+,*R4+		; MOVE A BYTE
	DEC  R2
	JNE  MOVMSG
*
	MOV  @ARG2,R2		; GET MESSAGE LENGTH AGAIN
	MOV  *R2,R2
	SWPB R2
	MOVB R2,@TEMPBU		; INTO STACK
*
*  MAP IN USER PAGE 0
*
	MOV  @ARG1,R1
	MOV  *R1,R1		; GET PAGE ZERO #
	SWPB R1
	MOVB R1,@PAGZER
*
	BL   @DETERM		; DETERMINE START ADDRESS
*
*  MAKE SURE THE TASK IS STILL THERE (BY IDENTIFYING THE PAGE ZERO)
*
	MOV  *R9,R1		; DOES IT START WITH >F080
	CI   R1,FIRSTI
	JNE  ABORTTA		; TASK DOES NOT EXIST
*
	BL   @MOVESTRING	; MOVE STRING TO USER NODE
	JNE  ABORTMS		; NO ROOM, ABORT MESSAGE
*
*  THE STRING HAS BEEN MOVED TO THE FREE NODES.  LINK THE NEW MESSAGE
*  TO THE LAST NODE OF ANY EXISTING MESSAGE
*
	MOV  @MSGPTR(R9),R5	; ANY EXISTING MESSAGE HERE?
	JNE  LINKEND		; BRIF YES, LINKAGE TO END OF MESSAGE
*
*  THERE IS NO CURRENT MESSAGE, JUST LINK THE MESSAGE TO THE MESSAGE
*  POINTER
*
	MOV  @FREPTR(R9),@MSGPTR(R9)
	MOV  R3,R4
	A    R9,R4
	MOV  *R4,@FREPTR(R9)	; SET FREE POINTER TO NEXT NODE
	CLR  *R4		; ZAP POINTER ON LAST NODE
	JMP  LINKCOM
*
*  THERE IS A CURRENT MESSAGE IN THE USER QUEUE.  LINK THIS MESSAGE TO
*  THE END OF THE LAST NODE IN THE CURRENT QUEUE
*
LINKEND	EQU  $
	MOV  R5,R6		; SAVE POINTER TO THIS NODE
	A    R9,R5
	MOV  *R5,R5		; GET POINTER TO NEXT NODE
	JNE  LINKEND		; TIL AT END OF LINK QUEUE
*
	A    R9,R6		; + OFFSET
	MOV  @FREPTR(R9),*R6	; SET LINKAGE ON LAST NODE OF CURRENT MESSAGE
	MOV  R3,R4
	A    R9,R4
	MOV  *R4,@FREPTR(R9)	; SET FREE POINTER TO NEXT NODE
	CLR  *R4		; ZAP POINTER ON LAST NODE
*
LINKCOM	EQU  $
*
*  MAKE SURE THE CHILD TASK IS AWAKENED, AND SET HIS SLICE TO 6 SO
*  HE'LL HAVE SOME TIME TO RUN WITHOUT BEING PRE-EMPTED.
*
	LI   R0,ACTIVE		; ZAP HIS PROCESS STATE
	MOVB R0,@STATE(R9)
	LI   R0,>0600		; SET SLICE TO 1 SO HE'LL RUN SOON
	MOVB R0,@SLICE(R9)	; SET SLICE OF LIFE
*
*  DONE, NOW RESTORE MY PAGE
*
	BL   @RESTOR
*
*  SET MY SLICE OF LIFE TO 1, SO I'LL BE PREEMPTED SOON
*
	LI   R0,>0100		; SET MY SLICE SO I WILL BE PRE-EMPTED SOON
	MOVB R0,@SLICE
*
        LIMI 2                  ; RESTORE INTERRUPTS
	BLWP @INTINT		; FORCE A TASK PULL
	MOV  @BASEAD,R3
	MOV  @RETUAD,R11
	LI   R5,0
	B    *R11
*
*  ABORT DUE TO LACK OF ROOM IN USER BUFFER
ABORTMS	EQU  $
	BL   @RESTOR
        LIMI 2                  ; RESTORE INTERRUPTS
	MOV  @BASEAD,R3
	MOV  @RETUAD,R11
	LI   R5,2		; NO ROOM FOR MESSAGE
	B    *R11
*
*  ABORT DUE TO TASK DOESN'T EXIST, OR I AM NOT THE OWNER
*
ABORTTA	EQU  $
	BL   @RESTOR
        LIMI 2                  ; RESTORE INTERRUPTS
	MOV  @BASEAD,R3
	MOV  @RETUAD,R11
	LI   R5,4		; TASK DOES NOT EXIST
	B    *R11
**
** GETMES - RETRIEVE A MESSAGE FROM A CALLING TASK
**
**       GETMESSAGE IS CALLED WHEN A TASK DESIRES TO WAIT FOR AN
**       INCOMING MESSAGE.  IT PUTS ITSELF TO SLEEP AND WAITS FOR
**       THE MESSAGE.  THE MESSAGE LENGTH IS RETURNED IN R8, THE
**       MESSAGE ITSELF IS RETURNED IN THE PASSED POINTER STRING.
**
GETMES
	DATA -1			; ARGUMENT IS RETURNED MESSAGE ADDRESS
	DATA BASEAD
*
        LIMI 0                  ; SEE IF A MESSAGE IS WAITING
        MOV  @MSGPTR,R1
        JNE  GOTMSG
*
	LI   R0,SLEEPY		; ELSE, PUT ME TO SLEEP
	MOVB R0,@STATE
*
	LI   R1,>0100		; PUT ME TO SLEEP SOON
	MOVB R0,@SLICE
*
	LIMI 2			; RESTORE INTERRUPTS
*
	BLWP @INTINT		; FORCE A TASK SWITCH
*
CHKAGAIN
	LIMI 0
	MOV  @MSGPTR,R2		; DID I GET A MESSAGE?
	JNE  GOTMSG
	LIMI 2
	NOP
	NOP
	JMP  CHKAGAIN
*
*  A MESSAGE WAS REC'D.  LOCK INTERRUPTS AND RETRIEVE MESSAGE
*
GOTMSG	EQU  $
	LIMI 0			; RETRIEVE MESSAGE
	JMP  AROUND		; GOOD BREAKPOINT LOCATION
	NOP
AROUND	EQU  $
	LI   R0,ACTIVE		; MAKE SURE I'M AN ACTIVE TASK
	MOVB R0,@STATE
*
	LI   R0,>0600		; GIVE ME SOME TIME TO RUN
	MOVB R0,@SLICE
*
	MOV  @MSGPTR,R1		; MOVE FROM ADDRESS
	MOV  @ARG1,R2		; MOVE TO ADDRESS
*
*  MOVE A NODE, R1 POINTS TO NODE ADDRESS
*
	CLR  R8			; CLEAR LENGTH
	MOV  R1,R6		; SAVE START OF THIS NODE
	MOV  *R1+,R3		; NEXT NODE ADDRESS
	CLR  R4			; GET LENGTH
	MOVB *R1+,R4
	SWPB R4
	MOV  R4,@LENGTH		; SAVE LENGTH FOR USER (LATER)
	JEQ  MSGDON		; BRIF ZERO LENGTH MESSAGE
	LI   R5,5		; # BYTES LEFT IN THIS NODE
*
MOVANO	EQU  $
	MOVB *R1+,*R2+		; MOVE A BYTE
	DEC  R4			; DONE WITH MESSAGE?
	JEQ  MSGDON		; BRIF YES
	DEC  R5			; NODE DONE?
	JNE  MOVANO		; BRIF NO
*
	MOV  R3,R1		; POINT TO NEXT NODE
	JEQ  MSGDON
	MOV  R3,R6		; SAVE START OF THIS NODE
	MOV  *R1+,R3		; AFTER NODE
	LI   R5,6		; 6 BYTES PER NODE
	JMP  MOVANO
*
*  NODE MOVE TO TARGET STRING.  RESTORE MESSAGE TO FREE LIST
*
MSGDON	EQU  $
	MOV  @MSGPTR,R5		; GET CURRENT MESSAGE POINTER START
	MOV  *R6,@MSGPTR	; SET NEW MESSAGE POINTER
				; (FROM LINK OF LAST NODE EMPTIED)
	MOV  @FREPTR,*R6	; SET TO FREE LIST CHAIN
	MOV  R5,@FREPTR		; FIX UP FREE LIST
	LIMI 2			; RESTORE INTERRUPTS
	MOV  @BASEAD,R3
	MOV  @RETUAD,R11
	MOV  @LENGTH,R5		; RETURN WITH LENGTH IN R5
	B    *R11
**
** DETERM - DETERMINE WHAT PAGE & ADDRESS I CAN USE FOR MULTITASKING
**          BASED UPON WHAT START/END PAGES THIS ROUTINE IS MAPPED IN.
**
DETERM	EQU  $
	LI   R5,1		; POSSIBLE PAGE I CAN USE
	LI   R1,START		; GET STARTING ADDRESS
	SRL  R1,13		; GET PAGE #
	C    R1,R5
	JNE  DETERR		; BRIF NOT EQUAL, MADE IT
	INC  R5			; TRY PAGE 2
	LI   R1,SEND
	SRL  R1,13
	C    R1,R5
	JNE  DETERR		; BRIF NOT EQUAL, MADE IT
	INC  R5			; ELSE, PAGE 3
DETERR	EQU  $
	LIMI 0			; DISABLE INTERRUPTS
	MOV  R5,@PAGMAP		; SAVE PAGE NUMBER TO MAP
	SLA  R5,13
	MOV  R5,@PAGADR		; SAVE STARTING ADDRESS OF PAGE
	LI   R5,MMRREG		; GET STARTING MEMORY MAP REG
	A    @PAGMAP,R5		; + MY MAP PAGE
	MOVB *R5,@SAVPAG
	MOVB @PAGZER,*R5	; SET THE MAPPER REG
	MOV  @PAGADR,R9		; SET START OF PAGE ADDRESS IN R9
	B    *R11
**
** RESTOR - RESTORE MY PAGE AND ENABLE INTERRUPTS
**
RESTOR	EQU  $
	LI   R2,MMRREG			; RESTORE MEMORY PAGE
	A    @PAGMAP,R2
	MOVB @SAVPAG,*R2
*	LIMI 2				; ENABLE INTERRUPTS
	B    *R11
**
** MOVESTRING - MOVES AN MDOS STRING ON THE STACK TO THE FREE NODES
**              IN THE CHILD TASK.  ON ENTRY:
**
**                TEMPBU - POINTS TO STACK START
**                R9 - HAS MAPPED ADDRESS OF CHILD TASK PAGE 0
**
**  RETURNS <NE> IF COULDN'T MOVE
**  RETURNS <EQ> IF MOVED OK
**
MOVESTRING
	LI   R1,TEMPBU		; START ADDRESS OF STRING
	CLR  R2
	MOVB *R1,R2		; GET LENGTH BYTE
	JEQ  NOCOMM		; BRIF NO STRING
	SWPB R2			; USE AS COUNTDOWN
	INC  R2			; ONE MORE FOR LENGTH BYTE
*
*  MOVE THE STRING INTO THE USER TASK PAGE 0; FIND ITS FREE LIST NODE
*
	MOV  @FREPTR(R9),R3	; START OF FREE LIST CHAIN
	JEQ  NOCOMM		; BRIF NO FREE NODES
*
*  MOVE A NODE, R1 POINTS TO STRING START; R2 HAS LENGTH; R3 POINTS
*  TO ADDRESS (0 BASED) OF THIS NODE
*
MOVNOD	EQU  $
	MOV  R3,R4		; COMPUTE ACTUAL ADDRESS OF NODE
	A    R9,R4
	INCT R4			; START TO 6 BYTE PACKET
	LI   R5,6		; MOVE MAXIMUM OF 6 BYTES
*
MOVBYM	EQU  $
	MOVB *R1+,*R4+		; MOVE A BYTE FROM STRING TO NODE
	DEC  R2			; DID I MOVE WHOLE STRING ?
	JEQ  ALLDON		; BRIF YES, FINAL NODE
	DEC  R5			; ANY MORE SPACE THIS NODE?
	JNE  MOVBYM		; BRIF YES
*
*  DONE WITH A NODE.  SEE IF I CAN LINK TO NEXT NODE.  IF NOT, GIVE
*  UP.  IF SO, THEN SET UP FOR ANOTHER NODE
*
	MOV  R3,R4		; GET START ADDRESS OF NODE AGAIN
	A    R9,R4		; TRUE OFFSET
	MOV  *R4,R3		; GET OFFSET TO NEXT NODE
	JEQ  NOCOMM		; NOTHING HERE, FORGET IT
	JMP  MOVNOD
*
*  ZERO OUT ANY REMAINING BYTES IN THE LAST NODE
*
ALLDO1	EQU  $
	CLR  R8
	MOVB R8,*R4+
ALLDON	EQU  $
	DEC  R5
	JNE  ALLDO1
FILLCO	EQU  $
	CLR  R8
	MOV  R8,R8
	B    *R11
*
*  ERROR EXIT FROM MOVESTRING
*
NOCOMM	EQU  $
	LI   R8,1
	B    *R11
**
** DATA AREA
**
SPECCO	EQU  $
	DATA >D820			; MOVB @COTASK+1,@MAPPER+2
	DATA >00E9
	DATA >F112
	DATA >C80B			; MOV R11,@>4102
	DATA >4102
	DATA >10E4                      ; JMP INTCAL
*
DUTLXP	DATA UTLXOP			; UTILITY XOP NUMBER
PAGMAP	DATA 0				; PAGE # THAT I CAN MAP ON
PAGADR	DATA 0				; PAGE ADDRESS THAT I CAN MAP ON
LENGTH	DATA 0				; SAVE OF RETURNED MESSAGE LENGTH
SAVPAG  BYTE 0				; SAVED PAGE # AT MY PAGE ADDRESS
PAGZER	BYTE 0				; PAGE ZERO SAVE
KBLANK  BYTE >20			; AN ASCII BLANK
K1	BYTE >01
	EVEN
TASKPT	DATA 0				; TASK POINTER
	EVEN
TEMPBU  BSS  256		; MUST BE LARGE ENOUGH FOR BIGGEST MESSAGE
BASEAD  BSS  2
RETUAD  BSS  2
ARG1	BSS  2
ARG2	BSS  2
ARG3	BSS  2
*
SEND    EQU  $
	END
