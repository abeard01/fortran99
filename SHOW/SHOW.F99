        program show
        implicit integer(a-z)
c
c  show  :   display amiga iff files on a GENEVE
c
        include 'IFFCOM'
c
c  local declarations
c
        recptr = 129            ! force read of first record
        gotheader = .false.
        gotcmap = .false.
c
        print *,'Enter File Name to Display'
        read (*, 9100, end=9999, err=9999 ) filename
c
        call open ( 1, filename, 2, 0, 0, 0, 128, error )
        if ( error .ne. 0 ) then
          print *,'Cannot Open Display File, error is ',error
          stop
        endif
c
c  file opened ok, now get the header "FORM"
c
        call get4 ( form )
        if ( form .ne. 'FORM' ) then
          print *,'Not an IFF File...'
          stop
        endif
c
c  Get the form size
c
        call get4 ( formsz )
c
c  See if interleaved bitmap file
c
        call get4 ( ilbm )
        if ( ilbm .ne. 'ILBM' ) then
          print *,'Not an ILBM File'
          stop
        endif
c
c  Start reading and parsing headers
c
        call getmod ( mode )
        call setmod ( 9 )
        call gvidtb ( vidtbls )		! get start of pattern table
c
        do while ( .true. )
          call get4 ( header )
          call get4 ( length )
c                                       bitmapped
          if ( header .eq. 'BMHD' ) then
            gotheader = .true.
            call get2 ( width )         ! raster width
            call get2 ( height )        ! raster height
            call get2 ( posx )          ! x position
            call get2 ( posy )          ! y position
            call get1 ( colors )        ! # of colors
            call get1 ( masking )       ! masking
            call get1 ( compress )      ! compression
            call get1 ( pad1 )          ! unused
            call get2 ( transcol )      ! transparant color
            call get1 ( xaspect )       ! pixel aspect ratio
            call get1 ( yaspect )
            call get2 ( pagewidth )     ! page width and height
            call get2 ( pageheight )
c                                       CMAP color map
          else if ( header .eq. 'CMAP' ) then
            gotcmap = .true.
            numcol = length / 3
            do 1000 i=1,numcol
              do 1010 j=1,3
                call get1 ( cmap(j,i) )
1010          continue
1000        continue
c
c  compute GENEVE equivalent color byte for graphics mode 7 for each
c  color pallette register.   I must translate three bytes into a
c  single byte.
c
            do 1030 i=1,numcol
              green =  cmap(2,i)
              green =  iand ( green, z'00e0' )
              red   =  cmap(1,i)
              red   =  iand ( red, z'00e0' ) / 8
              blue  =  cmap(3,i)
              blue  =  iand ( blue, z'00c0' ) / 64
              pallette = green + red + blue
              creg(i) = pallette
1030        continue
c                                       DPPS ?
          else if ( header .eq. 'DPPS' .or. header .eq. 'CRNG' .or.
     +              header .eq. 'CAMG' ) then
            do 1040 i=1,length
              call get1 ( dummy )
1040        continue
c                                       BODY
          else if ( header .eq. 'BODY' ) then
            if ( ( .not. gotheader) .or. (.not. gotcmap) ) then
              call setmod ( mode )
              print *,'BODY before header or cmap'
              stop
            endif
            call body
            status = 0
            do while ( status .eq. 0 )
              call key ( 0, k, status )
            enddo
            call setmod ( mode )
            stop
          else
            call setmod ( mode )
            write ( 6, 9110 ) header
            stop
          endif
        enddo
c
9999    stop
9100    format ( 41a1 )
9110    format ( ' Unrecognized Chunk ',a4 )
        end
        subroutine get4 ( longword )
        integer *4 longword, mylong
        integer *1 mybyte(4)
        equivalence ( mylong, mybyte )
c
        call get1 ( mybyte(1) )
        call get1 ( mybyte(2) )
        call get1 ( mybyte(3) )
        call get1 ( mybyte(4) )
        longword = mylong
        end
        subroutine get2 ( word )
        integer *2 word, myword
        integer *1 mybyte(2)
        equivalence ( mybyte, myword )
        call get1 ( mybyte(1) )
        call get1 ( mybyte(2) )
        word = myword
        end
        subroutine get1 ( byte )
        implicit integer(a-z)
        integer *1 byte
        include 'IFFCOM/NOLIST'
c
        recptr = recptr + 1
        if ( recptr .gt. 128 ) then
          read ( 1, 9100, end=9999, err=9999, iostat=error ) record
          recptr = 1
        endif
c
        byte = record(recptr)
        return
9999    print *,'Error reading IFF file, error is ',error
9100    format ( 128a1 )
        end
	subroutine body
	implicit integer(a-z)
c
c  body  -  reads in the display body from the file, and stores in the
c	    pattern table array; with pallette translation.  The algorithm
c	    is:
c
c		do for 1 to height
c		  do for 1 to width
c		    get next bitplane value from file (1, 2, 3, 4, or 5 bits)
c	            translate to 8-bit pallete
c		    if ( not off raster line )
c		      save in output pattern table
c		    endif
c		  enddo
c	        enddo
c
        integer *1 repeats, char
        integer *4 iptr, vmemloc
c
        ypos     = 0
	vmemloc  = vidtbls(2)
	bitsleft = 0
	rlenumb  = 0
	repeats  = 0
c
	do while ( ypos .lt. height )
	  ypos = ypos + 1
	  xpos = 0
	  do while ( xpos .le. width )
	    xpos = xpos + 1
	    call getvrb ( char        ) ! get next character
	    k = char			! pallette index
	    map(xpos) = creg(k)
	  enddo
	  if ( ypos .lt. 212 ) then
	    call lvmbw ( vmemloc, map, 256 )
	    vmemloc = vmemloc + 256
	  endif
	enddo
	end
	subroutine getvrb ( char )
	implicit integer(a-z)
c
c  getvrb  - get the next variable # of bits (based on colors) in the
c	     byte char.  The variables:
c
c		bitsleft - has # of bits left in current byte
c
	include 'IFFCOM/NOLIST'
c
	integer *1 bits(8), nchar
	integer *2 ichar
	data bits / z'01', z'02', z'04', z'08', z'10', z'20', z'40', z'80'/
c
	if ( bitsleft .eq. 0 ) then
	  call getbyte ( nchar )
	  bitsleft = 8
	endif
c
	ichar = nchar
	ichar = iand ( ichar, z'00ff' )
	if      ( colors .eq. 1 ) then	! 1 color
	  ichar = kiand ( nchar, bits(bitsleft) )
	  bitsleft = bitsleft - 1
	else if ( colors .eq. 4 ) then
	  if ( bitsleft .eq. 8 ) then
	    ichar = ichar / 16
	    bitsleft = 4
	  else
	    ichar = iand ( ichar, z'000f' )
	    bitsleft = 0
	  endif
	endif
	end
	subroutine getbyte ( nchar )
	implicit integer(a-z)
c
c  getbyte - reads the next byte from the body and returns to caller.
c	     takes into account compression method.
c
	include 'IFFCOM/NOLIST'
c
	integer *1 type, lastchar
c
c  if no compression, things are simple.  just return next byte
c
	if      ( compression .eq. z'00' ) then
	  call get1 ( nchar )
c
c  if compression, things get complicated.  The repeats variable keeps
c  track if repeats are in progress.  If there is, then just get character
c  repeats & return.  If not repeats, check to see if a run length encoded
c  string is in progress (rlenumb).  If so, then return next.
c
	else
	  if ( repeats .ne. 0 ) then
	    nchar = lastchar
	    repeats = repeats - 1
	  else if ( rlenumb .ne. 0 ) then
	    call get1 ( nchar )
	    rlenumb = 0
	  else
	    type = z'80'
	    do while ( type .eq. z'80' )
	      call get1 ( type )
	      if ( type .ge. 0 ) then
	        rlenumb = type
	        call get1 ( nchar )
	      else if ( type .ne. z'80' ) then
	        repeats = type
	        repeats = iabs(repeats)
	        call get1 ( lastchar )
	        nchar = lastchar
	      endif
	    enddo
	  endif
	endif
	end	
