	TITL 'FORTRAN4 - PEEPHOLE OPTIMIZER/I/O OPTIMIZER'
	IDT  'FORT4'
*
*  FORTRAN4 contains the following optimization routines:
*
*  1. Code generator peephole optimizer
*  2. Scratch File Usage Optimizer
*
*  VERSION 3.0 CHANGES, 03-June-87
*
*  1. Optimizer instructions changed to macros.  Extensive use of
*     tab stops made to reduce overall file size.
*  2. FIOC and FOPFIL were changed to BLWP calls.  This greatly reduced
*     the code in FORTRAN1 and FORTRAN3 with regards to preserving 
*     registers before/after I/O calls.
*  3. Some unused pseudo instructions were deleted.
*  4. IO and OPFILE calls changed to BLWP calls to correspond with MENU
*
*  VERSION 3.1 CHANGES, 13-OCT-87
*  1. Changed starting offset to E100 (was E000)
*  2. Added CSN routine
*
*  VERSION 4.0 CHANGES  09-DEC-87
*
*  1. Updated for MDOS version
*  2. Added FAC as reference (in FORTRAN5 for MDOS version)
*  3. Removed CSN routine (moved to FORTRAN1).
*  4. New FORTRAN5 include rather than REF's
*  5. Change for new address fields (7f, not ff)
*
*  VERSION 4.4 CHANGES 16-MAY-89:
*
*  1. Fixed end of do loop processing for floating point do's.
*     Was trying to create an "increment f.p." instruction.
*
*  2. Fix CHKCOM, wasn't inverting the mask properly.
*
*  10-DEC-89   V4.42    CORRECTED SFXCON, NOW BASED ON ACTUAL STACK #.
*                       FIXED CHKCOM AGAIN TO GET PROPER MASK.
*
	COPY "FORTPAR:"
	COPY "EQUATES:FORTEX.EQ9"
*
	DEF  PEEPHO		PEEPHOLE OPTIMIZER ENTRY
	DEF  F4EADR		ENDING ADDRESS (END OF GPL VERSION)
	REF  GETWOR		GET WORD SUBROUTINE
	REF  GETWO2		GET WORD (NOT FROM BARREL) SUBROUTINE
	REF  KMBARS		NUMBER OF BYTES TO MOVE
*
	TITL 'FORTRAN4 - PEEPHOLE OPTIMIZER DATA AREA'
	PAGE
PASS1	EQU  3		USE FORTRAN3's DATA AREA
	COPY "FORTRAN5.A99"
*
*  Equates:
*
OBOS	EQU  >1900		BEGINNING OF STATEMENT
ADRTMP	EQU  RATEMP*512		ADDRESS TEMPORARY START
SFXCON	EQU  RFXCON*512		FIXED CONSTANT OP FIELD
*
*  Interpreted instruction definition macros:
*
*  Operation field is in bits 0 to 4.
*				FAILURE MODE DEFINE
OPTTAB	MACRO
	DATA %1-OPTTAS+>0000
	ENDM
*				CHECK CONSTANT WITH MASK
CHKCOM	MACRO
        DATA %1-MASKS+>0800,%2-MASKS
	ENDM
*				REPLACE WORD WITH GIVEN WORD
REPLAC	MACRO
	DATA %1-MASKS+>1000
	ENDM
*				REPLACE WORD IN BARREL
REPLAW	MACRO
	DATA >1800+%1
	ENDM
*				COMPARE WORD WITH BARREL
COMPAR  MACRO
	DATA >2000+%1
	ENDM
*				ACCEPT TRUNCATED BARREL
ACCEPT	MACRO
	DATA >2800+%1
	ENDM
*				MOVE BUFFER TO TEMPORARY
MOVEBU	MACRO
	DATA >3000+%1
	ENDM
*				CHECK MULTIPLE BOS'S
CHKMBO	MACRO
	DATA >3800+%1
	ENDM
*				INTERPRETED GOTO
IGOTO	MACRO
	DATA %1-OPTTAS+>4000
	ENDM
*				CHECK FIXED CONSTANT
CFXCON	MACRO
	DATA >4800
	DATA %1
	ENDM
*				SET ERROR ADDRESS
ESETER  EQU  >5000
SETERR	MACRO
	DATA %1-OPTTAS+ESETER
	ENDM
*				SKIP WORD IN BARREL
SKIPIN	MACRO
	DATA >5800+%1
	ENDM
*				COMPARE W/CONSTANT INDEX & BARREL
CHKTBL	MACRO
	DATA %1-MASKS+>6000
	ENDM
*
*  DATA AREA:
*
MASKS	EQU  $
KFF00	DATA >FF00
KFFFE	DATA >FFFE
KOPCAT	DATA MTAGFL+>FC00	OPCODE FIELD AND TAG FIELD TOGETHER
KTYPEF	DATA MTAGFL		TYPE OF VALUE TO LOAD/STORE
KINTYP	DATA INTYPE		INTEGER *2 TYPE
KBYTYP	DATA BYTYPE		INTEGER *1 TYPE
KOB	EQU  $			B @X
K0	DATA 0
KOJEQ   DATA >0200
KOINC   DATA >0300      	INC
KOADD	DATA >0500      	A @X,R5
KOLDA	DATA >0600		MOV @X,R5
KOLDA1  DATA >0601      	INDIRECT LOAD
KOSTA	DATA >0700		MOV R5,@X
KOSTA1  DATA >0701      	INDIRECT STORE
KOCP	DATA >0800		CP   @X,R5
KODIV   DATA >0900      	DIV @X,R5
KOMUL   DATA >0A00      	MPY @X,R5
KOSUB   DATA >0B00      	S    @X,R5
KOLT    DATA >1400      	.LT.
KOGT    DATA >1600      	.GT.
KONE	DATA >1700		.NE.
KOLAB   DATA >1800      	LABEL
KOBOS   DATA >1900      	BEGINNING OF STATEMENT
KOINC2  DATA >1D00      	INCT @X
KODEC   DATA >1E00      	DEC @X
KODEC2  DATA >1F00      	DECT @X
KOMU16	DATA >2200		SLA R5,4
KOMU32	DATA >2300		SLA R5,5
KOMU64	DATA >2400		SLA R5,6
KOM128  DATA >2500		SLA R5,7
KOM256  DATA >2600		SLA R5,8
KOSTT1  DATA >2F00		MOV R5,R7
KOSTI1	DATA >3000		MOV R5,*R7
KOSTT2  DATA >3300      	MOV R5,R8
KOSTI2	DATA >3400		MOV R5,*R8
KOSTT3  DATA >3700      	MOV R5,R9
KOSTI3	DATA >3800		MOV R5,*R9
KOJNE   DATA >3B00      	JNE X
KLLABE	DATA >4800		LABEL VALUE
KLLOCA  DATA >4C00      	LOCAL VALUE
KLCVAL	DATA >5000		LOCAL CONSTANT VALUE
KOINCR2 DATA >5A00		INCT R5
KODECR  DATA >5B00      	DEC R5
KODECR2 DATA >5C00		DECT R5
KOINDR  DATA >5D00      	MOV *R5,R5
KBINDR	DATA >5E00		MOVB *R5,R5
KONOT1	DATA >6100
KONOT2	DATA >6200
KOMU02  DATA >6200      	A R5,R5
KOINCR  DATA >6400      	INC R5
KOEQ	DATA >6800		.EQ.
KOMOV	DATA >6B00		MOV @X,@Y
KOCLA	DATA >6D00		CLR @
KOSETO	DATA >6E00		SETO @
KLIVAL  DATA >7400		LOAD IMMEDIATE VALUE
KOMU04	DATA >7800		SLA R5,2
KOMU08	DATA >7900		SLA R5,3
*
*  EQUATES WHOSE VALUES DEPEND ON STACK NUMBERS (TEMPORARIES)
*
KOATEM	DATA ADRTMP		FIRST  ADDRESS TEMPORARY
KOATE1	DATA ADRTMP+1		SECOND ADDRESS TEMPORARY
KOATE2	DATA ADRTMP+2		THIRD  ADDRESS TEMPORARY
KOALOG	DATA ADRTMP+LGTYPE	FIRST  ADDRESS TEMPORARY (LOGICAL)
KOALO1  DATA ADRTMP+LGTYPE+1	SECOND ADDRESS TEMPORARY (LOGICAL)
KOALO2	DATA ADRTMP+LGTYPE+2	THIRD  ADDRESS TEMPORARY (LOGICAL)
KOABYT	DATA ADRTMP+BYTYPE	FIRST  ADDRESS TEMPORARY (INTEGER *1)
KOABY1	DATA ADRTMP+BYTYPE+1	SECOND ADDRESS TEMPORARY (INTEGER *1)
KOABY2	DATA ADRTMP+BYTYPE+2	THIRD  ADDRESS TEMPORARY (INTEGER *1)
KOVBY0	DATA RSCALE*512+BYTYPE	BYTE SCALAR VARIABLE
KOVIN0	DATA RSCALE*512+INTYPE	INTEGER *2 VARIABLE COMPARE
*
*  SPECIAL REGISTER DEFINITIONS FOR INTERPRETER
*
RPC	EQU  7			PROGRAM COUNTER
RBUF	EQU  8			BARREL POINTER
RBUF2	EQU  9			TEMP BARREL POINTER
RERR	EQU  10			ERROR ADDRESS (MAIN ERROR)
	TITL 'OPTIMIZER INTERPRETER'
*
*  This module contains the code geneator peephole interpreter.
*
*  The driving tables are interpreted and compared to the input
*  stack.  Changes are made to the instruction stack according
*  to the optimized instructions.
*
PEEPHO	EQU  $
	MOV  R11,@PPEEPE 	SAVE RETURN
PEEPH1	EQU  $		 	RE-ENTRY (AFTER ACCEPT)
	LI   R5,BARREL
	AI   R5,64-12	 	SPECIAL END OF BARREL CHECK
	MOV  R5,@KENDB
	LI   RERR,OPTTAS 	GET DRIVING TABLE START
	MOV  RERR,RPC	 	INTO PC POINTER
	MOV  @ABARRE,RBUF  	INITIALIZE BUFFER POINTER
*
*  DOMBOS - SKIP MULTIPLE Beginning of Statements
*
DOMBOS	EQU  $
	MOV  RBUF,R6
	MOV  *R6+,R5
	ANDI R5,>FF00
	CI   R5,OBOS
	JNE  BDOERR
	MOV  *R6+,R5		RBUF +2
	JNE  BDOERR
	INCT R6
	MOV  *R6+,R5
	ANDI R5,>FF00
	CI   R5,OBOS		CHECK FOR ANOTHER BOS
	JNE  OPTLOO
	MOV  *R6,R5
	JNE  OPTLOO		WITH NO ERRORS
	DECT R6
	MOV  *RBUF,R5
	A    *R6,R5		PUT THEM TOGETHER
	AI   R5,-OBOS
	MOV  R5,R4
	ANDI R5,>FF00
	CI   R5,OBOS
	JNE  OPTLOO
	MOV  R4,*RBUF		SAVE NEW BOS HEADER
*
*  PURGE 3 WORDS FROM BUFFER STARTING AT RBUF+6
*
	MOV  RBUF,R5
	MOV  R5,RBUF2
PURGL2	EQU  $
	C    R5,@KENDB		SET IF AT END OF BUFFER-3
	JNE  PURGEW		IF NOT, PURGE A WORD FROM BUFFER
	AI   RBUF2,6		BUMP POINTER BY 3
	BL   @GETWO2		IF YES, ADD 3 NEW WORDS TO END
	MOV  R5,*RBUF2+	 	BARREL
	BL   @GETWO2
	MOV  R5,*RBUF2+
	BL   @GETWO2
	MOV  R5,*RBUF2
	JMP  DOMBOS		DO UNTIL NO MORE BOS'S
*
PURGEW	EQU  $			PURGE A WORD
	MOV  @12(RBUF2),R5
	MOV  R5,@6(RBUF2)
	INCT RBUF2
	MOV  RBUF2,R5		CHECK AGAIN FOR DONE PURGE
	JMP  PURGL2
BDOERR	EQU  $
	B    @DOERR
*
*  OPTLOO - OPTION LOOP.
*
*  THIS IS THE MAIN LOOP FOR THE PEEPHOLE OPTIMIZER INTERPRETER.
*  EACH INSTRUCTION IS FETCHED, THE INTERPRETIVE SUBROUTINE ADDRESS
*  TRANSLATED, AND THE APPRORIATE ROUTINE CALLED.
*
DOSKIP	EQU  $			Skip next word in barrel
BUMOPT	EQU  $			BUMP RBUF ENTRY
	INCT RBUF
*
OPTLOO	EQU  $
	MOV  *RPC+,R5		GET NEXT INSTR
	SRC  R5,10
	ANDI R5,>3E
	AI   R5,OPTJUM		COMPUTE TABLE JUMP ADDRESS
	MOV  *R5,R5		GET INSTRUCTION DRIVER
	B    *R5		 & GO TO IT
*
*  OPTTAB - INITIALIZE POINTERS FOR SCAN
*
DOOPT 	EQU  $
	MOV  @ABARRE,RBUF 	INIT BUFFER POINTER
	DECT RPC
	MOV  *RPC+,RERR		GET ERROR ADDRESS
	ANDI RERR,>7FF
	JEQ  OPTLOO
	AI   RERR,OPTTAS	ELSE, ADD INSTRUCTION START
	JMP  OPTLOO
*
*  CHKTBL - CHECK WORD IN BARREL WITH CONSTANT INDEX IN INSTRUCTION.
*
DOCTBL	EQU  $
	BL   @GETCON		GET VALUE TO COMPARE
	C    R6,*RBUF		SAME?
	JEQ  BUMOPT		BUMP OPTIMIZER LOOP
	JMP  DOERR2
*
*  DOCHKM - CHECK THE WORD IN THE INSTRUCTION TO THE WORD AT PBUF WITH A MASK.
*	    MASK IS FROM MASK TABLE.  IF .NE., THEN SET ERROR.
*
DOCHKM	EQU  $
	BL   @GETMAS		GET MASK
	MOV  R6,R4		AND SAVE
	INCT RPC
	BL   @GETCON		GET CONSTANT TO COMPARE
	MOV  *RBUF,R5		GET BARREL VALUE
	SZC  R4,R5		MASK VALUE
	C    R5,R6		SAME AS WANTED ?
	JEQ  BUMOPT		IF EQUAL, BUMP OPTION
	JMP  DOERR2
*
*  IGOTO  - INTERPRETED GOTO LOCATION
*
DOIGOT	EQU  $
	DECT RPC
	JMP  DOJMPP
*
*  DOERR2 - BRANCH TO ERROR ADDRESS
*
DOERR2	EQU  $
	MOV  *RPC,R2		ANY ERROR EXIT HERE
	ANDI R2,>F800
	CI   R2,ESETER		IS THIS COMMAND AN ERROR ADDRESS?
	JNE  DOERR		BRIF NO, TAKE ERROR EXIT
DOJMPP	EQU  $
	MOV  *RPC+,RPC
	ANDI RPC,>7FF		MASK ERROR ADDRESS
	AI   RPC,OPTTAS
	JMP  OPTLOO		RENTER OPTION LOOP
*
*  DOREP  - Replace the word from the instruction word
*	    into the instruction stack.
DOREP 	EQU  $
	BL   @GETCON
	DECT RBUF
	MOV  R6,*RBUF
	JMP  OPTLOO
*
*  DOREPW - Push the word from the temporary holding stack
*	    indexed by the word in the instruction into 
*	    the instruction stack.
DOREPW	EQU  $
	DECT RPC
	MOV  *RPC+,R5
	ANDI R5,>00FF     	MASK WORD TO REPLACE
	DECT RBUF
	SLA  R5,1
	AI   R5,TMPBUF    	GET WORD FROM TMPBUF
	MOV  *R5,*RBUF
BOPTLO	EQU  $
	JMP  OPTLOO
*
*  DOCOMP - Compare the word in the stack indexed by the
*	    word in the instruction to the word at the
*	    current RBUF.
DOCOMP	EQU  $
	MOV  @ABARRE,R5		COMPARE REQUESTED BARREL WORDS
	DECT RPC		FROM INSTRUCTION
	MOV  *RPC+,R6
	ANDI R6,>00FF
	SLA  R6,1
	A    R6,R5
	C    *RBUF,*R5		AND CURRENT BARREL POSITION
	JNE  DOERR2
	JMP  BUMOPT
*
*  DOACC  - Accept the optimization and remove the specified
*	    number of excess stack entries.
DOACC 	EQU  $
	DECT RPC
	MOV  *RPC,RPC
	ANDI RPC,>00FF
	NEG  RPC
	JEQ  BPEEP1
PURGEL	EQU  $
	BL   @GETWOR		GET NEXT WORD
	INC  RPC
	JNE  PURGEL
BPEEP1	EQU  $
	B    @PEEPH1		RE-ENTER PEEPHOLE OPTIMIZER
*
*  DOMOVE - Moves the stack to the temporary holding area.
DOMOVE	EQU  $
	LI   R1,TMPBUF		MOVE TO ADDRESS
	MOV  @ABARRE,R4		MOVE FROM ADDRESS
	LI   R5,KMBARS		- # WORDS TO MOVE
DOMOV1	EQU  $
	MOV  *R4+,*R1+		MOVE A WORD
	INC  R5
	JNE  DOMOV1		BRIF MORE
	JMP  BOPTLO
*
*  DOERR  - Force the interpreter to the error address last
*	    saved or return if none was specified.
DOERR 	EQU  $
	MOV  RERR,RPC
	JEQ  GETOUT		BRIF NO ERROR ADDRESS, JUST RETURN
B2OPTL	EQU  $
	B    @OPTLOO
GETOUT	EQU  $
	MOV  @PPEEPE,R11
	B    *R11		RETURN FROM PEEPHOLE
*
*  DOFXCO - Check the specified constant against fixed
*	    constant specified in the stack.
DOFXCO	EQU  $
	MOV  *RPC+,R6		GET CONSTANT IN MY PSUEDO INSTRUCTION
	MOV  *RBUF,R5		GET CONSTANT SPECIFIED
	ANDI R5,MOPCFL		MASK OPFIELD
	CI   R5,SFXCON		IS IT A FIXED CONSTANT (IN BARREL)
	JNE  BDOER2		BRIF NO
	MOV  *RBUF,R5
	ANDI R5,MADRFL		MASK ADDRESS FIELD
	INC  R5
	SLA  R5,2		*4 BYTES/ENTRY
	A    @PFXCTO,R5		+ START OF TABLE
	DECT R5
	C    R6,*R5		IS THIS THE CONSTANT ?
	JNE  BDOER2		BRIF NO
	INCT RBUF		ELSE, INC BARREL & RETURN
	JMP  B2OPTL
BDOER2	B    @DOERR2
*
*  GETMAS - Get mask from interpreted driving table
*
GETMAS	EQU  $
	DECT RPC
	MOV  *RPC+,R6
	ANDI R6,>7FF
	AI   R6,MASKS
	MOV  *R6,R6
	INV  R6			INVERT CONSTANT FOR MASK
	B    *R11
*
*  GETCON - Get constant from interpreted driving table
*
GETCON	EQU  $
	DECT RPC
	MOV  *RPC+,R6
	ANDI R6,>7FF
	AI   R6,MASKS
	MOV  *R6,R6
	B    *R11
*
*  JUMP TABLE ADDRESSES (DRIVERS)
*
OPTJUM	EQU  $
	DATA DOOPT	00: OPTTAB - OPTION TABLE INIT
	DATA DOCHKM	08: CHKCOM - COMPARE CONSTANT W/MASK
	DATA DOREP	10: REPLAC - REPLACE W/CONSTANT INDEX
	DATA DOREPW	18: REPLAW - REPLACE W/WORD IN BARREL
	DATA DOCOMP	20: COMPAR - COMPARE W/BARREL
	DATA DOACC	28: ACCEPT - ACCEPT WORDS IN BARREL
	DATA DOMOVE	30: MOVEBU - MOVE BARREL TO TEMPORARY
	DATA DOMBOS	38: CHKMBO - CHECK MULTIPLE BOS'S
	DATA DOIGOT	40: IGOTO  - INTERPRETED GOTO
	DATA DOFXCO	48: CFXCON - CHECK FIXED CONSTANT
	DATA OPTLOO	50: SETERR - SKIP TO NEXT ON SETERR
	DATA DOSKIP	58: SKIPIN - SKIP WORD IN BARREL
	DATA DOCTBL	60: CHKTBL - CHECK CONSTANT
*
	TITL 'SCRATCH FILE CACHE'
	PAGE
*
*  THIS MODULE PROVIDES DISK CACHING LOGIC FOR THE TWO
*  SCRATCH FILES 4 & 5 (SC/1FIL & SC/2FIL).
*
*  THESE SUBROUTINES INTERCEPT REQUESTS FOR OPEN FILE OR I/O
*  FOR FILES 4 & 5, AND IF THE REQUESTED RECORDS CAN FIT
*  INTO CPU RAM, AND THEN PERFORMS THE FUNCTION WITHOUT A
*  DISK ACCESS.
*
*  IF CPU RAM IS EXHAUSTED, THEN THE SUBROUTINES REVERT TO
*  NORMAL DISK UTILITIES.
*
*  DEFINITIONS:
*
	DEF  FIOC		INPUT/OUTPUT SUBROUTINE INTERCEPT
	DEF  FOPFIL		OPEN FILE SUBROUTINE INTERCEPT
*
*  REFERENCES:
*
	UNL
	IF   GENEVE
	LIST
	REF  CIO$		GENERAL INPUT/OUTPUT SUBROUTINE (MENU)
	REF  COPFI$		OPEN FILE ROUTINE (MENU)
	ENDIF
	LIST
*
*  REFERENCES FROM FORTRAN5 GLOBAL DATA AREA:
*
*  I/O LIST LAYOUT:
*
IOORDE EQU  0			ORDER CODE
IOFUNC EQU  1			FUNCTION CODE
IOLABE EQU  2			FILE #
IOBUFA EQU  4			BUFFER ADDRESS
IOBYTE EQU  6			BYTE COUNT
IORCNO EQU  8			RECORD #
*
FOPFIL	EQU  $			Compiler's entrance to open file routine
	DATA IOTWSP
	DATA FOPFI1
*
FIOC  	EQU  $			Compiler's entrance to general I/O routine
	DATA IOTWSP
	DATA FIOC1
*
FOPFI1	EQU  $
*
	MOV  *R13,R0		Get the file number desired
	MOV  @2(R13),R1		Get the PAB address specified
	CI   R0,4		IS THIS A REQUEST FOR FILE 4 ?
	JNE  TRYFI5		NO, TRY FILE 5
	MOV  R1,@F4PABA		SAVE PAB ADDRESS
	CLR  @F4OPEN		CLEAR OPEN FLAG
	MOV  @F4LOW,@F4POIN
	MOV  *R1,R5
	CI   R5,>12		GET PAB OPEN CODE
	JNE  NOTWR4		BRIF NOT A WRITE
	CLR  @F4RECS		ELSE, WRITE, #RECORDS=0
	MOV  @F4POIN,@F4END
NOTWR4	EQU  $
	JMP  ENDOPE
*
TRYFI5	EQU  $
	CI   R0,5		IS THIS A REQUEST FOR FILE 5
	JNE  TRYFIN		NO, JUST OPEN THE FILE
	MOV  R1,@F5PABA		SAVE PAB ADDRESS
	CLR  @F5OPEN		CLEAR OPEN FLAG
	MOV  @F5HIGH,@F5POIN
	MOV  *R1,R5
	CI   R5,>03		IS THIS A WRITE REQUEST ?
	JNE  NOTWR5		BRIF NO
	CLR  @F5RECS
	MOV  @F5POIN,@F5END
NOTWR5	EQU  $
	JMP  ENDOPE
*
TRYFIN	EQU  $
	BLWP @COPFI$
	JMP  ENDOP1
*
ENDOPE	EQU  $
	CLR  R1	    		ZERO ERROR CODE
ENDOP1	EQU  $
	MOV  R2,@4(R13) 	RESTORE POINTER TO FILE NAME IN VDP FOR ERROR
	MOV  R1,@2(R13)		RESTORE ERROR CODE TO USER R1
	STST R15
	RTWP
*
*  IO - PERFORM I/O FUNCTION INTERCEPT
*
FIOC1 	EQU  $
	MOV  @8(R13),R4	GET USER R4
	MOV  @IOLABE(R4),R5
	CI   R5,4		IS THIS FILE 4?
	JNE  TRYIF5		BRIF NO, TRY FILE 5
*
*  FILE 4 PROCESSING
*
	CLR  R5
	MOVB @IOFUNC(R4),R5
	CI   R5,>0500		IS IT A WRITE ?
	JNE  TRYI4R		BRIF NO, TRY A READ
	MOV  @F4OPEN,R5		IS FILE 4 OPEN ?
	JNE  ENTIO		BRIF YES
	MOV  @F4END,R5
	MOV  @IOBYTE(R4),R6
	A    R6,R5
	INC  R5
	C    R5,@F4HIGH
	JH   ENTOP4
	C    R5,@F5END		WILL THE RECORD FIT ?
	JL   TRYI4F		BRIF YES
ENTOP4	EQU  $
	SETO @F4OPEN		ELSE, OPEN FILE 4
	MOV  @F4PABA,R1		USING SAVE PAB ADDRESS
	LI   R0,4
ENTOP 	EQU  $
	BLWP @COPFI$
	MOV  R2,@4(R13)		IN CASE OF ERROR, R2 HAS FILEID POINTER
	MOV  R1,R1
	JNE  IOABOR		BRIF ERROR
ENTIO 	EQU  $			ENTER I/O FUNCTION
	MOV  @8(R13),R4	 	GET USER R4 (LOST WHEN OPFILE DONE)
	BLWP @CIO$
	JMP  ENDOP1		SAVE STATUS AND EXIT
*	
TRYI4F	EQU  $			RECORD WILL FIT
	INC  @F4RECS		INCREMENT # RECORDS IN FILE 4
	MOV  @IOBUFA(R4),R0 	MOVE FROM ADDRESS
	MOV  @F4END,R1		MOVE TO ADDRESS
	MOV  R6,R2		BYTE COUNT
	SWPB R6
	INC  R1			TEMPORARILY SKIP BYTE COUNT
	CLR  R4			BLANK STORAGE IN PROGRESS
	CLR  R5
MOVLOP	EQU  $
	MOVB *R0+,R5		GET NEXT CHARACTER
	CI   R5,>2000		IS IT A BLANK?
	JNE  NOTBLA		BRIF NO
	INC  R4			ELSE, JUST INCREMENT BLANK COUNT
	JMP  INCNXT
NOTBLA	EQU  $			WAS A BLANK COUNT IN PROGRESS?
	MOV  R4,R4
	JEQ  NOTBL1		BRIF NO
	SWPB R4			ELSE, WRITE OUT THE BLANKS
	AI   R4,>8000		WITH HIGH BIT SET
	MOVB R4,*R1+	
	CLR  R4			& RESET BLANK COUNT
NOTBL1	EQU  $
	MOVB R5,*R1+		SAVE A BYTE
INCNXT	EQU  $
	DEC  R2
	JNE  MOVLOP
*
	MOV  @F4END,R5		GET OLD END
	MOV  R1,R4
	S    R5,R1		DETERMINE BYTE COUNT (IN R5)
	SWPB R1
	MOVB R1,*R5		SAVE BYTE COUNT
	MOV  R4,@F4END
	B    @ENDOPE		RETURN TO USER VIA ERROR FREE LINK
*
TRYI4R	EQU  $			LOOK FOR A READ FUNCTION
	CI   R5,>0600
	JNE  TRYI4C		BRIF NO, LOOK FOR CLOSE
	MOV  @F4OPEN,R5		IS FILE 4 OPEN ?
	JNE  ENTIO		BRIF YES, DO I/O FUNCTION
	MOV  @F4POIN,R0		GET FILE 4 POINTER
	C    @F4END,R0		PAST END OF FILE ?
	JEQ  ENTOP4		BRIF YES, OPEN FILE & READ VIA IO
	JLT  ENTOP4		DITTO
	MOV  @IOBUFA(R4),R1
	LI   R2,40		FIRST, CLEAR THE I/O BUFFER
	LI   R5,>2020
MOVLO6	EQU  $
	MOV  R5,*R1+		BLANK 40 WORDS (80 BYTES)
	DEC  R2
	JNE  MOVLO6
	CLR  R2
	MOVB *R0+,R2		GET # BYTES TO READ
	SWPB R2
	MOV  @IOBUFA(R4),R1
	CLR  R5
	JMP  INCNX1
MOVLO1	EQU  $
	MOVB *R0+,R5		GET NEXT CHARACTER
	JLT  ISBLA1		BRIF BLANK CHARACTER
	MOVB R5,*R1+		ELSE, JUST MOVE IT TO OUTPUT BUFFER
	JMP  INCNX1		& GET NEXT CHARACTER
ISBLA1	EQU  $			FOR BLANKS, JUST SKIP THE SPECIFIED CHARACTERS
	SWPB R5
	ANDI R5,>7F		REMOVE HIGH BIT
	A    R5,R1
INCNX1	EQU  $
	DEC  R2
	JNE  MOVLO1
	MOV  R0,@F4POIN		UPDATE POINTER TO NEXT RECORD
	JMP  COMRTN
*
TRYI4C	EQU  $
	MOV  @F4OPEN,R1		SEE IF FILE 4 OPEN
	JNE  ENTIO
COMRTN	EQU  $
	B    @ENDOPE
IOABOR	EQU  $
	B    @ENDOP1
*
*  FILE 5 PROCESSING
*
TRYIF5	EQU  $
	CI   R5,5		IS IT FILE 5 ?
	JNE  ENTIO		BRIF NO, DO STANDARD I/O
	CLR  R5
	MOVB @IOFUNC(R4),R5
	CI   R5,>0100		IS IT A WRITE ?
	JNE  TRYI5R		BRIF NO, TRY A READ
	MOV  @F5OPEN,R5		IS FILE 5 OPEN ?
	JNE  ENTIO5		BRIF YES
	MOV  @F5END,R5
	LI   R6,80		ALWAYS ASSUME 80 BYTE RECORDS
	S    R6,R5
	C    R5,@F5LOW		WILL THE RECORD FIT ?
	JLT  ENTOP5		BRIF NO
	C    @F4END,R5		WILL THE RECORD FIT ?
	JL   TRYI5F		BRIF YES
ENTOP5	EQU  $
	SETO @F5OPEN		ELSE, OPEN FILE 5
	MOV  @F5PABA,R1		USING SAVED PAB ADDRESS
	LI   R0,5
	BLWP @COPFI$
	MOV  R2,@4(R13)		IN CASE OF ERROR, R2 HAS FILEID POINTER
	MOV  R1,R1	
	JNE  IOABOR		BRIF ERROR
ENTIO5	EQU  $			ENTER I/O FUNCTION
	MOV  @8(R13),R0		COMMAND STACK ADDRESS
	LI   R1,F5STAC		MY COMMAND STACK ADDRESS
	LI   R2,8
MOVLO3	EQU  $
	MOVB *R0+,*R1+		MOVE COMMAND STACK
	DEC  R2
	JNE  MOVLO3
	MOV  *R0+,R5		GET FILE POINTER
	S    @F5RECS,R5	 	- NUMBER RECORDS IN CPU RAM
	MOV  R5,*R1+	 	INTO MY COMMAND STACK
	LI   R4,F5STAC
	BLWP @CIO$
	B    @ENDOP1		SAVE STATUS AND EXIT
*
TRYI5F	EQU  $			RECORD WILL FIT
	INC  @F5RECS		INCREMENT # RECORDS IN FILE 4
	MOV  @IOBUFA(R4),R0 	MOVE FROM ADDRESS
	MOV  @F5END,R1		MOVE TO ADDRESS
	S    R6,R1		START RECORD ADDRESS
	MOV  R1,@F5END
	MOV  R6,R2		BYTE COUNT
MOVLO4	EQU  $
	MOVB *R0+,*R1+		SAVE A BYTE
	DEC  R2
	JNE  MOVLO4
	JMP  COMRTN		RETURN TO USER VIA ERROR FREE LINK
*
TRYI5R	EQU  $			LOOK FOR A READ FUNCTION
	CI   R5,>0600
	JNE  TRYI5C		BRIF NO, LOOK FOR CLOSE
	MOV  @IORCNO(R4),R5  	GET REQUESTED RECORD #
	INC  R5			+1 FOR ZERO OFFSET
	C    R5,@F5RECS		RECORD IN MEMORY ?
	JGT  TRYI5O
	MOV  @IOBYTE(R4),R2
	MPY  R2,R5
	MOV  @F5HIGH,R5		OFFSET INTO FILE 5
	S    R6,R5		START OF RECORD
	MOV  @IOBUFA(R4),R1
MOVLO5	EQU  $
	MOVB *R5+,*R1+		GET THE RECORD
	DEC  R2
	JNE  MOVLO5
	JMP  COMRTN		READ SUCCESSFUL
*
TRYI5O	EQU  $
	MOV  @F5OPEN,R5		IS FILE 4 OPEN ?
	JNE  ENTIO5		BRIF YES, DO I/O FUNCTION
	JMP  ENTOP5		ELSE, OPEN & PERFORM I/O
*
TRYI5C	EQU  $
	MOV  @F5OPEN,R1		SEE IF FILE 4 OPEN
	JNE  ENTIO5		IF YES, DO REAL I/O
	JMP  COMRTN		ELSE, JUST EXIT
	TITL 'OPTIMIZER TABLES'
*
*  OPTTAS - PEEPHOLE OPTIMIZER DRIVING TABLES START
*
OPTTAS	EQU  $
	OPTTAB	TRYNX1     TRY FOR INTEGER COMPARE TO 0
	CHKCOM	KFFFE,KOLDA	* 0 LOAD OF VALUE
	CHKCOM	KFF00,KLIVAL	* 1
	CHKTBL	KOCP		* 2 COMPARE TO ZERO
	CFXCON	0		* 3
	CHKTBL	KOEQ		* 4 .EQ.
	CHKTBL	KOJEQ		* 5 JEQ LBL1
	CHKCOM	KFF00,KLLOCA	* 6
	CHKTBL	KOB		* 7 JMP LBL2
	CHKCOM	KFF00,KLLABE	* 8
	MOVEBU	0
	REPLAW	6
	REPLAW	7		* JMP LBL1
	REPLAW	8
	REPLAW	5		* JEQ LBL2
	REPLAW	1
	REPLAW	0		* LOAD
	ACCEPT	3		* 6 WORDS REPLACING 9
*
TRYNX1	EQU  $
	OPTTAB	TRYNX2     TRY FOR INTEGER COMPARE TO 0
	CHKCOM	KFFFE,KOLDA	* 0 LOAD OF VALUE
	CHKCOM	KFF00,KLIVAL	* 1
	CHKTBL	KOCP		* 2 COMPARE TO K0
	CFXCON	0		* 3
	CHKTBL	KONE		* 4 .NE.
	CHKTBL	KONOT1		* 5 .NOT.
	CHKTBL	KONOT2		* 6 .NOT.
	CHKTBL	KOJEQ		* 7 JEQ LBL1
	CHKCOM	KFF00,KLLOCA	* 8
	CHKTBL	KOB		* 9 JMP LBL2
	CHKCOM	KFF00,KLLABE	* 10
	MOVEBU	0
	REPLAW	8
	REPLAW	9		* JMP LBL1
	REPLAW	10
	REPLAW	7		* JEQ LBL2
	REPLAW	1
	REPLAW	0		* LOAD
	ACCEPT	5		* 6 WORDS REPLACING 11
*
TRYNX2	EQU  $
	OPTTAB	TRYNX3		TRY FOR INTEGER COMPARE TO ZERO
	CHKTBL	KOLDA		*0 LOAD OF 0
	CFXCON	0		*1
	CHKTBL	KOCP		*2 COMPARE TO VALUE
	CHKCOM	KFF00,KLIVAL	*3
	CHKTBL	KOEQ		*4 .EQ.
	CHKTBL	KOJEQ		*5 JEQ LBL1
	CHKCOM	KFF00,KLLOCA	*6
	CHKTBL	KOB		*7 JMP LBL2
	CHKCOM	KFF00,KLLABE	*8
	MOVEBU	0
	REPLAW	6
	REPLAW	7		*JMP LBL1
	REPLAW	8
	REPLAW	5		*JEQ LBL2
	REPLAW	3
	REPLAW	0		*LOAD
	ACCEPT	3		*6 WORDS REPLACING 9
*
TRYNX3	EQU  $
	OPTTAB	TRYNX4		TRY FOR INTEGER COMPARE TO ZERO
	CHKTBL	KOLDA		*0 LOAD OF 0
	CFXCON	0		*1
	CHKTBL	KOCP		*2 COMPARE TO VALUE
	CHKCOM	KFF00,KLIVAL	*3
	CHKTBL	KONE		*4 .NE.
	CHKTBL	KONOT1		*5 .NOT.
	CHKTBL	KONOT2		*6 .NOT.
	CHKTBL	KOJEQ		*7 JEQ LBL1
	CHKCOM	KFF00,KLLOCA	*8
	CHKTBL	KOB		*9 JMP LBL2
	CHKCOM	KFF00,KLLABE	*10
	MOVEBU	0
	REPLAW	8
	REPLAW	9		*JMP LBL1
	REPLAW	10
	REPLAW	7		*JEQ LBL2
	REPLAW	3
	REPLAW	0		*LOAD
	ACCEPT	5
*
TRYNX4	EQU  $
	OPTTAB	TRYMUI		TRY FOR INTEGER COMPARE TO ZERO
	CHKTBL	KOB		*0 JMP LAB1
	SKIPIN	0			*1
	CHKTBL	KOLAB
	SETERR	CHKSTM
	COMPAR	1		*3
	MOVEBU	0
	REPLAW	3
	REPLAW	2
	ACCEPT	2		*2 WORDS REPLACING 4
*
CHKSTM	EQU  $
	CHKCOM	KFF00,KOBOS
	CHKTBL	K0
	SKIPIN	0
	CHKTBL	KOLAB		*2 LABEL DEF
	COMPAR	1		*3
	ACCEPT	2		*2 WORDS REPLACING 4
*
*  THE FOLLOWING FINDS MULTIPLE ADDRESS CALCULATION
*  OF INTEGER ARRAYS, E.G.:
*
*	 IARRAY(I) = IARRAY(I) + 1
*
TRYMUI	EQU  $
	OPTTAB	TRYMUR
	CHKCOM	KFFFE,KOLDA	*0 LOAD
	SKIPIN	0		*1 SOMETHING
	CHKTBL	KOMU02		*2 A R5,R5
	IGOTO	MULTCO
*
*  TRY FOR REAL ARRAY
*
TRYMUR	EQU  $
	OPTTAB	TRYMUD
	CHKCOM	KFFFE,KOLDA	*0 LOAD
	SKIPIN	0		*1  SOMETHING
	CHKTBL	KOMU04		*2 SLA R5,2
	IGOTO	MULTCO
*
*  TRY FOR DOUBLE PRECISION ARRAY
*
TRYMUD	EQU  $
	OPTTAB	TRYSTN
	CHKCOM	KFFFE,KOLDA	*0 LOAD
	SKIPIN	0		*1  SOMETHING
	CHKTBL	KOMU08		*2 SLA R5,4
*
MULTCO	EQU  $		TRY MULTIPLE CONTINUE
	CHKCOM	KFFFE,KOADD	*3 ADD SOMETHING
	SKIPIN	0		*4
	CHKTBL	KOSTA		*5 STORE SOMEWHERE
	SKIPIN	0		*6
	COMPAR	0		*7 SAME SEQUENCE AGAIN
	COMPAR	1		*8
	COMPAR	2		*9
	COMPAR	3		*10
	COMPAR	4		*11
	COMPAR	5
	MOVEBU	0
	REPLAW	12
	REPLAW	6
	REPLAW	5
	REPLAW	4
	REPLAW	3
	REPLAW	2
	REPLAW	1
	REPLAW	0
	ACCEPT	5		*   SAVE 5 WORDS
*
*  THE FOLLOWING REPLACES AN ASSIGN OF ZERO TO A VARIABLE WITH
*  A SIMPLE CLR @ STATEMENT.
*
TRYSTN	EQU  $
	OPTTAB	TRYSTM
	CHKTBL  KOLDA		* 0 LOAD SOMETHING
	CFXCON	0		* 1 0
	CHKTBL  KOSTA		* 2 STORE
	SKIPIN	0		* 3 SOMEWHERE
	MOVEBU  0		* MOVE BUFFER TO TEMPORARY
	REPLAW  3		* SOMEWHERE
	REPLAC  KOCLA		* CLR @
	ACCEPT  2		* SAVE 2 WORDS
*
*  THE FOLLOWING REPLACES AN ASSIGN OF -1 TO A VARIABLE WITH A
*  SIMPLE SETO @ STATEMENT.
*
TRYSTM	EQU  $
	OPTTAB	TRYSTL
	CHKTBL	KOLDA		* 0 LOAD
	CFXCON	-1		* 1  CONSTANT -1
	CHKTBL	KOSTA		* 2 STORE
	SKIPIN	0		* 3 SOMEWHERE
	MOVEBU  0		* MOVE BUFFER TO TEMPORARY
	REPLAW  3		* SOMEWHERE
	REPLAC  KOSETO		* SETO @
	ACCEPT  2		* SAVE 2 WORDS
*
*  TRY FOR A MOV @X,@Y AS A REPLACEMENT TO A  MOV @X,R5, MOV R5,@Y.
*
TRYSTL	EQU  $
	OPTTAB  TRYSTK
	CHKTBL	KOLDA		* 0 LOAD DIRECT
	CHKCOM  KOPCAT,KOVIN0	* 1  AN INTEGER *2 VARIABLE
	CHKTBL	KOSTA		* 2 STORE
	SKIPIN	0		* 3 SOMEWHERE
	MOVEBU	0
	REPLAW	3		* SOMEWHERE
	REPLAW	1		* SOMEWHERE
	REPLAC	KOMOV		* MOVE
	ACCEPT  1		* SAVE ONE WORD
*
*  SAME THING FOR BYTE LOADS,  MOVB @X,@Y
TRYSTK	EQU  $
	OPTTAB	TRYSTO
	CHKTBL	KOLDA		* 0 LOAD DIRECT
	CHKCOM  KOPCAT,KOVBY0	* 1  AN INTEGER *1 VARIABLE
	CHKTBL	KOSTA		* 2 STORE DIRECT
	SKIPIN	0		* 3  SOMEWHERE
	MOVEBU  0
	REPLAW	3		* SOMEWHERE
	REPLAW	1		* SOMEWHERE
	REPLAC  KOMOV		* MOVE
	ACCEPT  1		* SAVE 1 WORD
*
*  THE FOLLOWING TRIES FOR MULTIPLE STORES OF SAME THING,
*  E.G.    I=0, J=0, K=0  ELIMINATES 2 LOADS
*
TRYSTO	EQU  $
	OPTTAB	TRYNXO
	CHKCOM	KFFFE,KOLDA	* 0 LOAD OF SOMETHING
	SKIPIN	0		* 1
	CHKCOM	KFFFE,KOSTA	* 2 STORE SOMEWHERE
	SKIPIN	0		* 3
	CHKMBO  0		ELIMINATE MULTIPLE BOS
	CHKCOM	KFF00,KOBOS	* 4 BOS
	SKIPIN	0		* 5
	SKIPIN	0		* 6
	COMPAR	0		* 7 LOAD OF SAME THING
	COMPAR	1		* 8
	CHKCOM	KFFFE,KOSTA	* 9 STORE SOMEWHERE
	SKIPIN	0		*10
	CHKMBO  0		ELIMINATE MULTIPLE BOS
	CHKCOM	KFF00,KOBOS	*11 BOS
	SKIPIN	0		*12
	SKIPIN	0		*13
	MOVEBU	0
	COMPAR	0		*14 LOAD OF SAME THING
	SETERR	ONETIM
	COMPAR	1
	SETERR	ONETI2		*15
	CHKCOM	KFFFE,KOSTA	*16 STORE SOMEWHERE
	SETERR	ONETI3
	SKIPIN	0		*17
*
	CHKCOM	KFF00,KOBOS	*18 END OF STATEMENT
	SETERR	ONETI4
	REPLAW	18		*BOS
	REPLAW	17
	REPLAW	16		*STORE
	REPLAW	13
	REPLAW	12
	REPLAW	11		*BOS
	REPLAW	10
	REPLAW	9		*STORE
	REPLAW	6
	REPLAW	5
	REPLAW	4		*BOS
	REPLAW	3
	REPLAW	2		*STORE
	REPLAW	1
	REPLAW	0		*LOAD
	ACCEPT	4		*2 LOADS ELIMINATED
*
ONETI4	EQU  $
	REPLAW	17
	REPLAW	16		*PUT STORE BACK
ONETI3	EQU  $
	REPLAW	15
ONETI2	EQU  $
	REPLAW	14		*PUT LOAD BACK
ONETIM	EQU  $
	REPLAW	13
	REPLAW	12
	REPLAW	11		*BOS
	REPLAW	10
	REPLAW	9		*STORE
	REPLAW	6
	REPLAW	5
	REPLAW	4		*BOS
	REPLAW	3
	REPLAW	2		*STORE
	REPLAW	1
	REPLAW	0		*LOAD
	ACCEPT	2		*1 LOAD ELIMINATED
*
*  THE FOLLOWING FINDS CASES WHERE A STORE IS
*  FOLLOWED BY A LOAD OF THE SAME THING, E.G.:
*
*      I = 1
*      J = I
*
*  THE LOAD OF I (IN 2ND STATEMENT) IS ELIMINATED
*
TRYNXO	EQU  $
	OPTTAB	TICUS0
	CHKTBL	KOSTA		* 0 STORE OF SOMETHING
	SKIPIN	0		* 1
	CHKMBO  0		*   ELIMINATE MULTIPLE BOS'S
	CHKCOM	KFF00,KOBOS	* 2 BOS
	SKIPIN	0		* 3
	SKIPIN	0		* 4
	CHKTBL	KOLDA		* 5 LOAD SAME THING
	COMPAR	1		* 6
	MOVEBU	0
	REPLAW	4
	REPLAW	3
	REPLAW	2		* BOS
	REPLAW	1
	REPLAW	0		* STORE SOMETHING
	ACCEPT	2		* 1 LOAD ELIMINATED
*
*  CUSTOM TI VERSION OF TABLES
*
*  0 - COMPARE WITH CONSTANT
*
*      E.G. IF ( I .EQ. 1 ) GOTO 1000
*
*
*	 OLD	     NEW
*
*      MOV  @I,R5     MOV  @I,R5
*      CI   R5,1      CI   R5,1
*      CLR  R5	      JEQ  LABEL2
*      JEQ  $+2	      JMP  LABEL1
*      SETO R5
*      NEG  R5
*      JEQ  LABEL1
*      JMP  LABEL2
*
TICUS0	EQU  $
	OPTTAB	TICUS1
	CHKCOM	KFFFE,KOLDA	* 0 LOAD OF SOMETHING
	CHKCOM	KFF00,KLIVAL	* 1
	IGOTO	TICU0A
*
TICUS1	EQU  $
	OPTTAB	TICUS2
	CHKCOM	KFFFE,KOLDA	* 0 LOAD OF SOMETHING
	CHKCOM	KFF00,KLCVAL	* 1
TICU0A	EQU  $
	CHKTBL	KOCP		* 2 COMPARE TO SOMETHING
	SKIPIN	0		* 3
	CHKTBL	KOEQ		* 4 .EQ.
	CHKTBL	KOJEQ		* 5 JEQ
	CHKCOM	KFF00,KLLOCA	* 6 (MADE) LABEL1
	CHKTBL	KOB		* 7 JMP
	CHKCOM	KFF00,KLLABE	* 8 LABEL2
	MOVEBU	0
	REPLAW	6		*
	REPLAW	7		* JMP LABEL2
	REPLAW	8		*
	REPLAW	5		* JEQ LABEL1
	REPLAW	3		*
	REPLAW	2		* COMPARE
	REPLAW	1		*
	REPLAW	0		* MOV @X,R5
	ACCEPT	1		* 1 WORD SAVED
*
*  2 - ADD OF 1 AT END OF DO LOOP
*
*      DO 100 I=1,100,  100 CONTINUE
*
*
*	 OLD	     NEW
*
*      MOV  @I,R5     INC  @I
*      AI   R5,1      MOV  @I,R5
*      MOV  R5,@I     LI   R6,100
*      LI   R6,100    S    R6,R5
*      S    R6,R5
*
*
TICUS2	EQU  $
	OPTTAB	TICUS3
	CHKTBL	KOLDA		* 0 LOAD DIRECT
	CHKCOM  KTYPEF,KINTYP   * 1  AN INTEGER *2 TYPE SOMETHING
	CHKTBL	KOADD		* 2 ADD DIRECT
	CFXCON	1		* 3  CONSTANT 1
	CHKTBL	KOSTA		* 4 STORE
	COMPAR	1		* 5  SAME CELL AS LOADED
	CHKCOM	KFFFE,KOSUB	* 6 SUBTRACT DIRECT OR INDIRECT
	SKIPIN	0  		* 7  SOMETHING
	MOVEBU	0
	REPLAW	7		*   SUBTRACT
	REPLAW	6		*    SOMETHING
	REPLAW	5		*   LOAD
	REPLAW	0		*    SOMETHING
	REPLAW	5		*   INCREMENT
	REPLAC	KOINC  		*    SOMETHING
	ACCEPT	2		* SAVE TWO WORDS
*
*  3 - ADD OF 1
*
*      I = I + 1
*
*
*	 OLD	     NEW
*
*      MOV  @I,R5     INC  @I
*      AI   R5,1
*      MOV  R5,@I
*
*
TICUS3	EQU  $
	OPTTAB	TICUS4
	CHKTBL	KOLDA		* 0 LOAD DIRECT
	CHKCOM  KTYPEF,KINTYP   * 1  AN INTEGER *2 SOMETHING
	CHKTBL	KOADD		* 2 ADD
	CFXCON	1		* 3  CONSTANT 1
	CHKTBL	KOSTA		* 4 STORE
	COMPAR	1		* 5  SAME CELL AS LOADED
	MOVEBU	0  		*
	REPLAW	5		*   INC
	REPLAC	KOINC  		*    SOMETHING
	ACCEPT	4		* SAVE 4 WORDS
*
*
*  2 - ADD OF 2 AT END OF DO LOOP
*
*      DO 100 I=1,100,2 100 CONTINUE
*
*
*	 OLD	     NEW
*
*      MOV  @I,R5     INCT @I
*      AI   R5,2      MOV  @I,R5
*      MOV  R5,@I     LI   R6,100
*      LI   R6,100    S    R6,R5
*      S    R6,R5
*
*
TICUS4	EQU  $
	OPTTAB	TICUS5
	CHKTBL	KOLDA		* 0 LOAD
	CHKCOM  KTYPEF,KINTYP   * 1  AN INTEGER *2 SOMETHING
	CHKTBL	KOADD		* 2 ADD
	CFXCON	2		* 3  CONSTANT 2
	CHKTBL	KOSTA		* 4 STORE
	COMPAR	1		* 5  SAME CELL AS LOADED
	CHKCOM	KFFFE,KOSUB	* 6 SUBTRACT
	SKIPIN	0  		* 7  SOMETHING
	MOVEBU	0
	REPLAW	7		* SUBTRACT
	REPLAW	6		*  SOMETHING
	REPLAW	5		* LOAD
	REPLAW	0		*  SOMETHING
	REPLAW	5		* INCREMENT BY 2
	REPLAC	KOINC2		*  SOMETHING
	ACCEPT	2		* SAVE TWO WORDS
*
*  5 - ADD OF 2
*
*      I = I + 2
*
*
*	 OLD	     NEW
*
*      MOV  @I,R5     INCT @I
*      AI   R5,1
*      MOV  R5,@I
*
*
TICUS5	EQU  $
	OPTTAB	TICUS6
	CHKTBL	KOLDA		* 0 LOAD
	CHKCOM  KTYPEF,KINTYP   * 1  AN INTEGER *2 SOMETHING
	CHKTBL	KOADD		* 2 ADD
	CFXCON	2		* 3  CONSTANT 2
	CHKTBL	KOSTA		* 4 STORE
	COMPAR	1		* 5  SAME CELL AS LOADED
	MOVEBU	0  		*
	REPLAW	5		* INCT
	REPLAC	KOINC2		*  SOMETHING
	ACCEPT	4		* SAVE 4 WORDS
*
*  6 - DECREMENT BY 1
*
*      I = I - 1
*
*	  OLD	        NEW
*
*      MOV  @I,R5     DEC  @I
*      LI   R6,1
*      NEG  R6
*      A    R6,R5
*      MOV  R5,@I
*
*
TICUS6	EQU  $
	OPTTAB	TICUS7
	CHKCOM	KFFFE,KOLDA	* 0 LOAD
	CHKCOM  KTYPEF,KINTYP   * 1  AN INTEGER *2 SOMETHING
	CHKTBL	KOSUB		* 2 SUBTRACT
	CFXCON	1		* 3  CONSTANT 1
	CHKTBL	KOSTA		* 4 STORE
	COMPAR	1		* 5  SAME CELL AS LOADED
	MOVEBU	0  		*
	REPLAW	5		* DEC
	REPLAC	KODEC 		*  SOMETHING
	ACCEPT	4		* SAVE 4 WORDS
*
*  7 - DECREMENT BY 2
*
*      I = I - 2
*
*	  OLD	         NEW
*
*      MOV  @I,R5     DECT @I
*      LI   R6,2
*      NEG  R6
*      A    R6,R5
*      MOV  R5,@I
*
*
TICUS7	EQU  $
	OPTTAB	TICUSA
	CHKCOM	KFFFE,KOLDA	* 0 LOAD
	CHKCOM  KTYPEF,KINTYP   * 1  AN INTEGER *2 SOMETHING
	CHKTBL	KOSUB		* 2 SUBTRACT
	CFXCON	2		* 3  CONSTANT 2
	CHKTBL	KOSTA		* 4 STORE
	COMPAR	1		* 5  SAME CELL AS LOADED
	MOVEBU	0  		*
	REPLAW	5		*   DECT
	REPLAC	KODEC2		*    SOMETHING
	ACCEPT	4		* SAVE 4 WORDS
*
* A - REPLACE INDIRECT THROUGH TEMPORARY
*
*  E.G.  N = IARRAY(K)
*
*      OLD		   NEW
*
*   MOV  R5,@TEMP1	MOV *R5,R5
*   MOV  @TEMP1,R5
*   MOV  *R5,R5
*
TICUSA	EQU  $
	OPTTAB	TICUA1
	CHKTBL	KOSTA		* 0 STORE
	CHKCOM  KTYPEF,KINTYP   * 1  AN INTEGER *2 SOMETHING
	CHKTBL	KOLDA1     	* 2 LOAD INDIRECT
	COMPAR	1		* 3  SAME PLACE AS STORED
	MOVEBU	0  		*  SAVE BUFFER
	REPLAC	KOINDR		*  MOV *R5,R5
	ACCEPT	3		*  SAVE 3 WORDS
*
*  REPLACE OF LOGICAL LOAD THROUGH TEMPORARY (FIRST THREE TEMPORARIES ONLY)
*
TICUA1	EQU  $
	OPTTAB	TICUA2
	CHKTBL	KOSTA		* 0 STORE
	CHKTBL	KOATEM     	*    INTO 1ST TEMPORARY
	CHKTBL	KOLDA1     	* 2 LOAD INDIRECT
	CHKTBL	KOALOG     	*    LOGICAL FROM 1ST TEMPORARY
	MOVEBU	0
	REPLAC	KOINDR		* REPLACE W/MOV *R5,R5
	ACCEPT	3		* SAVE 3 WORDS
*
TICUA2	EQU  $
	OPTTAB	TICUA3
	CHKTBL	KOSTA		* 0 STORE
	CHKTBL	KOATE1     	*   INTO 2ND TEMPORARY
	CHKTBL	KOLDA1     	* 2 LOAD INDIRECT
	CHKTBL	KOALO1     	*   LOGICAL FROM 2ND TEMPORARY
	MOVEBU	0
	REPLAC	KOINDR		* REPLACE W/MOV *R5,R5
	ACCEPT	3		* SAVE 3 WORDS
*
TICUA3	EQU  $
	OPTTAB	TICUA4
	CHKTBL	KOSTA		* 0 STORE
	CHKTBL	KOATE2		*   INTO 3RD TEMPORARY
	CHKTBL	KOLDA1		* 2 LOAD INDIRECT
	CHKTBL	KOALO2		*   LOGICAL FROM 3RD TEMPORARY
	MOVEBU  0
	REPLAC  KOINDR		* REPLACE W/MOV *R5,R5
	ACCEPT  3		* SAVE 3 WORDS
*
*  REPLACE OF INTEGER *1 LOAD THROUGH TEMPORARY (FIRST TWO TEMPORARIES ONLY)
*
TICUA4	EQU  $
	OPTTAB  TICUA5
	CHKTBL	KOSTA		* 0 STORE
	CHKTBL	KOATEM		*   INTO FIRST TEMPORARY
	CHKTBL	KOLDA1		* 2 LOAD INDIRECT
	CHKTBL	KOABYT		*   BYTE FROM FIRST TEMPORARY
	MOVEBU  0
	REPLAC  KBINDR		* REPLACE W/MOVB *R5,R5
	ACCEPT  3		* SAVE 3 WORDS
*
TICUA5	EQU  $
	OPTTAB	TICUA6
	CHKTBL	KOSTA		* 0 STORE
	CHKTBL	KOATE1		*   INTO SECOND TEMPORARY
	CHKTBL	KOLDA1		* 2 LOAD INDIRECT
	CHKTBL	KOABY1		*   BYTE FROM SECOND TEMPORARY
	MOVEBU  0
	REPLAC  KBINDR		* REPLACE W/MOVB *R5,R5
	ACCEPT  3		* SAVE 3 WORDS
*
TICUA6	EQU  $
	OPTTAB	TICUSB
	CHKTBL	KOSTA		* 0 STORE
	CHKTBL	KOATE2		*   INTO THIRD TEMPORARY
	CHKTBL	KOLDA1		* 2 LOAD INDIRECT
	CHKTBL	KOABY2		*   BYTE FROM THIRD TEMPORARY
	MOVEBU  0
	REPLAC  KBINDR		* REPLACE W/MOVB *R5,R5
	ACCEPT  3
*
*  B - REPLACE ADD OF 1,2 W/ INC R5
*
TICUSB	EQU  $
	OPTTAB	TICUSB1
	CHKTBL	KOADD		* 0 ADD
	CFXCON	1		*   1  OF 1
	MOVEBU	0
	REPLAC	KOINCR		* REPLACE W/INCR R5
	ACCEPT	1
*
TICUSB1 EQU  $
	OPTTAB  TICUSC
	CHKTBL  KOADD		* 0 ADD
	CFXCON  1		* 1  OF 2
	MOVEBU	0
	REPLAC	KOINCR2		* REPLACE W/INCT R5
	ACCEPT  1
*
*  C - REPLACE SUB OF 1,2 W/ DEC R5
*
TICUSC	EQU  $
	OPTTAB	TICUSC1
	CHKTBL	KOSUB		* 0 SUBTRACT
	CFXCON	1		* 1   OF 1
	MOVEBU	0
	REPLAC	KODECR		* REPLACE W/DECR R5
	ACCEPT	1
*
TICUSC1 EQU  $
	OPTTAB	TICUSD		* SUBTRACT
	CHKTBL	KOSUB		* 1   OF 2
	CFXCON  2
	MOVEBU	0
	REPLAC	KODECR2		* REPLACE W/DECT R5
	ACCEPT	1
*
*  D - REMOVE .NE. IN IF STATEMENTS
*
*  E.G.  IF ( IVAL .NE. 1 ) THEN
*
*	OLD		      NEW
*
*	MOV  @IVAL,R5     MOV @IVAL,R5
*	CI   R5,1	  CI  R5,1
*	SETO R5	          JEQ $+2
*	JEQ  $+1	  B   @LABEL
*	CLR  R5
*	NEG  R5
*	JEQ  $+2
*	B    @LABEL
*
TICUSD	EQU  $
	OPTTAB	TICUD1
	CHKCOM	KFFFE,KOLDA	* 0 LOAD
	CHKCOM	KFF00,KLIVAL	* 1  INTEGER
	CHKTBL	KOCP 		* 2 COMPARE
	SKIPIN	0  		* 3  TO INTEGER SOMETHING
	CHKTBL	KONE 		* 4 .NE.
	CHKTBL	KOJEQ		* 5 JEQ TO LABEL
	MOVEBU	0
	REPLAW	5		* 5 JEQ
	REPLAW	3		* 3  TO INTEGER
	REPLAW	2		* 2 COMPARE
	REPLAW	1		* 1  INTEGER
	REPLAW	0		* 0 LOAD
	ACCEPT	1		* SAVE 1 WORD
*
* D1- REMOVE COMPARE W/0, not needed on ti-99/4a
*
TICUD1	EQU  $
	OPTTAB	TICUSE
	CHKTBL	KOCP  		* 0 COMPARE
	CFXCON	0		* 1   OF 0
	MOVEBU	0
	ACCEPT	2		* REMOVE 2 WORDS
*
*  TICUSE - START OF MULTIPLY CHECKS BY POWER
*	    OF 2 REPLACED W/SHIFT INSTRUCTIONS
*
TICUSE	EQU  $
	OPTTAB	TICUSF
	CHKTBL	KOMUL      	* 0 MULTIPLY
	CFXCON	2   		* 1 TIMES 2
	MOVEBU	0
	REPLAC	KOMU02     	* A R5,R5
	ACCEPT	1   		* REPLACES 1 WORD
*
TICUSF	EQU  $
	OPTTAB	TICUSG
	CHKTBL	KOMUL      	* 0 MULTIPLY
	CFXCON	4   		* 1 TIMES 4
	MOVEBU	0
	REPLAC	KOMU04
	ACCEPT	1
*
TICUSG	EQU  $
	OPTTAB	TICUSH
	CHKTBL	KOMUL      	* 0 MULTIPLY
	CFXCON	8   		* 1 TIMES 8
	MOVEBU	0
	REPLAC	KOMU08
	ACCEPT	1
*
TICUSH	EQU  $
	OPTTAB	TICUSI
	CHKTBL	KOMUL      	* 0 MULTIPLY
	CFXCON	16  		* 1 TIMES 16
	MOVEBU	0
	REPLAC	KOMU16
	ACCEPT	1
*
TICUSI	EQU  $
	OPTTAB	TICUSJ
	CHKTBL	KOMUL      	* 0 MULTIPLY
	CFXCON	32  		* 1 TIMES 32
	MOVEBU	0
	REPLAC	KOMU32
	ACCEPT	1
*
TICUSJ	EQU  $
	OPTTAB	TICUSK
	CHKTBL	KOMUL      	* 0 MULTIPLY
	CFXCON	64  		* 1 TIMES 64
	MOVEBU	0
	REPLAC	KOMU64
	ACCEPT	1
*
TICUSK	EQU  $
	OPTTAB	TICUSL
	CHKTBL	KOMUL      	* 0 MULTIPLY
	CFXCON	128 		* 1 TIMES 128
	MOVEBU	0
	REPLAC	KOM128
	ACCEPT	1
*
TICUSL	EQU  $
	OPTTAB	TIADR1
	CHKTBL	KOMUL      	* 0 MULTIPLY
	CFXCON	256 		* 1 TIMES 256
	MOVEBU	0
	REPLAC	KOM256
	ACCEPT	1
*
* ADR1 - REPLACE STORE THROUGH ADDRESS TEMP W/REGISTERS
* ADR2 - SAME AS ADR1 FOR LOGICAL STORE 1
*
*   E.G.    IARRAY(I) = 0
*
*      OLD		 NEW
*
*    MOV  @I,R5	   	MOV  @I,R5
*    A    R5,R5	   	A    R5,R5
*    AI   R5,BASE	AI   R5,BASE
*    MOV  R5,@TEMP1     MOV  R5,R7
*    LI   R5,0	    	LI   R5,0
*    MOV  @TEMP1,R6     MOV  R5,*R7
*    MOV  R5,*R6
*
TIADR1	EQU  $
	OPTTAB	TIADR2
	CHKTBL	KOSTA		* 0 STORE
	CHKTBL	KOATEM		* 1  THROUGH FIRST TEMP ADDRESS
	CHKCOM	KFFFE,KOLDA	* 2 LOAD
	SKIPIN	0		* 3  SOMETHING
	CHKTBL	KOSTA1		* 4 STORE INDIRECT
	COMPAR	1    		* 5  THROUGH FIRST TEMP
	IGOTO	TIAD1A
*
TIADR2	EQU  $
	OPTTAB	TIADR3
	CHKTBL	KOSTA		* 0 STORE
	CHKTBL	KOATE1		* 1  THROUGH FIRST TEMP ADDRESS
	CHKCOM	KFFFE,KOLDA	* 2 LOAD
	SKIPIN	0		* 3  SOMETHING
	CHKTBL	KOSTA1		* 4 STORE INDIRECT
	COMPAR	1    		* 5  THROUGH 2ND TEMP
	IGOTO	TIAD2A
*
TIADR3	EQU  $
	OPTTAB	TIADR4
	CHKTBL	KOSTA		* 0 STORE
	CHKTBL	KOATE2		* 1  THROUGH THIRD TEMP ADDRESS
	CHKCOM	KFFFE,KOLDA	* 2 LOAD
	SKIPIN	0		* 3  SOMETHING
	CHKTBL	KOSTA1		* 4 STORE INDIRECT
	COMPAR	1    		* 5  THROUGH FIRST TEMP
	IGOTO	TIAD3A
*
TIADR4	EQU  $
	OPTTAB	TIADR5
	CHKTBL	KOSTA		* 0 STORE
	CHKTBL	KOATEM		* 1  THROUGH FIRST TEMP ADDRESS
	CHKCOM	KFFFE,KOLDA	* 2 LOAD
	SKIPIN	0		* 3  SOMETHING
	CHKTBL	KOSTA1		* 4 STORE INDIRECT LOGICAL
	CHKTBL	KOALOG		* 5  THROUGH FIRST TEMP
TIAD1A	EQU  $
	MOVEBU	0
	REPLAC	KOSTI1		* STORE INDIRECT THROUGH TEMP
	REPLAW	3    		*   SOMETHING
	REPLAW	2    		* LOAD
	REPLAC	KOSTT1		* STORE INTO TEMPORARY
	ACCEPT	2    		* SAVE TWO WORDS
*
TIADR5	EQU  $
	OPTTAB	TIADR6
	CHKTBL	KOSTA		* 0 STORE
	CHKTBL	KOATE1		* 1  THROUGH FIRST TEMP ADDRESS
	CHKCOM	KFFFE,KOLDA	* 2 LOAD
	SKIPIN	0		* 3  SOMETHING
	CHKTBL	KOSTA1		* 4 STORE INDIRECT LOGICAL
	CHKTBL	KOALO1		* 5  THROUGH 2ND TEMP
TIAD2A	EQU  $
	MOVEBU	0
	REPLAC	KOSTI2		* STORE INDIRECT THROUGH TEMP
	REPLAW	3    		*   SOMETHING
	REPLAW	2    		* LOAD
	REPLAC	KOSTT2		* STORE INTO TEMPORARY
	ACCEPT	2    		* SAVE TWO WORDS
*
TIADR6	EQU  $
	OPTTAB	TIONE1
	CHKTBL	KOSTA		* 0 STORE
	CHKTBL	KOATE2		* 1  THROUGH FIRST TEMP ADDRESS
	CHKCOM	KFFFE,KOLDA	* 2 LOAD
	SKIPIN	0		* 3  SOMETHING
	CHKTBL	KOSTA1		* 4 STORE INDIRECT LOGICAL
	CHKTBL	KOALO2		* 5  THROUGH THIRD TEMP
TIAD3A	EQU  $
	MOVEBU	0
	REPLAC	KOSTI3		* STORE INDIRECT THROUGH TEMP
	REPLAW	3    		*   SOMETHING
	REPLAW	2    		* LOAD
	REPLAC	KOSTT3		* STORE INTO TEMPORARY
	ACCEPT	2    		* SAVE TWO WORDS
*
*  TIONE1 - REPLACE OEQ W/ONE
*
*   E.G.    IF ( I .EQ. 0 ) THEN
*
*	OLD		  NEW
*
*     SETO R5	     JEQ  $+6
*     JNE  SUB86     B    @ADR1
*     CLR  R5
*SUB1 NEG  R5
*     JNE  $+6
*     B    @ADR1
*     B    @ADR2
*ADR1	EQU  $
*
TIONE1	EQU  $
	OPTTAB  OPTTAS
	CHKTBL	KOEQ 		* 0 EQUAL
	CHKTBL	KOJEQ		* 1 JEQ
	MOVEBU	0
	REPLAC	KOJNE 		* .NE.
	ACCEPT	1		* SAVE 1 WORD
F4EADR	EQU  $
	END
