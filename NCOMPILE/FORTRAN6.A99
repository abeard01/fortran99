	TITL 'FORTRAN6 - GENEVE SPECIFIC SUPPORT ROUTINES'
	IDT  'FORT6'
*
*   FORTRAN6 - GENEVE SPECIFIC SUPPORT ROUTINES.  THE FOLLOWING ROUTINES
*	       ARE INCLUDED:
*
*		SCROUT - SCREEN OUTPUT (BASED ON R4 ADDRESS)
*		SCRIN  - SCREEN INPUT
*		TSCROU - SCREEN OUTPUT (BASED ON *R13 ADDRESS)
*		OPFILE - OPEN FILE ROUTINE
*		IO     - INPUT/OUTPUT ROUTINE
*		INIT   - INITIALIZE FOR I/O, MEMORY PAGES
*		CMDSTR - GET COMMAND STRING
*		MENU   - EXIT FOR ALL PROGRAMS (BACK TO MDOS)
*
*   These routines mimic the MENU counterparts in for the TI-99/4A 
*   99 FORTRAN system.
*
*   Update History:
*
*   V1.0    21-DEC-87		INITIAL RELEASE
*
*   V1.1    10-JAN-88		ADDED UTILITY CALL TO TRANSLATE THE PASSED
*				FILE NAME IN THE OPEN ROUTINE.  THIS WILL
*				ALLOW FOR AUTOMATIC INSERTION OF SUCH THINGS
*				AS DISK NAMES, ETC.
*
*   V1.2    16-JAN-88		Moved the FSCROU routine to be inline to
*				the I/O routine.  Rewrote the WAIT routine
*				to not use the SCROUT routine.  This
*				eliminated the need for two sets of registers
*				(of the three available) in fast ram.
*
*   V1.3    02-FEB-88		Eliminated all module dependencies.  Made
*				an RORG module.
*
*   V1.4    23-FEB-88		Wrote the SCRIN portion of the I/O routine.
*				Needed due to common workspace.
*
*   V1.5    25-FEB-88		Added CURSOR positioning.  Current MDOS
*				does not fully support ADMA emulation,
*				so cursor positioning performed via MDOS
*				SetTTYPos call.
*
*   V1.6    15-JUL-88		Renamed Utilities to allow them to
*				be def'd in FORTRAN programs.
*
*   V1.7    15-AUG-88           Removed SETTTY cursor positioning.  No longer
*				operative in MDOS 1.08.
*
	DEF  CSCRO$		SCREEN OUTPUT SUBROUTINE
	DEF  CSCRI$		SCREEN INPUT SUBROUTINE
	DEF  INIT$		INITIALIZATION 
	DEF  CTSCR$		TERSE SCREEN OUTPUT SUBROUTINE
	DEF  CIO$		INPUT/OUTPUT
	DEF  COPFI$		OPEN A FILE SUBROUTINE
	DEF  CMDST$		COMMAND START SUBROUTINE
	DEF  CWAIT$		WAIT FOR USER ROUTINE
	DEF  CMENU$		MENU CALL (GRACEFUL EXIT TO MDOS)
	DEF  F6EADR		FORTRAN6 END ADDRESS
*
*  EQUATE FILES:
*
*	COPY  "equates:key.eq9"
*	COPY  "equates:vid.eq9"
*	COPY  "equates:mem.eq9"
*	COPY  "equates:io.eq9"
*	COPY  "equates:util.eq9"
*	COPY  "equates:fortio.eq9"
*
	UNL
	COPY  "equates:key.eq9"
	COPY  "equates:vid.eq9"
	COPY  "equates:mem.eq9"
	COPY  "equates:io.eq9"
	COPY  "equates:util.eq9"
	COPY  "equates:fortio.eq9"
	LIST
*
	RORG  0
*
*  A set of utilities under MDOS which operate the same as the utilities
*  under TI-99/4A
*
*  Equates
*
WREGS	EQU  >F040		MY REGISTERS (FAST RAM)
*
F6STAR	EQU  $
CSCRO$	EQU  $
	DATA WREGS		MY REGISTERS
	DATA ESCROU
*
CSCRI$	EQU  $
	DATA WREGS
	DATA ESCRIN
*
INIT$	EQU  $
	DATA WREGS
	DATA EINIT
*
CTSCR$	EQU  $
	DATA WREGS
	DATA ETSCRO
*
CIO$	EQU  $
	DATA WREGS
	DATA EIO
*
COPFI$	EQU  $
	DATA WREGS
	DATA EOPFIL
*
CMDST$	EQU  $
	DATA WREGS
	DATA ECMDST
*
CWAIT$	EQU  $
	DATA WREGS
	DATA EWAIT
*
*******************************************************************************
*
*  CMDSTR - Get command string (take from PD source from Paul Charlton)
*
*
*      convert command args into string
*
*      IN:  R1 points to string buffer (byte after length byte)
*           length byte must have max length of buffer
*
*      OUT:  ok     R0=0  equal flag SET
*            error  R0=-1 equal flag RESET
*
ECMDST	EQU  $
	MOV  @2(R13),R1		get user pointer to user string
	MOV  @CMDADR,R2		get MDOS pointer to command string
	JEQ  NO#STR		zero length string
	CB   @2(R2),@-1(R1)	compare lengths of strings
	JHE  BADLEN		string too long for the buffer
	MOV  R1,R5		cursor to caller's string buffer
	DEC  R5
	MOVB @2(R2),R6		count of chars to move
	SRL  R6,8
	INCT R6
*
NXTNOD	MOV  R2,R3		cursor within node
	INCT R3
	MOV  R2,R4
	AI   R4,8		pointer to end of node
*
NODL1	MOVB *R3+,*R5+
	DEC  R6
	JEQ  NODJ1
	C    R3,R4
	JL   NODL1
	MOV  *R2,R2		this link never zero if valid string
	JMP  NXTNOD
*
NODJ1	CLR  R0
	JMP  NODRET
*
NO#STR	CLR  R0
	MOVB R0,@-1(R1)
	MOVB R0,*R1
	JMP  NODRET
*
BADLEN	SETO R0
NODRET	EQU  $
	MOV  R0,*R13		Set R0 in user status
	STST R15
	RTWP
*
*  SCROUT - Screen Output.  Write to the screen.  Terminator is an 'FF'
*
ETSCRO	EQU  $
	MOV  *R14+,R4		GET USER R4 (AFTER BLWP CALL)
	JMP  ESCRO1
ESCROU	EQU  $
	MOV  @8(R13),R4		GET USER R4 (TRUE USER R4)
ESCRO1	EQU  $
	MOV  @SIOBUF,R5		START ADDRESS OF SCREEN BUFFER
MOVLOW  EQU  $
        CB   *R4,@KFF		IS THIS THE TERMINATOR?
	JEQ  MOVEND
	CB   *R4,@KCR		IS IT A CARRIAGE RETURN?
	JNE  MOVLO2
	MOVB *R4+,*R5+		ITS A CARRIAGE RETURN, MOVE IT
	MOVB @KLF,*R5+		AND A LINE FEED
	JMP  MOVLOW		GET ANOTHER BYTE
MOVLO2  EQU  $
	MOVB *R4+,*R5+		MOVE A BYTE
	JNE  MOVLOW		BRIF NOT A NULL
MOVEND	EQU  $
	CLR  R6
	MOVB R6,*R5+		MAKE SURE ITS TERMINATED WITH A ZERO
MOVEN3	EQU  $
	LI   R0,WRITET		WRITE TTY
	MOV  @SIOBUF,R1		WRITE ADDRESS BUFFER
	CLR  R2			WRITE UNTIL 0
	XOP  @DVIDXP,0		DO IT
KEYIN1	EQU  $
	LI   R0,0		KEYBOARD MODE
	XOP  @DKEYXP,0		GET A KEY
	JNE  KEYEND		BRIF NO KEY DEPRESSED
	CB   R1,@KFF		WAS IT A CTL/C (BREAK)?
	JNE  KEYIN2		BRIF NO
	SETO R1
	JMP  KEYEN1		YES, INFORM CALLER BREAK REQUESTED
KEYIN2	EQU  $
	LI   R0,0		WAIT FOR KEY REMOVAL
	XOP  @DKEYXP,0
	JEQ  KEYIN2		BRIF A KEY IS STILL DEPRESSED
KEYIN3	EQU  $
	LI   R0,0		FINALLY, WAIT FOR SECOND KEY DEPRESS
	XOP  @DKEYXP,0
	JNE  KEYIN3		WAIT UNTIL SOMETHING PRESSED	
KEYEND  EQU  $
	CLR  R1			NO BREAK REQUESTED
KEYEN1	EQU  $
	MOV  R1,R1
	STST R15
	RTWP			RETURN
*
*  SCRIN - SCREEN INPUT
*
*  THIS ROUTINE RECIEVES A MAXIMUM BYTE COUNT IN R3, AND A BUFFER
*  ADDRESS IN R4.  IT READS THE NEXT N BYTES OF CHARACTERS FROM THE
*  INPUT, WHERE N IS DETERMINED BY THE MAXIMUM BYTE COUNT, OR MAY
*  BE TERMINATED BY A CARRAIGE RETURN.
*
*  THE BUFFER RETURN HAS THE BYTE COUNT OF THE ACTUAL NUMBER OF
*  CHARACTERS READ EMBEDDED IN THE FIRST BYTE, FOLLOWED BY THE
*  ACTUAL NUMBER OF BYTES.
*
*  THIS ROUTINE RECOGNIZES CONTROL/C (TERMINATE TO MDOS), CONTROL/H
*  (BACKSPACE).   RIGHT NOW ALWAYS RETURNS A GOOD (NON-FNCTN/BACK)
*  STATUS.
*
ESCRIN	EQU  $
	CLR  R6			CLEAR REDO OR BACK CHECK
	MOV  @8(R13),R4		GET I/O BUFFER ADDRESS
	INC  R4			INCR I/O BUFFER ADDRESS	
	CLR  R3
KEYIN	EQU  $			KEYBOARD INPUT ROUTINE
	C    @6(R13),R3		READ MAXIMUM BYTES?
	JEQ  KEYDON		BRIF YES
	BL   @MOVESR		MOVE STRING
	DATA CURSOR
	LI   R0,0		KEYBOARD MODE
	XOP  @DKEYXP,0		GET A KEY
	JNE  KEYIN		BRIF NO KEY DEPRESSED
	CB   R1,@KFF		NO KEY?
	JEQ  KEYIN
	ANDI R1,>7F00
	CI   R1,>0300
	JNE  NOCTLC       	IF ^C NOT PRESSED
	BLWP @0           	ABORT
NOCTLC	EQU  $
	CI   R1,>0D00		WAS THIS ENTER?
	JEQ  KEYDON		BRIF YES, DONE
	CI   R1,>0800		WAS THIS A BACKSPACE?
	JNE  NOCTL8		BRIF NO
	MOV  R3,R3		ANY CHARACTERS IN BUFFER
	JEQ  KEYIN		BRIF NO, IGNORE
	DEC  R3
	DEC  R4
	BL   @MOVESR		BLANK THIS AND LAST CHARACTERS
	DATA BLANKI
	JMP  KEYIN
NOCTL8	EQU  $
	MOVB R1,*R4+
	MOV  @SIOBUF,R2		I/O BUFFER ADDRESS
	MOVB R1,*R2		PUT IN I/O BUFFER
	LI   R0,WRITET		WRITE IT TO SCREEN
	MOV  @SIOBUF,R1
	LI   R2,1		1 CHARACTER
	XOP  @DVIDXP,0		DISPLAY IT
	INC  R3			BUMP # CHARACTERS READ
	JMP  KEYIN
*
KEYDON	EQU  $			DONE INPUT (EITHER RAN OUT OF BYTES, OR ENTER)
	MOV  @8(R13),R4		GET USER I/O BUFFER ADDRESS AGAIN
	SWPB R3
	MOVB R3,*R4		SAVE IT
	BL   @MOVESR		WRITE CARRAIGE RETURN/LINE FEED PAIR
	DATA CRLFP
	MOV  R6,R6		REDO OR BACK (CTL/X)
	STST R15
	RTWP			RETURN
*
*  MOVESR - MOVE THE GIVEN STRING TO THE I/O BUFFER, AND WRITE IT TO
*	    THE SCREEN.
*
MOVESR	EQU  $
	MOV  *R11+,R0		INPUT STRING ADDRESS
	MOV  @SIOBUF,R1		OUTPUT STRING ADDRESS
*
MOVELP	EQU  $
	MOVB *R0+,*R1+		MOVE A BYTE
	JNE  MOVELP
*
	LI   R0,WRITET		WRITE TTY
	MOV  @SIOBUF,R1
	CLR  R2
	XOP  @DVIDXP,0		WRITE TO SCREEN
	B    *R11		RETURN
*
*  INIT - INIT is called upon entry of the task.  It sets up the
*	  input/output (IO) tables
*
*	  Calling Sequence:
*
*	  BLWP @INIT
*	  DATA BUFFER_AREA_START	; Free buffer start
*	  DATA SCREEN_BUFFER_SIZE	; Bytes
*	  DATA IO_BUFFER_SIZE		; Bytes
*	  DATA NUMBER_IO_TABLES
*
EINIT	EQU  $			; INITIALIZE ROUTINE
*
*  Clear local I/O table.  The I/O table contains the device number
*  to device translations, the I/O buffer addresses, the PAB addresses,
*  and the device types.
*
	MOV  *R14,@SIOBUF	; SCREEN I/O BUFFER
	MOV  *R14+,R5		; GET IT AGAIN
	A    *R14,R5		; ADD SCREEN BUFFER SIZE
	MOV  *R14+,@SCRBFS	; AND SAVE IT
	MOV  R5,@IIOBUF		; INPUT/OUTPUT BUFFER
	A    *R14,R5		; ADD I/O BUFFER SIZE
	MOV  *R14+,@IOBUFS	; SAVE IT
	MOV  R5,@IOTABL		; I/O TABLE START
	MOV  *R14,@NOIOTA	; NUMBER OF I/O TABLES
	MOV  *R14+,R6		; NUMBER OF I/O TABLES
IOTCLR	EQU  $
	MOV  R5,R4		; START OF ENTRY
	CLR  *R5+		; CLEAR 1ST WORD
	AI   R4,8
	MOV  R4,*R5+		; SET ADDRESS FOR PAB
	AI   R4,PABFLN		; FILE NAME START
	MOV  R4,*R5+
	LI   R7,IOTLEN		; GET REMAINDER TO CLEAR
	AI   R7,-6		; EXCEPT 6 BYTES I ALREADY SET
IOTCL1	EQU  $
	CLR  *R5+		; CLEAR A WORD
	DECT R7
	JNE  IOTCL1		; BRIF MORE THIS ENTRY
	DEC  R6			; DECR ENTRY
	JNE  IOTCLR		; BRIF MORE ENTRIES
	RTWP
*
*  WAIT: WAIT FOR A KEYPRESS FROM THE USER TO CONTINUE
*
EWAIT	EQU  $
	LI   R5,WAIMSG		WAIT FOR USER
	MOV  @SIOBUF,R6		MOVE MESSAGE
EWAIT1	EQU  $
	MOVB *R5+,*R6+
	JNE  EWAIT1		DO UNTIL NULL
	LI   R0,WRITET		WRITE TTY
	MOV  @SIOBUF,R1		WRITE ADDRESS BUFFER
	CLR  R2			WRITE UNTIL 0
	XOP  @DVIDXP,0		DO IT
KEYLOW	EQU  $
	CLR  R0			KEYBOARD MODE
	XOP  @DKEYXP,0		GET A KEY
	JNE  KEYLOW		BRIF NO KEY DEPRESSED
	CB   R1,@KFF		WAS IT A BREAK?
	JEQ  WAIEXI		BRIF YES, GET OUT
	ANDI R1,>7F00
	CB   R1,@KCR		WAS IT A CARRIAGE RETURN?
	JNE  KEYLOW		NO, HOLD HERE
WAIEXI	EQU  $
	RTWP
*
*  MENU$: EXIT USER TASK (FIRST CLOSE ANY OPEN FILES)
*
CMENU$	EQU  $
*
*  CLEAR THE I/O TABLES, CLOSE EACH FILE WHICH MAY BE OPEN.
*
CLOSAL  EQU  $
	MOV  @NOIOTA,R9		# OF I/O TABLES
	MOV  @IOTABL,R10	I/O TABLE START
INILOP	EQU  $
	MOV  *R10,@ALCLOS+2
	JEQ  NOCLOS		BRIF NOTHING HERE
	LI   R4,ALCLOS
	BLWP @CIO$		CLOSE THE FILE
	CLR  *R10		ENSURE LOGICAL DEVICE # ZAPPED
NOCLOS	EQU  $
	AI   R10,IOTLEN		SKIP TO NEXT
	DEC  R9	   		DECR TABLE #
	JNE  INILOP		BRIF MORE
	LIMI 2			ENSURE INTERRUPTS ARE ENABLED
	BLWP @0			RETURN TO MDOS
*
	TITL 'I/O ROUTINES'
	PAGE
*
*  THIS MODULE CONTAINS THE GENERAL I/O ROUTINES.
*
*
*  OPFILE - OPEN A FILE ROUTINE
*
*  THIS ROUTINE IS CALLED TO OPEN A FILE FOR ACCESS.
*
*  CALLING SEQUENCE:
*
*	LI  R0,FILE#	NUMBER OF FILE TO OPEN
*	LI  R1,PABADR	PAB ADDRESS IN CPU RAM
*       BLWP @OPFILE    OPEN FILE
*
*  OPFILE WILL ADD THE REQUESTED DEVICE TO THE IOTABL, AND
*  OPEN THE FILE VIA THE DSRLNK ROUTINE.
*
*  ERRORS ARE RETURNED IN R1 (LOBYTE, RIGHT JUSTIFIED)
*
EOPFIL	EQU  $
	MOV  *R13,R0		GET OLD USER R0
	MOV  @2(R13),R1		GET OLD USER R1
	MOV  R0,R0
	JEQ  INVDVE		INVALID DEVICE
	BL   @FNDFRR		FIND FREE PACKET
	JMP  SETFRR		SET FREE PACKET
	NOP			ALREADY EXISTS
INVDVE	EQU  $
	CLR  R2
	LI   R1,BUFFUL		RETURN ERROR
	JMP  BIORRT		RETURN
*
SETFRR	EQU  $			FOUND FREE I/O TABLE SLOT
	MOV  R0,*R6		SET FILE #
*				GET RAM ADDRESS OF PAB
	MOV  @IOTPAB(R6),R0	MOVE TO ADDRESS
	MOV  *R1+,*R0+		MOVE OPCODE AND FLAGS
	CLR  *R0+		CLEAR ERROR CODE & HIGH BYTE ADDRESS
	MOV  @IIOBUF,R2		INPUT/OUTPUT BUFFER
	MOV  R2,*R0+		SET CPU BUFFER ADDRESS IN PAB
	INCT R1			SKIP PAST USELESS ADDRESS IN USER PAB
	MOV  *R1+,R2		GET LOGICAL RECORD LENGTH, CHAR COUNT
	MOV  *R1+,*R0+		MOVE RECORD NUMBER
	MOV  R2,R3		EXTRACT RECORD LENGTH
	SWPB R3
	ANDI R3,>00FF
	MOV  R3,*R0+		MOVE RECORD LENGTH
	CLR  *R0+		CLEAR CPU & HIGH CHAR COUNT FLAG
	ANDI R3,>00FF		MASK CHARACTER COUNT
	MOV  R3,*R0+
	CLR  R3
	MOVB R3,*R0+		CLEAR STATUS BYTE
	INC  R1			SKIP USELESS SCREEN OFFSET BYTE
*
*   PAB WITH THE EXCEPTION OF THE FILE NAME HAS BEEN MOVED.  BEFORE
*   MOVING THE FILE NAME, CHECK TO SEE IF IT IS A CRT OR CONSOLE DEVICE,
*   IDENTIFIED BY A TWO OR THREE CHARACTER FILE NAME, AND THE FIRST TWO
*   CHARACTERS BEING 'CR'.
*
	CLR  R5			GET # BYTES TO PARSE
	MOVB R5,*R0		CLEAR RESULTING STRING
	MOVB *R1,R5		GET LENGTH OF INPUT STRING
	JEQ  OPRETU		BRIF NULL FILE HERE (NOTHING TO DO)
	SWPB R5
	CI   R5,3		POSSIBLY THE CRT?
	JGT  PARSIT		BRIF NO, PARSE THE NAME
	CI   R5,2
	JLT  PARSIT		BRIF NO, PARSE THE NAME
	MOV  R1,R5		GET 1ST TWO CHARS OF FILE NAME
	INC  R5
	MOVB *R5+,R4		GET 1ST CHARACTER
	SWPB R4
	MOVB *R5+,R4
	SWPB R4
	C    R4,@SCRDEV		IS IT THE SCREEN DEVICE?
	JNE  PARSIT		BRIF NO
	MOVB *R1+,*R0+		MOVE THE DEVICE NAME OF 'CRT'
	MOVB *R1+,*R0+ 		& LENGTH BYTE
	MOVB *R1+,*R0+
	MOVB *R1+,*R0+
	JMP  PARSNO
PARSIT	EQU  $
	CLR  R5			GET LENGTH OF INPUT STRING
	MOVB *R1+,R5		GET IT
	SWPB R5
	A    R1,R5		POINT TO BYTE PAST INPUT STRING
	CLR  R4
	MOVB R4,*R5		MAKE STRING NULL TERMINATED (IN USER BUFFER)
	MOV  R0,R2		POINTER TO LENGTH BYTE IN OUTPUT STRING
	CLR  R3
	LI   R5,>2000		SIZE OF OUTPUT STRING
	MOVB R5,*R2
	LI   R0,PARFIL		PARSE FILE
	XOP  @DUTXOP,0		DO IT
	MOV  R1,R1		ANY ERROR?
	JNE  INVDVE		BRIF NO, INVALID DEVICE
*
PARSNO	EQU  $
	MOV  @IOTPAB(R6),R1	GET PAB FILE NAME ADDRESS START
	MOV  @PABTXT(R1),R1	GET FILE NAME (1ST TWO CHARS)
	CLR  R4	   		ASSUME DISK TYPE
	LI   R5,DSKSS		COMPARE ALL TYPES
DSKLOP  EQU  $
	MOV  *R5+,R7		GET TABLE ENTRY
	JEQ  NOTDSK		BRIF NOT A DISK
	C    R1,R7
	JNE  DSKLOP		BRIF NOT THIS ONE
	JMP  STIOTY
NOTDSK  EQU  $
	INCT R4	   		ASSUME SCREEN TYPE
	C    R1,@SCRDEV		IS IT THE CRT?
	JEQ  STIOTY		BRIF YES
	INC  R4	   		ELSE, ASSUME LISTING DEVICE
STIOTY	EQU  $
	MOV  R4,@IOTTYP(R6)
*
	CI   R4,SCRTYP		IS IT THE SCREEN?
	JEQ  OPRETU
*
JMPIOT	EQU  $			SET I/O DESCRIPTOR
	MOV  @IOTPAB(R6),R0	ADDRESS OF PAB
	XOP  @DIOXOP,0		OPEN THE DEVICE
	MOV  @IOTPAB(R6),R2	GET ERROR (IF ANY)
	CLR  R1
	MOVB @PABERR(R2),R1	ANY ERROR?
	JEQ  OPRETU		BRIF NO ERROR
	SWPB R1			ELSE, JUSTIFY ERROR NUMBER IN LOW
	SRA  R1,5		 BYTE FOR ERROR PRINTOUT
	INC  R1
	JMP  IORRT1
*
OPRETU	EQU  $
	CLR  R1
	JMP  IORRT1
BIORRT	EQU  $
	JMP  IORRT2
*
*  IO - INPUT/OUTPUT ROUTINE
*
*  THIS ROUTINE HANDLES GENERAL PURPOSE I/O FROM A USER
*  PASSED COMMAND LIST.
*
*  CALLING SEQUENCE:
*
*	LI   R4,CMDLST
*	BLWP @IO
*
*  WHERE:
*
*	CMDLST - IS AN UP TO FIVE WORD COMMAND LIST AS FOLLOWS:
*
*		0  -  FUNCTION		 (ALL)
*		1  -  FILE NUMBER	 (ALL)
*		2  -  I/O BUFFER ADDRESS (FOR READS/WRITES)
*		3  -  # BYTES OF I/O     (FOR READS/WRITES)
*		4  -  RECORD # 		 (FOR REL. I/O ONLY)
*
*	RETURNS:
*		a. Returned I/O buffer at I/O buffer address
*		b. R0 - # bytes actually read (0 to 255, reads only)
*		c. R1 - any error condition (0=none, 1 to 10)
*		d. R2 - if error, has pointer to VDP file name
*
EIO  	EQU  $
	MOV  @8(R13),R4		GET OLD USER R4
*
REIOEN	EQU  $
	MOV  @IOLABE(R4),R0
	JEQ  SETINV		0 LABEL INVALID
	BL   @FNDFRR		SEARCH I/O TABLE FOR #
	JMP  SETINV		FREE PACKET FOUND
	JMP  IOTFND		FILE FOUND
SETINV	EQU  $			ALL PACKETS IN USE
	CLR  R2
	LI   R1,INVDEV		INVALID DEVICE OR FILE
	JMP  IORRT2		RETURN
*
IOTFND	EQU  $			FOUND IO TABLE PACKET
	CLR  R1			IN CASE DUMMY, NO ERROR POSSIBLE
	MOV  @IOTDSR(R6),R0
	MOVB *R0,R1
	JEQ  IORRT1		BRIF DUMMY FILE HERE
	MOV  *R4,R3		GET I/O LABEL
	ANDI R3,>800		RELATIVE I/O ?
	JEQ  NOTREL		BRIF NOT
*				MOVE RECORD NUMBER
	MOV  @IOTPAB(R6),R1
	MOV  @PABCHC(R1),@IOBYTE(R4)
	MOV  @IORCNO(R4),@6(R1)
*
NOTREL	EQU  $
	LI   R7,PFORMA		SEARCH FORMAT CODE
	MOV  *R4,R3		GET FUNCTION/TYPE
	ANDI R3,>FF		MASK FUNCTION
FORLOP	EQU  $			FIND FUNCTION
	C    *R7,R3		IS IT THE SAME ?
	JEQ  FOREND		BRIF YES
	AI   R7,6	 	ELSE, SKIP TO NEXT
	MOV  *R7,R5
	JGT  FORLOP		BRIF MORE
	LI   R1,INVCAL		ELSE, INVALID CALL
	JMP  IORRT2		RETURN
FOREND	EQU  $
	CLR  R1	   		CLEAR ERROR
	INCT R7	   		CALL PRE-FORMAT ROUTINE
	MOV  *R7,R2
	B    *R2
*				CALL DSRLNK FOR I/O
CALDSR  EQU  $
	MOV  @IOTPAB(R6),R2
	MOVB R1,*R2
	MOV  @IOTTYP(R6),R2
	SLA  R2,1	 	*2
	AI   R2,BTYPET		BRANCH TABLE
	MOV  *R2,R2
	B    *R2	  	EXECUTE FUNCTION
*
RETDSR  EQU  $
	JNE  IORRT2		BRIF I/O ERROR OCCURED
	INCT R7			BUMP POINTER TO POST FORMAT ROUTINE
	MOV  *R7,R2		GET ROUTINE ADDRESS
	JEQ  IORRT1		BRIF NONE
	CLR  R1			ELSE, EXECUTE ROUTINE
	B    *R2	  	EXECUTE POST-FORMAT ROUTINE
*
IORRT1  EQU  $
	MOV  R1,R1
	JEQ  IORRT3		BRIF NO ERROR
IORRT2  EQU  $
	MOV  @IOTDSR(R6),R2	GET PAB ADDRESS IN VDP ARM
	MOV  R2,@4(R13)		MOVE TO USER R2
IORRT3  EQU  $
	ANDI R1,>FF		SET EQUAL BIT
	MOV  R1,@2(R13)		PUT ERROR CODE (IF ANY) IN USER R1
	STST R15		SAVE STATUS
	RTWP			RETURN
*
**************************
*			 *
*  PRE- FORMAT ROUTINES  *
*			 *
**************************
*
PRREAD	EQU  $			PRE-READ FORMAT
	LI   R1,OPCREA*256	SET FUNCTION=READ
	JMP  PRERET
*
PRREWI	EQU  $
	LI   R1,OPCRES*256	PRE-REWIND FORMAT
	JMP  PRERET
*
PRCLOS	EQU  $			PRE-CLOSE FILE
	LI   R1,OPCCLO*256	SET FUNCTION=CLOSE
	JMP  CLARET
*
PRDELE	EQU  $			PRE-DELETE FILE
	LI   R1,OPCDEF*256	SET FUNCTION=DELETE
CLARET	EQU  $
	CLR  *R6	  	CLEAR THIS IOTABLE (UNUSED)
PRERET	B    @CALDSR		RETURN
*
PRWRIB	EQU  $			PRE-WRITE BINARY
	MOV  @IOBUFA(R4),R2	GET BUFFER ADDRESS
	MOV  @IOBYTE(R4),R3	GET NUMBER OF BYTES
	JMP  PRWRAB		DON'T TRIM ANYTHING
*
PRWRIA	EQU  $			PRE-WRITE ASCII
	MOV  @IOTTYP(R6),R3
	CI   R3,DSKTYP		IS IT LISTING TYPE ?
	JNE  ISTPRI		BRIF PRINTER
	MOV  @IOBUFA(R4),R2     GET BUFFER ADDRESS
	MOV  @IOBYTE(R4),R3	GET NUMBER OF BYTES
	BL   @TRIMBY		TRIM BYTES FROM BUFFER
	INC  R3			ADD BACK IN 1ST BYTE
PRWRAB  EQU  $
	MOV  @IIOBUF,R0
	MOV  R2,R1		SAVE I/O BUFFER ADDRESS
	MOV  R3,R2		NUMBER OF BYTES OF I/O
	JNE  PRWRAA		BRIF SOMETHING HERE
	INC  R2			MUST BE AT LEAST ONE BYTE
PRWRAA  EQU  $
	MOV  R2,R12		BYTE COUNT FOR DECREMENTER
PRWRAC	EQU  $
	MOVB *R1+,*R0+		MOVE A BYTE (ONLY AS MUCH AS IS NEEDED)
	DEC  R12
	JNE  PRWRAC
	MOV  R2,R1		GET BYTE COUNT
	JMP  NOMOV2		CLEANUP & EXIT
*
*  PRINTER FORMAT CONTROL LOOP
*
ISTPRI	EQU  $
	CI   R3,SCRTYP
	JEQ  NOMOV3		IF SCREEN, SKIP PRINTER STUFF
	MOV  @IOBUFA(R4),R2	GET CPU RAM BUFFER ADDRESS
*
*  PRINTER OUTPUT CONTROL PRE-FORMATTER (FOR ASCII)
*
ISTPR1	EQU  $
	MOV  @IIOBUF,R0
	LI   R8,PPRINT		SEARCH BPRINT TABLE FOR CHAR
*
BPRLOP	EQU  $
	MOV  *R8+,R5		GET THE CHARACTER TO COMPARE
	JLT  UNRECO		UNRECOGNIZED CHAR
	CB   *R2,R5		IS IT THE SAME ?
	JEQ  BPRLO1		BRIF FOUND
	INCT R8			SKIP DATA WORD
	JMP  BPRLOP
UNRECO  EQU  $
	LI   R8,PSINGL		USE DEFAULT SINGLE SKIP
BPRLO1  EQU  $
	BL   @WRITER		WRITE TERMINATOR
	MOV  @IOBYTE(R4),R3     GET BYTE COUNT FROM USER
	BL   @TRIMBY		TRIM BYTE COUNT (DON'T INCLUDE BLANKS)
	MOV  @IOBUFA(R4),R1	CPU RAM USER BUFFER ADDRESS
	INC  R1			+1 TO SKIP 1ST CHARACTER
	MOV  R3,R2		RESULTANT BYTE COUNT (NOT INCLUDING 1ST)
	JEQ  NOMOVE		BRIF NOTHING TO MOVE
	MOV  R2,R10
	MOV  R0,R11
BPRLO2  EQU  $
	MOVB *R1+,*R11+		WRITE REST OF BUFFER
	DEC  R10		* BUG FIX
	JNE  BPRLO2
NOMOVE  EQU  $
	A    R2,R0		BUMP VDP RAM ADDRESS
	BL   @WRITER		WRITE TERMINATOR
	MOV  @IIOBUF,R1
	NEG  R1
	A    R1,R0		DETERMINE RESULTANT BYTE COUNT
	MOV  R0,R1		AND PUT IT IN PAB
NOMOV2  EQU  $
	MOV  @IOTPAB(R6),R2
	MOV  R1,@PABCHC(R2)
NOMOV3  EQU  $
	LI   R1,OPCWRI*256
	B    @CALDSR		RETURN
*
**************************
*			 *
*	I/O DRIVERS	 *
*			 *
**************************
*
*  THE FOLLOWING CONTAINS I/O DRIVERS BY DEVICE TYPE.
*
*  DSKIO:   DISK I/O
*  CASIO:   CASSETTE I/O (UNIMPLEMENTED)
*  LISIO:   LISTING (PRINTER OR OTHER DSR) I/O
*  SCRIO:   SCREEN I/O
*
DSKIO	EQU  $
CASIO	EQU  $
LISIO	EQU  $
	MOV  @IOTPAB(R6),R0	I/O ADDRESS
	XOP  @DIOXOP,0		DO IT
	MOV  @IOTPAB(R6),R2	GET PAB ADDRESS
	CLR  R1
	MOVB @PABERR(R2),R1
	JEQ  IOEER1		BRIF NO I/O ERROR
	SWPB R1			JUSTIFY ERROR NUMBER IN LOW BYTE
	SRA  R1,5
	INC  R1			INCR BY ONE FOR ERROR PRINT
	CI   R1,6	 	IS IT AN EOF ?
	JNE  IOEER1		BRIF NO
	MOV  @IIOBUF,R0
	LI   R1,BEOD
	MOV  *R1+,*R0+
	MOV  *R1,*R0
	MOV  @IOTPAB(R6),R1	SET 4 BYTES READ
	LI   R2,4
	MOV  R2,@PABCHC(R1)
	CLR  R1
*	
IOEER1	EQU  $
	MOV  R1,R1		SET STATUS FOR USER
	B    @RETDSR		RETURN
*
*  SCREEN I/O ROUTINES (READ & WRITE)
*
SCRIO	EQU  $
	CI   R1,OPCREA*256	WAS IT A READ ?
	JNE  NOTRES		BRIF NO
*
*  ITS A READ ( FUNC CODE 2 )
*
TRYAGA	EQU  $
	MOV  @IIOBUF,R5		GET MY I/O BUFFER ADDRESS
	CLR  R3
SKEYIN	EQU  $			KEYBOARD INPUT ROUTINE
	C    @IOBYTE(R4),R3	DID I READ MAXIMUM BYTES?
	JEQ  SKEYDO		BRIF YES
	BL   @MOVESR		MOVE STRING
	DATA CURSOR
	LI   R0,0		KEYBOARD MODE
	XOP  @DKEYXP,0		GET A KEY
	JNE  SKEYIN		BRIF NO KEY DEPRESSED
	CB   R1,@KFF		NO KEY?
	JEQ  SKEYIN
	ANDI R1,>7F00
	CI   R1,>0300
	JNE  SNOCTLC       	IF ^C NOT PRESSED
	B    @CMENU$		GRACEFUL EXIT
SNOCTLC	EQU  $
	CI   R1,>0D00		WAS THIS ENTER?
	JEQ  SKEYDO		BRIF YES, DONE
	CI   R1,>0800		WAS THIS A BACKSPACE?
	JNE  SNOCTL8		BRIF NO
	MOV  R3,R3		ANY CHARACTERS IN BUFFER
	JEQ  SKEYIN		BRIF NO, IGNORE
	DEC  R3
	DEC  R5
	BL   @MOVESR		BLANK THIS AND LAST CHARACTERS
	DATA BLANKI
	JMP  SKEYIN
SNOCTL8	EQU  $
	MOVB R1,*R5+
	MOV  @SIOBUF,R2		I/O BUFFER ADDRESS
	MOVB R1,*R2		PUT IN I/O BUFFER
	LI   R0,WRITET		WRITE IT TO SCREEN
	MOV  @SIOBUF,R1
	LI   R2,1		1 CHARACTER
	XOP  @DVIDXP,0		DISPLAY IT
	INC  R3			BUMP # CHARACTERS READ
	JMP  SKEYIN
*
*  SKEYDO - Done with key loop, either ran out of bytes, or user
*	    pressed ENTER.
*
*	    R3 has byte count read.
*	    R5 points to I/O buffer end
*
SKEYDO	EQU  $
	BL   @MOVESR		WRITE CARRAIGE RETURN/LINE FEED PAIR
	DATA CRLFP
	MOV  @IOTPAB(R6),R1
	MOV  R3,@PABCHC(R1)	SET BYTE COUNT READ IN PAB
	B    @READRE		RETURN
*
NOTRES	EQU  $
	CI   R1,OPCWRI*256	IS IT A WRITE ?
	JNE  READRE		BRIF NO
*
*  SCRWRT - SCREEN WRITE HANDLES FORTRAN I/O BUFFER DIRECTLY
*	    MODULE USES A LOCAL SCREEN I/O BUFFER.  BUFFER IS
*	    WRITTEN TO SCREEN USING STANDARD MDOS WRITETTY FUNCTION.
*
	MOV  @SIOBUF,R8		SCREEN I/O BUFFER
	MOV  @SCRBFS,R9		SCREEN I/O BUFFER SIZE
	MOV  @IOBYTE(R4),R3	GET BYTE COUNT FROM USER COMMAND STACK
	MOV  @IOBUFA(R4),R2     GET I/O BUFFER ADDRESS
	MOV  @IOORDE(R4),R5	IS IT A WRITE BINARY?
	ANDI R5,>FF
	CI   R5,WRBOPC		IS IT A WRITE BINARY?
	JNE  FSCR00		BRIF NO
	MOV  R3,R6		SAVE BYTE COUNT MAXIMUM	
	CLR  @TERCHA		CLEAR ANY TERMINATING CHARACTER
	MOV  @IOBUFA(R4),R4	GET USER I/O BUFFER ADDRESS START
	JMP  FSCRO4		SKIP PRINTER CHARACTER CHECK
FSCR00	EQU  $	
	BL   @TRIMBY		TRIM BYTE COUNT (ELIMINATE TRAILING BLANK)
	MOV  R3,R6		SAVE MAXIMUM BYTE COUNT
	MOV  @IOBUFA(R4),R4	GET USER I/O ADDRESS AGAIN
	LI   R3,BPRINT		DETERMINE WHAT TO DO WITH PRINT CONTROL
FSCRO1	EQU  $
	MOV  *R3+,R5		GET NEXT CHARACTER
	JLT  FSCRO2		BRIF NOT FOUND
	CB   *R4,R5		IS THIS THE ONE?
	JEQ  FSCRO3
	INCT R3
	JMP  FSCRO1		BRIF NO
FSCRO2  EQU  $
	LI   R3,SINGLE		SINGLE SKIP DEFAULT
FSCRO3  EQU  $
	INC  R4			SKIP THIS PRE-CHARACTER
	MOV  *R3,R1		GET PRE/POST CHARACTERS
	MOV  *R3,@TERCHA	SAVE ANY TERMINATING CHARACTER
	ANDI R1,>FF00		CLEAR EXCESS BYTES
	MOV  R1,R1		IF NULL, SKIP THIS
	JEQ  FSCRO4
	BL   @STORCH		STORE CHARACTER IN BUFFER
	CB   R1,@KCR
	JNE  FSCRO4		BRIF NOT A CARRIAGE RETURN
	MOVB @KLF,R1		ELSE, MOVE LINE FEED
	BL   @STORCH
*
*  FOLLOWING LOOP IS EXECUTED FOR EACH CHARACTER IN INPUT BUFFER.
*  IT COPIES THE CHARACTER FROM THE USER INPUT BUFFER TO MY PRIVATE
*  SCREEN BUFFER.  
*
FSCRO4	EQU  $			DO FOR EACH CHARACTER
	DEC  R6
	JLT  FSCRO5		BRIF DONE, NOTHING MORE
	MOVB *R4+,R1		GET THE NEXT CHARACTER
	BL   @STORCH		STORE CHARACTER IN OUTPUT BUFFER
	CB   R1,@KCR		IS IT A CARRIAGE RETURN?
	JNE  FSCRO4		BRIF NO, TRY ANOTHER
	MOVB @KLF,R1		ELSE, MOVE LINE FEED
	BL   @STORCH
	JMP  FSCRO4
*
*  WHEN I REACH HERE, I'M DONE.  NO MORE CHARACTERS REMAIN IN INPUT
*  BUFFER.  SEE IF THERE WERE ANY TERMINATING CHARACTERS (E.G. CR)
*
FSCRO5	EQU  $
	MOV  @TERCHA,R1		GET TERMINATING CHARACTER
	ANDI R1,>00FF
	SWPB R1
	MOV  R1,R1		ANYTHING HERE?
	JEQ  FSCRO6		BRIF NO
	BL   @STORCH
	CB   R1,@KCR
	JNE  FSCRO6
	MOVB @KLF,R1		CR, NOW STORE LF
	BL   @STORCH
*
*  NOW WRITE THE BUFFER TO THE SCREEN
*
FSCRO6	EQU  $
	BL   @FLUSHD		FLUSH THE DISPLAY
*
*  FOLLOWING CODE IS THE KEYBOARD "HOLD" MODE.  RECOGNIZES XON/XOFF
*  CONTROL SEQUENCES ONLY.
*
FKEYE1	EQU  $
	CLR  R0			KEYBOARD MODE
	XOP  @DKEYXP,0		GET A KEY
	JNE  READRE		BRIF NO KEY DEPRESSED
	CB   R1,@KFF		WAS IT A CTL/C (BREAK)?
	JNE  FKEYE2		BRIF NO
	SETO R1
	JMP  FKEYE1		YES, INFORM CALLER BREAK REQUESTED
FKEYE2	EQU  $
	CB   R1,@KXON		WAS IT XON?
	JNE  READRE		BRIF NO, JUST EXIT
	CLR  R0			WAIT FOR KEY REMOVAL
	XOP  @DKEYXP,0
	JEQ  FKEYE2		BRIF A KEY IS STILL DEPRESSED
FKEYE3	EQU  $
	LI   R0,0		FINALLY, WAIT FOR SECOND KEY DEPRESS
	XOP  @DKEYXP,0
	JNE  FKEYE3		WAIT UNTIL SOMETHING PRESSED
	CB   R1,@KXOFF		WAS IT XOFF (CNTRL/Q)
	JNE  FKEYE3		BRIF NO, JUST HANG LOOSE
READRE  EQU  $
	CLR  R1	   		CLEAR ERROR CONDITION
SCRRER	EQU  $
	MOV  R1,R1		ERROR ONLY POSSIBLE FOR REDO OR BACK
	B    @RETDSR		RETURN
*
*  STORCH - StorCH stores the character in R1 in the screen I/O buffer.
*	    It checks to ensure that the screen buffer will hold
*	    the requested character.  If not, the screen buffer is
*	    flushed first, then the character is stored.
*
STORCH	EQU  $
	MOV  R11,R12		SAVE RETURN
	DEC  R9			DECREMENT BYTE COUNT IN BUFFER
	JNE  STORC1		BRIF OK
	MOV  R1,@CHARSV		SAVE THE CHARACTER BEING STORED
	BL   @FLUSHD		FLUSH THE DISPLAY BUFFER
	MOV  @CHARSV,R1		RESTORE THE CHARACTER BEING STORED
	DEC  R9
STORC1	EQU  $
	MOVB R1,*R8+		SAVE CHARACTER IN BUFFER
	B    *R12		RETURN
*
*  FLUSHD flushes the screen buffer to the display.  This may be as
*  a result of a SETTTY command, or as a result of the screen buffer
*  being filled, or the actual end of display processing.
*
FLUSHD	EQU  $
	C    R8,@SIOBUF		HAS ANYTHING BEEN WRITTEN YET?
	JEQ  DONTWR		BRIF NO, DON'T FLUSH IT
	CLR  R5			FLUSH THE OUTPUT BUFFER
	MOVB R5,*R8+
	LI   R0,WRITET		WRITE TTY
	MOV  @SIOBUF,R1		WRITE ADDRESS BUFFER
	CLR  R2			WRITE UNTIL 0
	XOP  @DVIDXP,0		DO IT
DONTWR	EQU  $
	MOV  @SIOBUF,R8		SET START SCREEN I/O BUFFER
	MOV  @SCRBFS,R9		SET SCREEN BUFFER SIZE (BYTES)
	B    *R11
*
**************************
*			 *
*  POST-FORMAT ROUTINES  *
*			 *
**************************
*
*  ROUTINES EXECUTED AFTER I/O PERFORMED
*
*  POREAD:  POST READ ROUTINE.  PADS WITH BLANKS & CHECKS FOR EOD.
*
POREAD	EQU  $
	MOV  @IOTPAB(R6),R2	GET # BYTES ACTUALLY READ
	MOV  @PABCHC(R2),R1
	MOV  R1,*R13		SAVE IN USER R0
	MOV  R1,R2		# BYTES READ
	MOV  @IIOBUF,R0
	MOV  @IOBUFA(R4),R1
	MOV  R2,R2		BRIF NOTHING READ
	JEQ  NOREAD
	MOV  R2,R11
POREA2	EQU  $
	MOVB *R0+,*R1+
	DEC  R11
	JNE  POREA2
NOREAD  EQU  $
	MOV  @IOBUFA(R4),R1	GET USER BUFFER ADDRESS
	A    @IOBYTE(R4),R1     GET END OF BUFFER ADDRESS
	DEC  R1
	S    @IOBYTE(R4),R2	GET # BYTES TO PAD
	JEQ  CHKEOD
	JGT  CHKEOD
PADLOP	EQU  $
	MOVB @BLANK,*R1   	PAD A BYTE
	DEC  R1	   		DECR # BYTES
	INC  R2
	JNE  PADLOP
*
CHKEOD	EQU  $			CHECK FOR END OF DATA
	MOV  @IOBUFA(R4),R1
	C    @BEOD,*R1+
	JNE  POREEN		NOT >EOD
	C    @BEOD+2,*R1
	JNE  POREEN
	LI   R1,IEOFER		ELSE, RETURN EOF ERROR
	JMP  CHKEO1
POREEN  EQU  $
	CLR  R1
CHKEO1	EQU  $
	B    @IORRT1		RETURN
*
*  PRE,POST FORMAT BY FUNCTION CODE
*
PFORMA	EQU  $
	DATA REAOPC	  06 = READ
	DATA PRREAD
	DATA POREAD
*
	DATA REWOPC	  3B = REWIND
	DATA PRREWI
	DATA 0
*
	DATA CLOOPC	  FE = CLOSE FILE
	DATA PRCLOS
	DATA 0
*
	DATA DELOPC	  FF = DELETE FILE
	DATA PRDELE
	DATA 0
*
	DATA WRBOPC	  01 = WRITE BINARY
	DATA PRWRIB
	DATA 0
*
	DATA WRAOPC	  05 = WRITE ASCII
	DATA PRWRIA
	DATA 0
	DATA -1	   	TERMINATOR
*
*  BRANCH TABLE FOR I/O TYPE DEVICE
*
BTYPET	EQU  $
	DATA DSKIO	DISK I/O
	DATA CASIO	CASSETTE I/O
	DATA SCRIO	SCREEN I/O
	DATA LISIO	LISTING (PRINTER) I/O
*
*  PRINTER FORMAT CONTROL CHARACTERS
*
*  1ST WORD:   High byte is carriage control FORTRAN character
*  2ND WORD:   High byte is leading byte, low byte is trailing byte
*
PPRINT	EQU  $
	TEXT '1 '		'1' - NEW PAGE
	DATA >0C00
	TEXT '0 '		'0' - DOUBLE SKIP
	DATA >0D00
	TEXT '+ '		'+' - NO SKIP
	DATA >0000
	TEXT '  '		' ' - SINGLE SKIP
PSINGL	EQU  $
	DATA >0000
	DATA -1			END OF LIST
*
*  PRINTER CONTROL LIST FOR CRT DEVICE
*
BPRINT	EQU  $
	TEXT '1 '	 	 '1' - NEW PAGE
	DATA >0C0D
	TEXT '0 '	  	'0' - DOUBLE SKIP
	DATA >0D0D
	TEXT '+ '	  	'+' - NO CARRIAGE CONTROL
	DATA >0000
	TEXT '  '	  	' '  - SINGLE SKIP (DEFAULT)
SINGLE	EQU  $
	DATA >000D
	DATA -1	   	END OF LIST
*
*  FNDFRR - FIND FREE PACKET
*
*  GIVEN FILE # IN R0, SEARCH I/O TABLE FOR FREE PACKET
*
*  CONDITIONS RETURNED:
*
*   CALLER + 2 - FOUND FREE PACKET, ADDRESS IN R6
*   CALLER + 4 - FILE EXISTS, ADDRESS OF FILE ADDRESS IN R6
*   CALLER + 8 - NO FREE I/O FILE ADDRESSES EXIST
*
FNDFRR	EQU  $
	MOV  @IOTABL,R6		I/O TABLE START
	MOV  @NOIOTA,R3		# OF I/O TABLE PACKETS
	CLR  R2	   		FREE PACKET ADDRESS
FRELOP	EQU  $
	MOV  *R6,R5		GET ENTRY
	JNE  NFDNFR		BRIF THIS ONE EMPTY
FNDFRE	EQU  $	    		FOUND FREE PACKET
	MOV  R2,R2		DID I ALREADY FIND ONE?
	JNE  NFDNFR		BRIF YES, USE 1ST FOR LATER SEARCH SPEED
	MOV  R6,R2		OTHERWISE, SAVE ADDRESS THIS PACKET
NFDNFR	EQU  $
	C    R5,R0		IS IT THE FILE REQUESTED ?
	JEQ  RETEXI		YES, RETURN EXISTS
INCFRE	EQU  $
	AI   R6,IOTLEN		SKIP TO NEXT PACKET
	DEC  R3
	JNE  FRELOP		BRIF MORE TO SEARCH
	MOV  R2,R6		ANY FREE PACKETS FOUND ?
	JNE  RETFRX		BRIF YES
RETFUL	EQU  $			FULL CONDITION
	INCT R11
RETEXI	EQU  $			FOUND FILE CONDITION
	INCT R11
RETFRX	EQU  $			FOUND FREE PACKET CONDITION
	B    *R11
*
*  TRIMBY - Trim byte count (eliminate trailing blanks)
*
*	    R2 has I/O buffer address in CPU RAM
*	    R3 has byte count from user
*
*  Returns new byte count in R3.
*
TRIMBY  EQU  $
	MOV  R2,R1
	A    R3,R1		Determine ending buffer address
	DEC  R1
TRIMLA  EQU  $
	CB   *R1,@BLANK		is this a blank?
	JNE  TRIMEN		brif no, done
	DEC  R1			look at previous
	DEC  R3			decrement byte count
	JNE  TRIMLA		don't go negative
	INC  R3			make sure at least one byte
TRIMEN  EQU  $
	DEC  R3
	B    *R11		return	
*
*  WRITER - WRITE TERMINATOR
*
*	    ON ENTRY:   R8 HAS POINTER TO NEXT TERMINATOR (PRE/POST)
*	 	        R0 POINTS TO CURRENT VDP BUFFER ADDRESS
*
WRITER  EQU  $
	MOV  R11,R10		SAVE RETURN
	CLR  R1
	MOVB *R8+,R1		GET LEADING CHARACTER
	JEQ  BPRLO3		BRIF NULL
	MOVB R1,*R0+
	CB   R1,@KCR		DID I WRITE A CARRIAGE RETURN?
	JNE  BPRLO3		BRIF NO
	MOVB @KLF,R1		GET ADDITIONAL LINE ENDING CHARACTER
	JEQ  BPRLO3		BRIF NOTHING HERE
	MOVB R1,*R0+
BPRLO3  EQU  $
	B    *R10
*
*  LOCAL DATA AREA CELLS:
*
NOIOTA	DATA 0			NUMBER OF I/O TABLES (SET BY INIT)
SCRBFS	DATA 0			SCREEN BUFFER SIZE (BYTES)
IOBUFS	DATA 0			I/O BUFFER SIZE (BYTES)
IOTABL	DATA 0			I/O TABLES START ADDRESS (SET BY INIT)
SIOBUF	DATA 0			SCREEN I/O DATA START
IIOBUF	DATA 0			INPUT/OUTPUT DATA START
CHARSV	DATA 0			CHARACTER SAVE (FOR FSCROUT)
DVIDXP	DATA VIDXOP		VIDEO XOP NUMBER
DKEYXP	DATA KEYXOP		KEYBOARD XOP NUMBER
DIOXOP	DATA IOXOP		I/O XOP NUMBER
DUTXOP	DATA UTLXOP		UTILITY LIBRARY XOP NUMBER
TERCHA	DATA 0			TERMINATING SCREEN I/O CHARACTER
*
*  MISC TEXT STRINGS:
*
KXON	EQU  $			XON (CNTRL/S) CHARACTER
	BYTE >13
KXOFF	EQU  $			XOFF (CNTRL/Q) CHARACTER
	BYTE >11
KCR	EQU  $			CARRAIGE RETURN
	BYTE >0D
KLF	EQU  $			LINE FEED
	BYTE >0A
KFF	EQU  $			STRING TERMINATOR
	BYTE >FF
BLANKI	EQU  $
	BYTE >08,>20,>20,>08,>08,>00
CRLFP	EQU  $
	BYTE >20,>0D,>0A,>00
CURSOR	EQU  $
	BYTE >5F,>08,>00
WAIMSG	EQU  $
	BYTE >0D
	TEXT 'Press ENTER to Continue'
	BYTE >0D,>20,>0D,>00
	EVEN
BLANK	DATA '  '
*
*  DSKSS, TABLE OF DISK DEVICE NAMES
*
DSKSS	EQU  $
	DATA 'DS'		FLOPPY OR RAM DISK
	DATA 'RD'		RAM DISK
	DATA 'WD'		WINCHESTER DISK
	DATA 'HD'		HARD DISK
	DATA 'hd'		hard disk
	DATA 0
SCRDEV  EQU  $
	DATA 'CR'
*
*  END OF FILE MARKER
*
BEOD	EQU  $
	TEXT '>EOD'
	EVEN
*
*  SPECIAL CLOSE FILES COMMAND STACK
*
ALCLOS	EQU  $
	DATA CLOOPC		CLOSE FILE
	DATA 0			DYNAMIC FILE #
F6EADR	EQU  $
	END
